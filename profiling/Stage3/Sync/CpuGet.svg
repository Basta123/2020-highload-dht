<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (368 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.54%)</title><rect x="10.0" y="883.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.54%)</title><rect x="10.0" y="867.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 0.54%)</title><rect x="10.0" y="851.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.27%)</title><rect x="13.2" y="835.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.2" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.27%)</title><rect x="13.2" y="819.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.2" y="830.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.82%)</title><rect x="16.4" y="883.0" width="9.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.4" y="894.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.27%)</title><rect x="16.4" y="867.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.27%)</title><rect x="19.6" y="867.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="22.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.27%)</title><rect x="19.6" y="851.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="22.6" y="862.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.27%)</title><rect x="19.6" y="835.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="22.6" y="846.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.27%)</title><rect x="19.6" y="819.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.6" y="830.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.27%)</title><rect x="19.6" y="803.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="22.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.27%)</title><rect x="22.8" y="867.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 1.09%)</title><rect x="26.0" y="883.0" width="12.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="29.0" y="894.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.09%)</title><rect x="26.0" y="867.0" width="12.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.0" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.09%)</title><rect x="26.0" y="851.0" width="12.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="29.0" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.09%)</title><rect x="26.0" y="835.0" width="12.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="29.0" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.82%)</title><rect x="29.2" y="819.0" width="9.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="32.2" y="830.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.82%)</title><rect x="29.2" y="803.0" width="9.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="32.2" y="814.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.82%)</title><rect x="29.2" y="787.0" width="9.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="32.2" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.82%)</title><rect x="29.2" y="771.0" width="9.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="32.2" y="782.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.82%)</title><rect x="29.2" y="755.0" width="9.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="32.2" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.82%)</title><rect x="29.2" y="739.0" width="9.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="32.2" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.82%)</title><rect x="29.2" y="723.0" width="9.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="32.2" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (16 samples, 4.35%)</title><rect x="38.9" y="883.0" width="51.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="41.9" y="894.0">[unkn..</text>
</g>
<g>
<title>Interpreter (1 samples, 0.27%)</title><rect x="38.9" y="867.0" width="3.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="41.9" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_signal (15 samples, 4.08%)</title><rect x="42.1" y="867.0" width="48.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="45.1" y="878.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (15 samples, 4.08%)</title><rect x="42.1" y="851.0" width="48.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="45.1" y="862.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (15 samples, 4.08%)</title><rect x="42.1" y="835.0" width="48.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="45.1" y="846.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (15 samples, 4.08%)</title><rect x="42.1" y="819.0" width="48.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="45.1" y="830.0">__x6..</text>
</g>
<g>
<title>do_futex (15 samples, 4.08%)</title><rect x="42.1" y="803.0" width="48.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="45.1" y="814.0">do_f..</text>
</g>
<g>
<title>futex_wake (15 samples, 4.08%)</title><rect x="42.1" y="787.0" width="48.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="45.1" y="798.0">fute..</text>
</g>
<g>
<title>wake_up_q (15 samples, 4.08%)</title><rect x="42.1" y="771.0" width="48.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="45.1" y="782.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (15 samples, 4.08%)</title><rect x="42.1" y="755.0" width="48.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="45.1" y="766.0">try_..</text>
</g>
<g>
<title>__lock_text_start (15 samples, 4.08%)</title><rect x="42.1" y="739.0" width="48.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="45.1" y="750.0">__lo..</text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 2.45%)</title><rect x="90.2" y="883.0" width="28.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="93.2" y="894.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 2.45%)</title><rect x="90.2" y="867.0" width="28.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="93.2" y="878.0">en..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 2.45%)</title><rect x="90.2" y="851.0" width="28.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="93.2" y="862.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 2.45%)</title><rect x="90.2" y="835.0" width="28.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="93.2" y="846.0">__..</text>
</g>
<g>
<title>do_futex (9 samples, 2.45%)</title><rect x="90.2" y="819.0" width="28.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="93.2" y="830.0">do..</text>
</g>
<g>
<title>futex_wait (9 samples, 2.45%)</title><rect x="90.2" y="803.0" width="28.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="93.2" y="814.0">fu..</text>
</g>
<g>
<title>futex_wait_queue_me (8 samples, 2.17%)</title><rect x="90.2" y="787.0" width="25.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="93.2" y="798.0">f..</text>
</g>
<g>
<title>hrtimer_sleeper_start_expires (2 samples, 0.54%)</title><rect x="90.2" y="771.0" width="6.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="93.2" y="782.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (2 samples, 0.54%)</title><rect x="90.2" y="755.0" width="6.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="93.2" y="766.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="93.4" y="739.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="96.4" y="750.0"></text>
</g>
<g>
<title>schedule (6 samples, 1.63%)</title><rect x="96.6" y="771.0" width="19.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="99.6" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 1.63%)</title><rect x="96.6" y="755.0" width="19.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="99.6" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 1.63%)</title><rect x="96.6" y="739.0" width="19.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="99.6" y="750.0"></text>
</g>
<g>
<title>hrtimer_cancel (1 samples, 0.27%)</title><rect x="115.8" y="787.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="118.8" y="798.0"></text>
</g>
<g>
<title>hrtimer_try_to_cancel (1 samples, 0.27%)</title><rect x="115.8" y="771.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="118.8" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="115.8" y="755.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="118.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.27%)</title><rect x="119.0" y="883.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (1 samples, 0.27%)</title><rect x="119.0" y="867.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.0" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (314 samples, 85.33%)</title><rect x="122.2" y="883.0" width="1006.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.2" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.27%)</title><rect x="128.6" y="867.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="131.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.27%)</title><rect x="128.6" y="851.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.6" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.27%)</title><rect x="128.6" y="835.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="131.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (26 samples, 7.07%)</title><rect x="131.8" y="867.0" width="83.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.8" y="878.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (26 samples, 7.07%)</title><rect x="131.8" y="851.0" width="83.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.8" y="862.0">one/nio/n..</text>
</g>
<g>
<title>[unknown] (24 samples, 6.52%)</title><rect x="135.1" y="835.0" width="76.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="138.1" y="846.0">[unknown]</text>
</g>
<g>
<title>epoll_wait (24 samples, 6.52%)</title><rect x="135.1" y="819.0" width="76.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="138.1" y="830.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (24 samples, 6.52%)</title><rect x="135.1" y="803.0" width="76.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="138.1" y="814.0">entry_SY..</text>
</g>
<g>
<title>do_syscall_64 (24 samples, 6.52%)</title><rect x="135.1" y="787.0" width="76.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="138.1" y="798.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (23 samples, 6.25%)</title><rect x="135.1" y="771.0" width="73.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="138.1" y="782.0">__x64_sy..</text>
</g>
<g>
<title>do_epoll_wait (23 samples, 6.25%)</title><rect x="135.1" y="755.0" width="73.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="138.1" y="766.0">do_epoll..</text>
</g>
<g>
<title>ep_poll (23 samples, 6.25%)</title><rect x="135.1" y="739.0" width="73.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="138.1" y="750.0">ep_poll</text>
</g>
<g>
<title>__x86_indirect_thunk_r14 (1 samples, 0.27%)</title><rect x="138.3" y="723.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="141.3" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (3 samples, 0.82%)</title><rect x="141.5" y="723.0" width="9.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="144.5" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.82%)</title><rect x="141.5" y="707.0" width="9.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="144.5" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.27%)</title><rect x="144.7" y="691.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="147.7" y="702.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.27%)</title><rect x="147.9" y="691.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="150.9" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (18 samples, 4.89%)</title><rect x="151.1" y="723.0" width="57.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.1" y="734.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (18 samples, 4.89%)</title><rect x="151.1" y="707.0" width="57.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="154.1" y="718.0">schedu..</text>
</g>
<g>
<title>schedule (18 samples, 4.89%)</title><rect x="151.1" y="691.0" width="57.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="154.1" y="702.0">schedule</text>
</g>
<g>
<title>__sched_text_start (18 samples, 4.89%)</title><rect x="151.1" y="675.0" width="57.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="154.1" y="686.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (18 samples, 4.89%)</title><rect x="151.1" y="659.0" width="57.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="154.1" y="670.0">finish..</text>
</g>
<g>
<title>do_epoll_wait (1 samples, 0.27%)</title><rect x="208.8" y="771.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="211.8" y="782.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.27%)</title><rect x="212.0" y="835.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="215.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (285 samples, 77.45%)</title><rect x="215.2" y="867.0" width="913.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.2" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (282 samples, 76.63%)</title><rect x="221.6" y="851.0" width="904.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (266 samples, 72.28%)</title><rect x="221.6" y="835.0" width="853.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.6" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.27%)</title><rect x="244.1" y="819.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (254 samples, 69.02%)</title><rect x="247.3" y="819.0" width="814.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.3" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (254 samples, 69.02%)</title><rect x="247.3" y="803.0" width="814.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.3" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_getValueByKey.handleRequest (250 samples, 67.93%)</title><rect x="250.5" y="787.0" width="801.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.5" y="798.0">RequestHandler3_getValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (35 samples, 9.51%)</title><rect x="253.7" y="771.0" width="112.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.7" y="782.0">one/nio/http/H..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.27%)</title><rect x="253.7" y="755.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="253.7" y="739.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="253.7" y="723.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (34 samples, 9.24%)</title><rect x="256.9" y="755.0" width="109.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.9" y="766.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/net/Session.write (34 samples, 9.24%)</title><rect x="256.9" y="739.0" width="109.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.9" y="750.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (34 samples, 9.24%)</title><rect x="256.9" y="723.0" width="109.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.9" y="734.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (34 samples, 9.24%)</title><rect x="256.9" y="707.0" width="109.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.9" y="718.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (34 samples, 9.24%)</title><rect x="256.9" y="691.0" width="109.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.9" y="702.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.27%)</title><rect x="256.9" y="675.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="259.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="256.9" y="659.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="259.9" y="670.0"></text>
</g>
<g>
<title>__send (31 samples, 8.42%)</title><rect x="260.1" y="675.0" width="99.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="263.1" y="686.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 8.15%)</title><rect x="263.3" y="659.0" width="96.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="266.3" y="670.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (30 samples, 8.15%)</title><rect x="263.3" y="643.0" width="96.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="266.3" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (28 samples, 7.61%)</title><rect x="263.3" y="627.0" width="89.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="266.3" y="638.0">__x64_sys_..</text>
</g>
<g>
<title>__sys_sendto (28 samples, 7.61%)</title><rect x="263.3" y="611.0" width="89.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="266.3" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (28 samples, 7.61%)</title><rect x="263.3" y="595.0" width="89.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="266.3" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (28 samples, 7.61%)</title><rect x="263.3" y="579.0" width="89.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="266.3" y="590.0">inet6_send..</text>
</g>
<g>
<title>tcp_sendmsg (28 samples, 7.61%)</title><rect x="263.3" y="563.0" width="89.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="266.3" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (28 samples, 7.61%)</title><rect x="263.3" y="547.0" width="89.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="266.3" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.27%)</title><rect x="263.3" y="531.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="266.3" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.27%)</title><rect x="266.5" y="531.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="269.5" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.27%)</title><rect x="266.5" y="515.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="269.5" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.27%)</title><rect x="266.5" y="499.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="269.5" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.27%)</title><rect x="269.7" y="531.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="272.7" y="542.0"></text>
</g>
<g>
<title>tcp_push (25 samples, 6.79%)</title><rect x="272.9" y="531.0" width="80.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="275.9" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (25 samples, 6.79%)</title><rect x="272.9" y="515.0" width="80.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="275.9" y="526.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (25 samples, 6.79%)</title><rect x="272.9" y="499.0" width="80.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="275.9" y="510.0">tcp_write..</text>
</g>
<g>
<title>__tcp_transmit_skb (25 samples, 6.79%)</title><rect x="272.9" y="483.0" width="80.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="275.9" y="494.0">__tcp_tra..</text>
</g>
<g>
<title>ip_queue_xmit (25 samples, 6.79%)</title><rect x="272.9" y="467.0" width="80.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="275.9" y="478.0">ip_queue_..</text>
</g>
<g>
<title>__ip_queue_xmit (25 samples, 6.79%)</title><rect x="272.9" y="451.0" width="80.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="275.9" y="462.0">__ip_queu..</text>
</g>
<g>
<title>ip_local_out (25 samples, 6.79%)</title><rect x="272.9" y="435.0" width="80.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="275.9" y="446.0">ip_local_..</text>
</g>
<g>
<title>ip_output (25 samples, 6.79%)</title><rect x="272.9" y="419.0" width="80.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="275.9" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (25 samples, 6.79%)</title><rect x="272.9" y="403.0" width="80.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="275.9" y="414.0">ip_finish..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.27%)</title><rect x="272.9" y="387.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="275.9" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (24 samples, 6.52%)</title><rect x="276.1" y="387.0" width="77.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="279.1" y="398.0">__ip_fin..</text>
</g>
<g>
<title>ip_finish_output2 (24 samples, 6.52%)</title><rect x="276.1" y="371.0" width="77.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="279.1" y="382.0">ip_finis..</text>
</g>
<g>
<title>__local_bh_enable_ip (22 samples, 5.98%)</title><rect x="276.1" y="355.0" width="70.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="279.1" y="366.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.20 (22 samples, 5.98%)</title><rect x="276.1" y="339.0" width="70.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="279.1" y="350.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (22 samples, 5.98%)</title><rect x="276.1" y="323.0" width="70.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="279.1" y="334.0">do_softi..</text>
</g>
<g>
<title>__softirqentry_text_start (22 samples, 5.98%)</title><rect x="276.1" y="307.0" width="70.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="279.1" y="318.0">__softir..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.27%)</title><rect x="276.1" y="291.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="279.1" y="302.0"></text>
</g>
<g>
<title>net_rx_action (21 samples, 5.71%)</title><rect x="279.3" y="291.0" width="67.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="282.3" y="302.0">net_rx_..</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.27%)</title><rect x="279.3" y="275.0" width="3.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="282.3" y="286.0"></text>
</g>
<g>
<title>process_backlog (20 samples, 5.43%)</title><rect x="282.6" y="275.0" width="64.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="285.6" y="286.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (20 samples, 5.43%)</title><rect x="282.6" y="259.0" width="64.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="285.6" y="270.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (20 samples, 5.43%)</title><rect x="282.6" y="243.0" width="64.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="285.6" y="254.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.27%)</title><rect x="282.6" y="227.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="285.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv (19 samples, 5.16%)</title><rect x="285.8" y="227.0" width="60.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="288.8" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (19 samples, 5.16%)</title><rect x="285.8" y="211.0" width="60.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="288.8" y="222.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (19 samples, 5.16%)</title><rect x="285.8" y="195.0" width="60.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="288.8" y="206.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (19 samples, 5.16%)</title><rect x="285.8" y="179.0" width="60.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="288.8" y="190.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (19 samples, 5.16%)</title><rect x="285.8" y="163.0" width="60.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="288.8" y="174.0">ip_pro..</text>
</g>
<g>
<title>tcp_v4_rcv (18 samples, 4.89%)</title><rect x="289.0" y="147.0" width="57.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="292.0" y="158.0">tcp_v4..</text>
</g>
<g>
<title>tcp_v4_do_rcv (17 samples, 4.62%)</title><rect x="292.2" y="131.0" width="54.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="295.2" y="142.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (17 samples, 4.62%)</title><rect x="292.2" y="115.0" width="54.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="295.2" y="126.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.27%)</title><rect x="292.2" y="99.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="295.2" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.27%)</title><rect x="292.2" y="83.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="295.2" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.27%)</title><rect x="292.2" y="67.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="295.2" y="78.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.27%)</title><rect x="292.2" y="51.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="295.2" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="292.2" y="35.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="295.2" y="46.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.54%)</title><rect x="295.4" y="99.0" width="6.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="298.4" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.54%)</title><rect x="295.4" y="83.0" width="6.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="298.4" y="94.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.45 (1 samples, 0.27%)</title><rect x="298.6" y="67.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.6" y="78.0"></text>
</g>
<g>
<title>tcp_data_ready (14 samples, 3.80%)</title><rect x="301.8" y="99.0" width="44.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="304.8" y="110.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (14 samples, 3.80%)</title><rect x="301.8" y="83.0" width="44.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="304.8" y="94.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (14 samples, 3.80%)</title><rect x="301.8" y="67.0" width="44.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="304.8" y="78.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (14 samples, 3.80%)</title><rect x="301.8" y="51.0" width="44.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="304.8" y="62.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (14 samples, 3.80%)</title><rect x="301.8" y="35.0" width="44.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="304.8" y="46.0">__lo..</text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 0.54%)</title><rect x="346.7" y="355.0" width="6.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="349.7" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 0.54%)</title><rect x="346.7" y="339.0" width="6.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="349.7" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.54%)</title><rect x="346.7" y="323.0" width="6.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="349.7" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.27%)</title><rect x="346.7" y="307.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="349.7" y="318.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.27%)</title><rect x="346.7" y="291.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="349.7" y="302.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.27%)</title><rect x="349.9" y="307.0" width="3.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="352.9" y="318.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.54%)</title><rect x="353.1" y="627.0" width="6.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="356.1" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.54%)</title><rect x="353.1" y="611.0" width="6.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="356.1" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.54%)</title><rect x="353.1" y="595.0" width="6.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="356.1" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.54%)</title><rect x="353.1" y="579.0" width="6.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="356.1" y="590.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.54%)</title><rect x="359.5" y="675.0" width="6.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="362.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey (214 samples, 58.15%)</title><rect x="365.9" y="771.0" width="686.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.9" y="782.0">ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.get (212 samples, 57.61%)</title><rect x="369.1" y="755.0" width="679.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.1" y="766.0">ru/mail/polis/dao/basta123/MyDAORocksDB.get</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.27%)</title><rect x="375.5" y="739.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="378.5" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.27%)</title><rect x="375.5" y="723.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="378.5" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.27%)</title><rect x="375.5" y="707.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="378.5" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.27%)</title><rect x="375.5" y="691.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="378.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.iterator (195 samples, 52.99%)</title><rect x="378.8" y="739.0" width="625.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.8" y="750.0">ru/mail/polis/dao/basta123/MyDAORocksDB.iterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (24 samples, 6.52%)</title><rect x="378.8" y="723.0" width="76.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.8" y="734.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (16 samples, 4.35%)</title><rect x="378.8" y="707.0" width="51.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.8" y="718.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (14 samples, 3.80%)</title><rect x="378.8" y="691.0" width="44.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="381.8" y="702.0">Java..</text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (14 samples, 3.80%)</title><rect x="378.8" y="675.0" width="44.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="381.8" y="686.0">rock..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.54%)</title><rect x="378.8" y="659.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="381.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (11 samples, 2.99%)</title><rect x="385.2" y="659.0" width="35.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.2" y="670.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.54%)</title><rect x="385.2" y="643.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="388.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.27%)</title><rect x="385.2" y="627.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="388.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.27%)</title><rect x="385.2" y="611.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="388.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.27%)</title><rect x="388.4" y="627.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="391.4" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="388.4" y="611.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="391.4" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="388.4" y="595.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="391.4" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="388.4" y="579.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="391.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (1 samples, 0.27%)</title><rect x="391.6" y="643.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="394.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::Arena*) (1 samples, 0.27%)</title><rect x="391.6" y="627.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="394.6" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13943165190053973494.so (1 samples, 0.27%)</title><rect x="391.6" y="611.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="394.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::Arena*) (1 samples, 0.27%)</title><rect x="394.8" y="643.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::~MergeIteratorBuilder() (1 samples, 0.27%)</title><rect x="398.0" y="643.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="401.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (6 samples, 1.63%)</title><rect x="401.2" y="643.0" width="19.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="404.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.27%)</title><rect x="407.6" y="627.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="410.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Init(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (1 samples, 0.27%)</title><rect x="410.8" y="627.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="413.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::ForwardRangeDelIterator::ForwardRangeDelIterator(rocksdb::InternalKeyComparator const*) (1 samples, 0.27%)</title><rect x="414.0" y="627.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="417.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ReverseRangeDelIterator::ReverseRangeDelIterator(rocksdb::InternalKeyComparator const*) [clone .plt] (1 samples, 0.27%)</title><rect x="417.2" y="627.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="420.2" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="420.4" y="659.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="423.4" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="420.4" y="643.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="423.4" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="420.4" y="627.0" width="3.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="423.4" y="638.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.27%)</title><rect x="423.6" y="691.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="426.6" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="423.6" y="675.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="426.6" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="423.6" y="659.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="426.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="423.6" y="643.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="426.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (1 samples, 0.27%)</title><rect x="426.8" y="691.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="429.8" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="426.8" y="675.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="429.8" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="426.8" y="659.0" width="3.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="429.8" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="426.8" y="643.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="429.8" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (8 samples, 2.17%)</title><rect x="430.1" y="707.0" width="25.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.1" y="718.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (8 samples, 2.17%)</title><rect x="430.1" y="691.0" width="25.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.1" y="702.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (8 samples, 2.17%)</title><rect x="430.1" y="675.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.1" y="686.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (8 samples, 2.17%)</title><rect x="430.1" y="659.0" width="25.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.1" y="670.0">o..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="430.1" y="643.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="433.1" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.27%)</title><rect x="430.1" y="627.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="433.1" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (7 samples, 1.90%)</title><rect x="433.3" y="643.0" width="22.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.3" y="654.0">o..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 1.90%)</title><rect x="433.3" y="627.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.3" y="638.0">j..</text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (2 samples, 0.54%)</title><rect x="433.3" y="611.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="436.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (3 samples, 0.82%)</title><rect x="439.7" y="611.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="442.7" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.27%)</title><rect x="442.9" y="595.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.9" y="606.0"></text>
</g>
<g>
<title>LatestMethodCache::get_method() (1 samples, 0.27%)</title><rect x="446.1" y="595.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.1" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::register_finalizer(JavaThread*, oopDesc*) (2 samples, 0.54%)</title><rect x="449.3" y="611.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="452.3" y="622.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.27%)</title><rect x="449.3" y="595.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="452.3" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.27%)</title><rect x="452.5" y="595.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.5" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.27%)</title><rect x="452.5" y="579.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="455.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.27%)</title><rect x="452.5" y="563.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="455.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt; (161 samples, 43.75%)</title><rect x="455.7" y="723.0" width="516.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.7" y="734.0">ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (161 samples, 43.75%)</title><rect x="455.7" y="707.0" width="516.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.7" y="718.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (161 samples, 43.75%)</title><rect x="455.7" y="691.0" width="516.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.7" y="702.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.82%)</title><rect x="455.7" y="675.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.7" y="686.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (94 samples, 25.54%)</title><rect x="465.3" y="675.0" width="301.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="468.3" y="686.0">Java_org_rocksdb_RocksIterator_seek0</text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.27%)</title><rect x="465.3" y="659.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="468.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::TraceIteratorSeek(unsigned int const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.27%)</title><rect x="468.5" y="659.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="471.5" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="468.5" y="643.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="471.5" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="468.5" y="627.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="471.5" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="468.5" y="611.0" width="3.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="471.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (92 samples, 25.00%)</title><rect x="471.7" y="659.0" width="295.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="474.7" y="670.0">rocksdb::DBIter::Seek(rocksdb::Slice con..</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (91 samples, 24.73%)</title><rect x="474.9" y="643.0" width="291.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="477.9" y="654.0">rocksdb::MemTableIterator::Seek(rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni13943165190053973494.so (88 samples, 23.91%)</title><rect x="474.9" y="627.0" width="282.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="477.9" y="638.0">/tmp/librocksdbjni13943165190053973494..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (88 samples, 23.91%)</title><rect x="474.9" y="611.0" width="282.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.9" y="622.0">rocksdb::InlineSkipList&lt;rocksdb::MemTa..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.27%)</title><rect x="494.2" y="595.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="497.2" y="606.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.27%)</title><rect x="497.4" y="595.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.4" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="497.4" y="579.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="500.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="497.4" y="563.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="500.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="497.4" y="547.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="500.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (80 samples, 21.74%)</title><rect x="500.6" y="595.0" width="256.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="503.6" y="606.0">rocksdb::MemTable::KeyComparator::..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.27%)</title><rect x="500.6" y="579.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="503.6" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.54%)</title><rect x="503.8" y="579.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="506.8" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.27%)</title><rect x="510.2" y="579.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="513.2" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.27%)</title><rect x="513.4" y="579.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="516.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (73 samples, 19.84%)</title><rect x="516.6" y="579.0" width="234.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="519.6" y="590.0">rocksdb::BaseComparatorJniCallb..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (22 samples, 5.98%)</title><rect x="519.8" y="563.0" width="70.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.8" y="574.0">JNIEnv_:..</text>
</g>
<g>
<title>jni_CallIntMethodV (22 samples, 5.98%)</title><rect x="519.8" y="547.0" width="70.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="522.8" y="558.0">jni_Call..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.27%)</title><rect x="523.0" y="531.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.0" y="542.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.27%)</title><rect x="526.2" y="531.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="529.2" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (18 samples, 4.89%)</title><rect x="529.5" y="531.0" width="57.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="532.5" y="542.0">jni_in..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.27%)</title><rect x="539.1" y="515.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.1" y="526.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.27%)</title><rect x="542.3" y="515.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="545.3" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.27%)</title><rect x="545.5" y="515.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="548.5" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (10 samples, 2.72%)</title><rect x="548.7" y="515.0" width="32.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.7" y="526.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.27%)</title><rect x="561.5" y="499.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="564.5" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.82%)</title><rect x="564.7" y="499.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="567.7" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.27%)</title><rect x="571.1" y="483.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="574.1" y="494.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.27%)</title><rect x="574.3" y="499.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="577.3" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.27%)</title><rect x="577.6" y="499.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.6" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.27%)</title><rect x="580.8" y="515.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="583.8" y="526.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.27%)</title><rect x="584.0" y="515.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="587.0" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.27%)</title><rect x="587.2" y="531.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="590.2" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (39 samples, 10.60%)</title><rect x="590.4" y="563.0" width="125.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="593.4" y="574.0">JNIEnv_::CallVo..</text>
</g>
<g>
<title>jni_CallVoidMethodV (38 samples, 10.33%)</title><rect x="590.4" y="547.0" width="121.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="593.4" y="558.0">jni_CallVoidMet..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.27%)</title><rect x="600.0" y="531.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="542.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.27%)</title><rect x="603.2" y="531.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="606.2" y="542.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.27%)</title><rect x="606.4" y="531.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="609.4" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.54%)</title><rect x="609.6" y="531.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="612.6" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.27%)</title><rect x="616.0" y="531.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.0" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.27%)</title><rect x="619.2" y="531.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.2" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.82%)</title><rect x="622.4" y="531.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.4" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (25 samples, 6.79%)</title><rect x="632.1" y="531.0" width="80.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="635.1" y="542.0">jni_invok..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.27%)</title><rect x="641.7" y="515.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="644.7" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.27%)</title><rect x="644.9" y="515.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="647.9" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples, 4.08%)</title><rect x="648.1" y="515.0" width="48.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="651.1" y="526.0">Java..</text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.54%)</title><rect x="660.9" y="499.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.9" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 1.09%)</title><rect x="667.3" y="499.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="670.3" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.27%)</title><rect x="677.0" y="483.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.0" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 1.09%)</title><rect x="680.2" y="499.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="683.2" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="689.8" y="483.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="692.8" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="689.8" y="467.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="692.8" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="689.8" y="451.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="692.8" y="462.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.27%)</title><rect x="693.0" y="499.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="696.0" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.27%)</title><rect x="696.2" y="515.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.2" y="526.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.27%)</title><rect x="699.4" y="515.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="702.4" y="526.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.54%)</title><rect x="702.6" y="515.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="705.6" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="709.0" y="515.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="712.0" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="709.0" y="499.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="712.0" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="709.0" y="483.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="712.0" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="712.2" y="547.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="715.2" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="712.2" y="531.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="715.2" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="712.2" y="515.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="715.2" y="526.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.54%)</title><rect x="715.4" y="563.0" width="6.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="718.4" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.27%)</title><rect x="721.8" y="563.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="724.8" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="721.8" y="547.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="724.8" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.27%)</title><rect x="725.1" y="563.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="728.1" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="725.1" y="547.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="728.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="725.1" y="531.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="728.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="725.1" y="515.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="728.1" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.27%)</title><rect x="728.3" y="563.0" width="3.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="731.3" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.54%)</title><rect x="731.5" y="563.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="734.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (4 samples, 1.09%)</title><rect x="737.9" y="563.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="740.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.54%)</title><rect x="741.1" y="547.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="744.1" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.27%)</title><rect x="747.5" y="547.0" width="3.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="750.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.27%)</title><rect x="750.7" y="579.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.27%)</title><rect x="753.9" y="579.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="756.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::EncodeKey(std::string*, rocksdb::Slice const&amp;) (2 samples, 0.54%)</title><rect x="757.1" y="627.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="760.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const [clone .plt] (1 samples, 0.27%)</title><rect x="763.5" y="627.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.36%)</title><rect x="766.7" y="675.0" width="16.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="769.7" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.27%)</title><rect x="766.7" y="659.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="769.7" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (2 samples, 0.54%)</title><rect x="769.9" y="659.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.9" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) [clone .plt] (1 samples, 0.27%)</title><rect x="776.4" y="659.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.4" y="670.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.27%)</title><rect x="779.6" y="659.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="782.6" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="779.6" y="643.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="782.6" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="779.6" y="627.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="782.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="779.6" y="611.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="782.6" y="622.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.27%)</title><rect x="782.8" y="675.0" width="3.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="785.8" y="686.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (2 samples, 0.54%)</title><rect x="786.0" y="675.0" width="6.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="789.0" y="686.0"></text>
</g>
<g>
<title>call_stub (6 samples, 1.63%)</title><rect x="792.4" y="675.0" width="19.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.4" y="686.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.27%)</title><rect x="811.6" y="675.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="814.6" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 0.82%)</title><rect x="814.8" y="675.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (45 samples, 12.23%)</title><rect x="824.5" y="675.0" width="144.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="827.5" y="686.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (44 samples, 11.96%)</title><rect x="827.7" y="659.0" width="141.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.7" y="670.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (44 samples, 11.96%)</title><rect x="827.7" y="643.0" width="141.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.7" y="654.0">org/rocksdb/Abstra..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.27%)</title><rect x="827.7" y="627.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.7" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (43 samples, 11.68%)</title><rect x="830.9" y="627.0" width="137.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.9" y="638.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (43 samples, 11.68%)</title><rect x="830.9" y="611.0" width="137.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.9" y="622.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (35 samples, 9.51%)</title><rect x="853.3" y="595.0" width="112.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="856.3" y="606.0">Java_org_rocks..</text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.27%)</title><rect x="853.3" y="579.0" width="3.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="856.3" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.82%)</title><rect x="856.5" y="579.0" width="9.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="859.5" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.54%)</title><rect x="856.5" y="563.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.5" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="862.9" y="563.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="865.9" y="574.0"></text>
</g>
<g>
<title>jni_NewByteArray (24 samples, 6.52%)</title><rect x="866.1" y="579.0" width="77.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="869.1" y="590.0">jni_NewB..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.27%)</title><rect x="872.6" y="563.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.54%)</title><rect x="875.8" y="563.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="878.8" y="574.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.27%)</title><rect x="882.2" y="563.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.2" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.27%)</title><rect x="885.4" y="563.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.4" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.54%)</title><rect x="888.6" y="563.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.6" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (15 samples, 4.08%)</title><rect x="895.0" y="563.0" width="48.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.0" y="574.0">Type..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 3.80%)</title><rect x="898.2" y="547.0" width="44.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.2" y="558.0">Coll..</text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 3.26%)</title><rect x="898.2" y="531.0" width="38.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.2" y="542.0">Mem..</text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 1.09%)</title><rect x="901.4" y="515.0" width="12.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.4" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (6 samples, 1.63%)</title><rect x="914.2" y="515.0" width="19.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="917.2" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.27%)</title><rect x="933.5" y="515.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="936.5" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.54%)</title><rect x="936.7" y="531.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.7" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 1.90%)</title><rect x="943.1" y="579.0" width="22.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="946.1" y="590.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.54%)</title><rect x="952.7" y="563.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.7" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="959.1" y="563.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.1" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.27%)</title><rect x="962.3" y="563.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="965.3" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.27%)</title><rect x="965.5" y="595.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="968.5" y="606.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.27%)</title><rect x="968.7" y="675.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.close (9 samples, 2.45%)</title><rect x="972.0" y="723.0" width="28.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="975.0" y="734.0">ru..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (9 samples, 2.45%)</title><rect x="972.0" y="707.0" width="28.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="975.0" y="718.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (9 samples, 2.45%)</title><rect x="972.0" y="691.0" width="28.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="975.0" y="702.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (9 samples, 2.45%)</title><rect x="972.0" y="675.0" width="28.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.0" y="686.0">or..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.27%)</title><rect x="972.0" y="659.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (8 samples, 2.17%)</title><rect x="975.2" y="659.0" width="25.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.2" y="670.0">r..</text>
</g>
<g>
<title>rocksdb::Arena::~Arena() (1 samples, 0.27%)</title><rect x="975.2" y="643.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="978.2" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="975.2" y="627.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="978.2" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="975.2" y="611.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="978.2" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="975.2" y="595.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="978.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (7 samples, 1.90%)</title><rect x="978.4" y="643.0" width="22.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="654.0">r..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.27%)</title><rect x="978.4" y="627.0" width="3.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="981.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::Arena::~Arena() (1 samples, 0.27%)</title><rect x="981.6" y="627.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (5 samples, 1.36%)</title><rect x="984.8" y="627.0" width="16.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.27%)</title><rect x="997.6" y="611.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.6" y="622.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.27%)</title><rect x="997.6" y="595.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.6" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="1000.8" y="723.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1003.8" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="1000.8" y="707.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1003.8" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="1000.8" y="691.0" width="3.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1003.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (14 samples, 3.80%)</title><rect x="1004.0" y="739.0" width="44.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1007.0" y="750.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (14 samples, 3.80%)</title><rect x="1004.0" y="723.0" width="44.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1007.0" y="734.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (13 samples, 3.53%)</title><rect x="1007.2" y="707.0" width="41.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1010.2" y="718.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (13 samples, 3.53%)</title><rect x="1007.2" y="691.0" width="41.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1010.2" y="702.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (1 samples, 0.27%)</title><rect x="1007.2" y="675.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1010.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (8 samples, 2.17%)</title><rect x="1010.4" y="675.0" width="25.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.4" y="686.0">r..</text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (8 samples, 2.17%)</title><rect x="1010.4" y="659.0" width="25.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.4" y="670.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 2.17%)</title><rect x="1010.4" y="643.0" width="25.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.4" y="654.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 1.09%)</title><rect x="1010.4" y="627.0" width="12.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.4" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 1.09%)</title><rect x="1010.4" y="611.0" width="12.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1013.4" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.82%)</title><rect x="1013.6" y="595.0" width="9.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1016.6" y="606.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.27%)</title><rect x="1013.6" y="579.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.6" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.54%)</title><rect x="1016.8" y="579.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.8" y="590.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.27%)</title><rect x="1016.8" y="563.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.8" y="574.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.27%)</title><rect x="1020.1" y="563.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.1" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.82%)</title><rect x="1023.3" y="627.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.3" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.82%)</title><rect x="1023.3" y="611.0" width="9.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1026.3" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.82%)</title><rect x="1023.3" y="595.0" width="9.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1026.3" y="606.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.27%)</title><rect x="1023.3" y="579.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.3" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.27%)</title><rect x="1026.5" y="579.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.5" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.27%)</title><rect x="1026.5" y="563.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.5" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="1026.5" y="547.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1029.5" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="1026.5" y="531.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1029.5" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="1026.5" y="515.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1029.5" y="526.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.27%)</title><rect x="1026.5" y="499.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1029.5" y="510.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.27%)</title><rect x="1026.5" y="483.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1029.5" y="494.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.27%)</title><rect x="1026.5" y="467.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1029.5" y="478.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.27%)</title><rect x="1029.7" y="579.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.27%)</title><rect x="1032.9" y="627.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.9" y="638.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.27%)</title><rect x="1032.9" y="611.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1035.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (4 samples, 1.09%)</title><rect x="1036.1" y="675.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1039.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (4 samples, 1.09%)</title><rect x="1036.1" y="659.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.1" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (4 samples, 1.09%)</title><rect x="1036.1" y="643.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.1" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (4 samples, 1.09%)</title><rect x="1036.1" y="627.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.1" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (4 samples, 1.09%)</title><rect x="1036.1" y="611.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1039.1" y="622.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (4 samples, 1.09%)</title><rect x="1036.1" y="595.0" width="12.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1039.1" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.27%)</title><rect x="1036.1" y="579.0" width="3.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1039.1" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="1036.1" y="563.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.27%)</title><rect x="1036.1" y="547.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.1" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.27%)</title><rect x="1036.1" y="531.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1039.1" y="542.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (1 samples, 0.27%)</title><rect x="1036.1" y="515.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1039.1" y="526.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.82%)</title><rect x="1039.3" y="579.0" width="9.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1042.3" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.27%)</title><rect x="1042.5" y="563.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1045.5" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.27%)</title><rect x="1045.7" y="563.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1048.7" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.27%)</title><rect x="1045.7" y="547.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.27%)</title><rect x="1048.9" y="755.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1051.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.27%)</title><rect x="1048.9" y="739.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.27%)</title><rect x="1048.9" y="723.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1051.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.27%)</title><rect x="1048.9" y="707.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.27%)</title><rect x="1048.9" y="691.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1051.9" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.27%)</title><rect x="1048.9" y="675.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1051.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.27%)</title><rect x="1048.9" y="659.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1051.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.54%)</title><rect x="1052.1" y="787.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.54%)</title><rect x="1052.1" y="771.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1055.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.54%)</title><rect x="1052.1" y="755.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.54%)</title><rect x="1052.1" y="739.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1055.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.54%)</title><rect x="1052.1" y="723.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.1" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="1055.3" y="707.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1058.3" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="1058.5" y="787.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1061.5" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="1058.5" y="771.0" width="3.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1061.5" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="1058.5" y="755.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1061.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.82%)</title><rect x="1061.7" y="819.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.54%)</title><rect x="1064.9" y="803.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1067.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.54%)</title><rect x="1064.9" y="787.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1067.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.54%)</title><rect x="1064.9" y="771.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1067.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.54%)</title><rect x="1064.9" y="755.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.27%)</title><rect x="1071.4" y="819.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 4.35%)</title><rect x="1074.6" y="835.0" width="51.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.6" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (16 samples, 4.35%)</title><rect x="1074.6" y="819.0" width="51.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.6" y="830.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.82%)</title><rect x="1077.8" y="803.0" width="9.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1080.8" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.54%)</title><rect x="1081.0" y="787.0" width="6.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1084.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="1081.0" y="771.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.0" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.27%)</title><rect x="1084.2" y="771.0" width="3.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1087.2" y="782.0"></text>
</g>
<g>
<title>__recv (12 samples, 3.26%)</title><rect x="1087.4" y="803.0" width="38.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1090.4" y="814.0">__r..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 2.99%)</title><rect x="1090.6" y="787.0" width="35.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1093.6" y="798.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (11 samples, 2.99%)</title><rect x="1090.6" y="771.0" width="35.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1093.6" y="782.0">do_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 2.45%)</title><rect x="1097.0" y="755.0" width="28.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1100.0" y="766.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (9 samples, 2.45%)</title><rect x="1097.0" y="739.0" width="28.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1100.0" y="750.0">__..</text>
</g>
<g>
<title>sock_recvmsg (9 samples, 2.45%)</title><rect x="1097.0" y="723.0" width="28.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1100.0" y="734.0">so..</text>
</g>
<g>
<title>inet6_recvmsg (6 samples, 1.63%)</title><rect x="1097.0" y="707.0" width="19.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1100.0" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (6 samples, 1.63%)</title><rect x="1097.0" y="691.0" width="19.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1100.0" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.82%)</title><rect x="1097.0" y="675.0" width="9.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1100.0" y="686.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.27%)</title><rect x="1097.0" y="659.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1100.0" y="670.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.54%)</title><rect x="1100.2" y="659.0" width="6.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1103.2" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.54%)</title><rect x="1100.2" y="643.0" width="6.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1103.2" y="654.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.54%)</title><rect x="1100.2" y="627.0" width="6.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1103.2" y="638.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.27%)</title><rect x="1106.6" y="675.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1109.6" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.27%)</title><rect x="1106.6" y="659.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1109.6" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.27%)</title><rect x="1109.8" y="675.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1112.8" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.27%)</title><rect x="1113.0" y="675.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.82%)</title><rect x="1116.2" y="707.0" width="9.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1119.2" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.82%)</title><rect x="1116.2" y="691.0" width="9.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1119.2" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.82%)</title><rect x="1116.2" y="675.0" width="9.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1119.2" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.82%)</title><rect x="1116.2" y="659.0" width="9.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1119.2" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.27%)</title><rect x="1125.9" y="851.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1128.9" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.27%)</title><rect x="1125.9" y="835.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1128.9" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.27%)</title><rect x="1125.9" y="819.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1128.9" y="830.0"></text>
</g>
<g>
<title>start_thread (19 samples, 5.16%)</title><rect x="1129.1" y="883.0" width="60.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1132.1" y="894.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 5.16%)</title><rect x="1129.1" y="867.0" width="60.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1132.1" y="878.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (19 samples, 5.16%)</title><rect x="1129.1" y="851.0" width="60.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.1" y="862.0">Thread..</text>
</g>
<g>
<title>JavaThread::run() (19 samples, 5.16%)</title><rect x="1129.1" y="835.0" width="60.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="846.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (19 samples, 5.16%)</title><rect x="1129.1" y="819.0" width="60.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="830.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (19 samples, 5.16%)</title><rect x="1129.1" y="803.0" width="60.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.1" y="814.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (19 samples, 5.16%)</title><rect x="1129.1" y="787.0" width="60.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="798.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (19 samples, 5.16%)</title><rect x="1129.1" y="771.0" width="60.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.1" y="782.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 2.72%)</title><rect x="1129.1" y="755.0" width="32.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="766.0">Co..</text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.27%)</title><rect x="1129.1" y="739.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.1" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.27%)</title><rect x="1129.1" y="723.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.1" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.27%)</title><rect x="1129.1" y="707.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.1" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.27%)</title><rect x="1129.1" y="691.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.27%)</title><rect x="1129.1" y="675.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.27%)</title><rect x="1132.3" y="739.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.27%)</title><rect x="1132.3" y="723.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 1.90%)</title><rect x="1135.5" y="739.0" width="22.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.5" y="750.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.27%)</title><rect x="1138.7" y="723.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.27%)</title><rect x="1138.7" y="707.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.27%)</title><rect x="1141.9" y="723.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.27%)</title><rect x="1145.1" y="723.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1145.1" y="707.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1145.1" y="691.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.1" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.27%)</title><rect x="1145.1" y="675.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1148.1" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.27%)</title><rect x="1148.3" y="723.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1151.5" y="723.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1154.7" y="723.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.7" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1154.7" y="707.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1157.9" y="739.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.9" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 1.90%)</title><rect x="1161.1" y="755.0" width="22.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.1" y="766.0">C..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (4 samples, 1.09%)</title><rect x="1161.1" y="739.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 1.09%)</title><rect x="1161.1" y="723.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1161.1" y="707.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.27%)</title><rect x="1164.3" y="707.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.54%)</title><rect x="1167.6" y="707.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.54%)</title><rect x="1174.0" y="739.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.27%)</title><rect x="1174.0" y="723.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.0" y="734.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.27%)</title><rect x="1174.0" y="707.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.27%)</title><rect x="1177.2" y="723.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.27%)</title><rect x="1177.2" y="707.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.27%)</title><rect x="1180.4" y="739.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.27%)</title><rect x="1180.4" y="723.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.27%)</title><rect x="1180.4" y="707.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1183.6" y="755.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1183.6" y="739.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1183.6" y="723.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1183.6" y="707.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1183.6" y="691.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1183.6" y="675.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1183.6" y="659.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1183.6" y="643.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1183.6" y="627.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1183.6" y="611.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1183.6" y="595.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1183.6" y="579.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1183.6" y="563.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1183.6" y="547.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1183.6" y="531.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1183.6" y="515.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1183.6" y="499.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1183.6" y="483.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1183.6" y="467.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1183.6" y="451.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1183.6" y="435.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1183.6" y="419.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1183.6" y="403.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.27%)</title><rect x="1183.6" y="387.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="398.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.27%)</title><rect x="1183.6" y="371.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="382.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.27%)</title><rect x="1183.6" y="355.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.27%)</title><rect x="1183.6" y="339.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.27%)</title><rect x="1183.6" y="323.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1186.8" y="659.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1186.8" y="643.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1186.8" y="627.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1186.8" y="611.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1186.8" y="595.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1186.8" y="579.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1186.8" y="563.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1186.8" y="547.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1186.8" y="531.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1186.8" y="515.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1186.8" y="499.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1186.8" y="483.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1186.8" y="467.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1186.8" y="451.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1186.8" y="435.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1186.8" y="419.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1186.8" y="403.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1186.8" y="387.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1186.8" y="371.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1186.8" y="355.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1186.8" y="339.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1186.8" y="323.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
</g>
</svg>
