<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (341 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.59%)</title><rect x="10.0" y="931.0" width="6.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.29%)</title><rect x="10.0" y="915.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.29%)</title><rect x="10.0" y="899.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="10.0" y="883.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="10.0" y="867.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="10.0" y="851.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.29%)</title><rect x="10.0" y="835.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.29%)</title><rect x="10.0" y="819.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.29%)</title><rect x="10.0" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.29%)</title><rect x="10.0" y="787.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.29%)</title><rect x="10.0" y="771.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="10.0" y="755.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.29%)</title><rect x="10.0" y="739.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.29%)</title><rect x="10.0" y="723.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.29%)</title><rect x="10.0" y="707.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (1 samples, 0.29%)</title><rect x="10.0" y="691.0" width="3.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (1 samples, 0.29%)</title><rect x="10.0" y="675.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.29%)</title><rect x="10.0" y="659.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.29%)</title><rect x="10.0" y="643.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="10.0" y="627.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="10.0" y="611.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="10.0" y="595.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.29%)</title><rect x="10.0" y="579.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.29%)</title><rect x="10.0" y="563.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.29%)</title><rect x="13.5" y="915.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.5" y="926.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 2.05%)</title><rect x="16.9" y="931.0" width="24.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="19.9" y="942.0">[..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (6 samples, 1.76%)</title><rect x="16.9" y="915.0" width="20.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="19.9" y="926.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (6 samples, 1.76%)</title><rect x="16.9" y="899.0" width="20.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.9" y="910.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 1.76%)</title><rect x="16.9" y="883.0" width="20.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 1.76%)</title><rect x="16.9" y="867.0" width="20.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 1.76%)</title><rect x="16.9" y="851.0" width="20.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (6 samples, 1.76%)</title><rect x="16.9" y="835.0" width="20.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (6 samples, 1.76%)</title><rect x="16.9" y="819.0" width="20.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.88%)</title><rect x="16.9" y="803.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.88%)</title><rect x="16.9" y="787.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.88%)</title><rect x="16.9" y="771.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.88%)</title><rect x="16.9" y="755.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.88%)</title><rect x="16.9" y="739.0" width="10.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.88%)</title><rect x="16.9" y="723.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.9" y="734.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.88%)</title><rect x="16.9" y="707.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (3 samples, 0.88%)</title><rect x="16.9" y="691.0" width="10.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (3 samples, 0.88%)</title><rect x="16.9" y="675.0" width="10.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="19.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.88%)</title><rect x="16.9" y="659.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.88%)</title><rect x="16.9" y="643.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.9" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.59%)</title><rect x="16.9" y="627.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.59%)</title><rect x="16.9" y="611.0" width="6.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.59%)</title><rect x="16.9" y="595.0" width="6.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.59%)</title><rect x="16.9" y="579.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.9" y="590.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.59%)</title><rect x="16.9" y="563.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.9" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="20.4" y="547.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.4" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="20.4" y="531.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="23.4" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="20.4" y="515.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="23.4" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="23.8" y="627.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="26.8" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.29%)</title><rect x="23.8" y="611.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="26.8" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="23.8" y="595.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="26.8" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.29%)</title><rect x="23.8" y="579.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.8" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="23.8" y="563.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="26.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="23.8" y="547.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="26.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="23.8" y="531.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="26.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (3 samples, 0.88%)</title><rect x="27.3" y="803.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="30.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.88%)</title><rect x="27.3" y="787.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="30.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.88%)</title><rect x="27.3" y="771.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.88%)</title><rect x="27.3" y="755.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="30.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.88%)</title><rect x="27.3" y="739.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="30.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.88%)</title><rect x="27.3" y="723.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="30.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (3 samples, 0.88%)</title><rect x="27.3" y="707.0" width="10.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.3" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.88%)</title><rect x="27.3" y="691.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.3" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (3 samples, 0.88%)</title><rect x="27.3" y="675.0" width="10.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="30.3" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (3 samples, 0.88%)</title><rect x="27.3" y="659.0" width="10.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="30.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.88%)</title><rect x="27.3" y="643.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="30.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.88%)</title><rect x="27.3" y="627.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.3" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="27.3" y="611.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.3" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="27.3" y="595.0" width="3.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="30.3" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="27.3" y="579.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="30.3" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.29%)</title><rect x="27.3" y="563.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.3" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.59%)</title><rect x="30.8" y="611.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="33.8" y="622.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.59%)</title><rect x="30.8" y="595.0" width="6.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="33.8" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.59%)</title><rect x="30.8" y="579.0" width="6.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="33.8" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.29%)</title><rect x="30.8" y="563.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="33.8" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.29%)</title><rect x="34.2" y="563.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.2" y="574.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.29%)</title><rect x="37.7" y="915.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="40.7" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (330 samples, 96.77%)</title><rect x="41.1" y="931.0" width="1142.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.1" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (22 samples, 6.45%)</title><rect x="44.6" y="915.0" width="76.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.6" y="926.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (21 samples, 6.16%)</title><rect x="48.1" y="899.0" width="72.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.1" y="910.0">one/nio/..</text>
</g>
<g>
<title>[unknown] (18 samples, 5.28%)</title><rect x="51.5" y="883.0" width="62.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="54.5" y="894.0">[unkno..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.29%)</title><rect x="51.5" y="867.0" width="3.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="54.5" y="878.0"></text>
</g>
<g>
<title>epoll_wait (17 samples, 4.99%)</title><rect x="55.0" y="867.0" width="58.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="58.0" y="878.0">epoll_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 4.11%)</title><rect x="61.9" y="851.0" width="48.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="64.9" y="862.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 4.11%)</title><rect x="61.9" y="835.0" width="48.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="64.9" y="846.0">do_s..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (14 samples, 4.11%)</title><rect x="61.9" y="819.0" width="48.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="64.9" y="830.0">__x6..</text>
</g>
<g>
<title>do_epoll_wait (14 samples, 4.11%)</title><rect x="61.9" y="803.0" width="48.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="64.9" y="814.0">do_e..</text>
</g>
<g>
<title>ep_poll (14 samples, 4.11%)</title><rect x="61.9" y="787.0" width="48.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="64.9" y="798.0">ep_p..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.59%)</title><rect x="61.9" y="771.0" width="6.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="64.9" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.59%)</title><rect x="61.9" y="755.0" width="6.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="64.9" y="766.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.29%)</title><rect x="65.4" y="739.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="68.4" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (12 samples, 3.52%)</title><rect x="68.8" y="771.0" width="41.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="71.8" y="782.0">sch..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (12 samples, 3.52%)</title><rect x="68.8" y="755.0" width="41.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="71.8" y="766.0">sch..</text>
</g>
<g>
<title>schedule (11 samples, 3.23%)</title><rect x="72.3" y="739.0" width="38.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="75.3" y="750.0">sch..</text>
</g>
<g>
<title>__sched_text_start (11 samples, 3.23%)</title><rect x="72.3" y="723.0" width="38.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="75.3" y="734.0">__s..</text>
</g>
<g>
<title>finish_task_switch (11 samples, 3.23%)</title><rect x="72.3" y="707.0" width="38.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="75.3" y="718.0">fin..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="110.4" y="851.0" width="3.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="113.4" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="110.4" y="835.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="113.4" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="110.4" y="819.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="113.4" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.29%)</title><rect x="113.8" y="883.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="116.8" y="894.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="117.3" y="883.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="120.3" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="117.3" y="867.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="120.3" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="117.3" y="851.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="120.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (307 samples, 90.03%)</title><rect x="120.7" y="915.0" width="1062.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.7" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (307 samples, 90.03%)</title><rect x="120.7" y="899.0" width="1062.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.7" y="910.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (293 samples, 85.92%)</title><rect x="127.7" y="883.0" width="1013.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.7" y="894.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (288 samples, 84.46%)</title><rect x="134.6" y="867.0" width="996.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.6" y="878.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (288 samples, 84.46%)</title><rect x="134.6" y="851.0" width="996.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="137.6" y="862.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler4_putValueByKey.handleRequest (288 samples, 84.46%)</title><rect x="134.6" y="835.0" width="996.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="137.6" y="846.0">RequestHandler4_putValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (38 samples, 11.14%)</title><rect x="134.6" y="819.0" width="131.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="137.6" y="830.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (38 samples, 11.14%)</title><rect x="134.6" y="803.0" width="131.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.6" y="814.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.59%)</title><rect x="134.6" y="787.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="137.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.59%)</title><rect x="134.6" y="771.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.59%)</title><rect x="134.6" y="755.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="137.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.59%)</title><rect x="134.6" y="739.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (36 samples, 10.56%)</title><rect x="141.5" y="787.0" width="124.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.5" y="798.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (36 samples, 10.56%)</title><rect x="141.5" y="771.0" width="124.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.5" y="782.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (36 samples, 10.56%)</title><rect x="141.5" y="755.0" width="124.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.5" y="766.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (36 samples, 10.56%)</title><rect x="141.5" y="739.0" width="124.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.5" y="750.0">one/nio/net/Nat..</text>
</g>
<g>
<title>__send (36 samples, 10.56%)</title><rect x="141.5" y="723.0" width="124.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="144.5" y="734.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (36 samples, 10.56%)</title><rect x="141.5" y="707.0" width="124.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="144.5" y="718.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (36 samples, 10.56%)</title><rect x="141.5" y="691.0" width="124.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="144.5" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (34 samples, 9.97%)</title><rect x="141.5" y="675.0" width="117.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="144.5" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (34 samples, 9.97%)</title><rect x="141.5" y="659.0" width="117.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="144.5" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (33 samples, 9.68%)</title><rect x="145.0" y="643.0" width="114.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="148.0" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (32 samples, 9.38%)</title><rect x="145.0" y="627.0" width="110.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="148.0" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (32 samples, 9.38%)</title><rect x="145.0" y="611.0" width="110.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="148.0" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (32 samples, 9.38%)</title><rect x="145.0" y="595.0" width="110.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="148.0" y="606.0">tcp_sendmsg_l..</text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.59%)</title><rect x="145.0" y="579.0" width="6.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="148.0" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.59%)</title><rect x="145.0" y="563.0" width="6.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="148.0" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (1 samples, 0.29%)</title><rect x="145.0" y="547.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="148.0" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.29%)</title><rect x="145.0" y="531.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="148.0" y="542.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.29%)</title><rect x="148.4" y="547.0" width="3.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="151.4" y="558.0"></text>
</g>
<g>
<title>tcp_push (29 samples, 8.50%)</title><rect x="151.9" y="579.0" width="100.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="154.9" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (29 samples, 8.50%)</title><rect x="151.9" y="563.0" width="100.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.9" y="574.0">__tcp_push_p..</text>
</g>
<g>
<title>tcp_write_xmit (29 samples, 8.50%)</title><rect x="151.9" y="547.0" width="100.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="154.9" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (27 samples, 7.92%)</title><rect x="155.3" y="531.0" width="93.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="158.3" y="542.0">__tcp_trans..</text>
</g>
<g>
<title>ip_queue_xmit (25 samples, 7.33%)</title><rect x="162.3" y="515.0" width="86.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="165.3" y="526.0">ip_queue_x..</text>
</g>
<g>
<title>__ip_queue_xmit (25 samples, 7.33%)</title><rect x="162.3" y="499.0" width="86.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="165.3" y="510.0">__ip_queue..</text>
</g>
<g>
<title>ip_local_out (25 samples, 7.33%)</title><rect x="162.3" y="483.0" width="86.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="165.3" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (25 samples, 7.33%)</title><rect x="162.3" y="467.0" width="86.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="165.3" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (25 samples, 7.33%)</title><rect x="162.3" y="451.0" width="86.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="165.3" y="462.0">ip_finish_..</text>
</g>
<g>
<title>__ip_finish_output (25 samples, 7.33%)</title><rect x="162.3" y="435.0" width="86.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="165.3" y="446.0">__ip_finis..</text>
</g>
<g>
<title>ip_finish_output2 (24 samples, 7.04%)</title><rect x="165.7" y="419.0" width="83.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="168.7" y="430.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (21 samples, 6.16%)</title><rect x="172.6" y="403.0" width="72.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="175.6" y="414.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.20 (21 samples, 6.16%)</title><rect x="172.6" y="387.0" width="72.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="175.6" y="398.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (21 samples, 6.16%)</title><rect x="172.6" y="371.0" width="72.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="175.6" y="382.0">do_softi..</text>
</g>
<g>
<title>__softirqentry_text_start (21 samples, 6.16%)</title><rect x="172.6" y="355.0" width="72.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="175.6" y="366.0">__softir..</text>
</g>
<g>
<title>net_rx_action (21 samples, 6.16%)</title><rect x="172.6" y="339.0" width="72.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="175.6" y="350.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (21 samples, 6.16%)</title><rect x="172.6" y="323.0" width="72.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="175.6" y="334.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (20 samples, 5.87%)</title><rect x="176.1" y="307.0" width="69.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="179.1" y="318.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (20 samples, 5.87%)</title><rect x="176.1" y="291.0" width="69.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="179.1" y="302.0">__netif..</text>
</g>
<g>
<title>ip_rcv (19 samples, 5.57%)</title><rect x="176.1" y="275.0" width="65.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="179.1" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (18 samples, 5.28%)</title><rect x="176.1" y="259.0" width="62.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="179.1" y="270.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (18 samples, 5.28%)</title><rect x="176.1" y="243.0" width="62.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="179.1" y="254.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (18 samples, 5.28%)</title><rect x="176.1" y="227.0" width="62.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="179.1" y="238.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (18 samples, 5.28%)</title><rect x="176.1" y="211.0" width="62.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="179.1" y="222.0">ip_pro..</text>
</g>
<g>
<title>tcp_v4_rcv (18 samples, 5.28%)</title><rect x="176.1" y="195.0" width="62.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="179.1" y="206.0">tcp_v4..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.29%)</title><rect x="176.1" y="179.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="179.1" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.29%)</title><rect x="179.6" y="179.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="182.6" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (16 samples, 4.69%)</title><rect x="183.0" y="179.0" width="55.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="186.0" y="190.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (16 samples, 4.69%)</title><rect x="183.0" y="163.0" width="55.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="186.0" y="174.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.29%)</title><rect x="183.0" y="147.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="186.0" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.29%)</title><rect x="183.0" y="131.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="186.0" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.29%)</title><rect x="183.0" y="115.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="186.0" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.29%)</title><rect x="183.0" y="99.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="186.0" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="183.0" y="83.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="186.0" y="94.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.29%)</title><rect x="186.5" y="147.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="189.5" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.29%)</title><rect x="186.5" y="131.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="189.5" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.29%)</title><rect x="186.5" y="115.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="189.5" y="126.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.29%)</title><rect x="186.5" y="99.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="189.5" y="110.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.29%)</title><rect x="186.5" y="83.0" width="3.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="189.5" y="94.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.29%)</title><rect x="186.5" y="67.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="189.5" y="78.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.29%)</title><rect x="186.5" y="51.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="189.5" y="62.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.29%)</title><rect x="186.5" y="35.0" width="3.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="189.5" y="46.0"></text>
</g>
<g>
<title>tcp_data_ready (14 samples, 4.11%)</title><rect x="189.9" y="147.0" width="48.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="192.9" y="158.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (14 samples, 4.11%)</title><rect x="189.9" y="131.0" width="48.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="192.9" y="142.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (14 samples, 4.11%)</title><rect x="189.9" y="115.0" width="48.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="192.9" y="126.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (14 samples, 4.11%)</title><rect x="189.9" y="99.0" width="48.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="192.9" y="110.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (14 samples, 4.11%)</title><rect x="189.9" y="83.0" width="48.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="192.9" y="94.0">__lo..</text>
</g>
<g>
<title>ip_rcv_finish_core.isra.18 (1 samples, 0.29%)</title><rect x="238.4" y="259.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="241.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.29%)</title><rect x="241.8" y="275.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="244.8" y="286.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.29%)</title><rect x="245.3" y="403.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="248.3" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.29%)</title><rect x="245.3" y="387.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="248.3" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.29%)</title><rect x="245.3" y="371.0" width="3.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="248.3" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.29%)</title><rect x="245.3" y="355.0" width="3.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="248.3" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.29%)</title><rect x="245.3" y="339.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="248.3" y="350.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.29%)</title><rect x="248.8" y="531.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="251.8" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.29%)</title><rect x="252.2" y="579.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="255.2" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.29%)</title><rect x="252.2" y="563.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="255.2" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.29%)</title><rect x="255.7" y="627.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="258.7" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.29%)</title><rect x="255.7" y="611.0" width="3.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="258.7" y="622.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.29%)</title><rect x="255.7" y="595.0" width="3.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="258.7" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.29%)</title><rect x="255.7" y="579.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="258.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.59%)</title><rect x="259.1" y="675.0" width="7.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="262.1" y="686.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.59%)</title><rect x="259.1" y="659.0" width="7.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="262.1" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.59%)</title><rect x="259.1" y="643.0" width="7.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="262.1" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.59%)</title><rect x="259.1" y="627.0" width="7.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="262.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.29%)</title><rect x="266.1" y="819.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.29%)</title><rect x="266.1" y="803.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.29%)</title><rect x="266.1" y="787.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.29%)</title><rect x="266.1" y="771.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey (249 samples, 73.02%)</title><rect x="269.5" y="819.0" width="861.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.5" y="830.0">ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.upsert (247 samples, 72.43%)</title><rect x="273.0" y="803.0" width="854.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.0" y="814.0">ru/mail/polis/dao/basta123/MyDAORocksDB.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (247 samples, 72.43%)</title><rect x="273.0" y="787.0" width="854.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.0" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (247 samples, 72.43%)</title><rect x="273.0" y="771.0" width="854.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.0" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (152 samples, 44.57%)</title><rect x="273.0" y="755.0" width="526.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="276.0" y="766.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__malloc (1 samples, 0.29%)</title><rect x="276.5" y="739.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="279.5" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.29%)</title><rect x="279.9" y="739.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="282.9" y="750.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.29%)</title><rect x="283.4" y="739.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="286.4" y="750.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (148 samples, 43.40%)</title><rect x="286.8" y="739.0" width="512.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="289.8" y="750.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (147 samples, 43.11%)</title><rect x="290.3" y="723.0" width="508.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.3" y="734.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (147 samples, 43.11%)</title><rect x="290.3" y="707.0" width="508.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="293.3" y="718.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFami..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (145 samples, 42.52%)</title><rect x="290.3" y="691.0" width="501.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="293.3" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyH..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (142 samples, 41.64%)</title><rect x="290.3" y="675.0" width="491.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="293.3" y="686.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (140 samples, 41.06%)</title><rect x="290.3" y="659.0" width="484.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="293.3" y="670.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::W..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 1.17%)</title><rect x="293.8" y="643.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="296.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (4 samples, 1.17%)</title><rect x="293.8" y="627.0" width="13.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="296.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 1.17%)</title><rect x="293.8" y="611.0" width="13.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="296.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.88%)</title><rect x="293.8" y="595.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="296.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.29%)</title><rect x="293.8" y="579.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="296.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.29%)</title><rect x="297.2" y="579.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="300.2" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="297.2" y="563.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="300.2" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="297.2" y="547.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="300.2" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="297.2" y="531.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="300.2" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="300.7" y="579.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="303.7" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="300.7" y="563.0" width="3.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="303.7" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="300.7" y="547.0" width="3.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="303.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.29%)</title><rect x="304.1" y="595.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="307.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.29%)</title><rect x="304.1" y="579.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="307.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.29%)</title><rect x="307.6" y="643.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="310.6" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="307.6" y="627.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="310.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="307.6" y="611.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="310.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="307.6" y="595.0" width="3.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="310.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.29%)</title><rect x="311.1" y="643.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="314.1" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="311.1" y="627.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="314.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="311.1" y="611.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="314.1" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="311.1" y="595.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="314.1" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="311.1" y="579.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="314.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::ComputeContentFlags() const (1 samples, 0.29%)</title><rect x="314.5" y="643.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="317.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.29%)</title><rect x="318.0" y="643.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="321.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (58 samples, 17.01%)</title><rect x="321.4" y="643.0" width="200.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="324.4" y="654.0">rocksdb::WriteBatchInterna..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (58 samples, 17.01%)</title><rect x="321.4" y="627.0" width="200.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.4" y="638.0">rocksdb::WriteBatch::Itera..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (58 samples, 17.01%)</title><rect x="321.4" y="611.0" width="200.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.4" y="622.0">rocksdb::WriteBatchInterna..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (58 samples, 17.01%)</title><rect x="321.4" y="595.0" width="200.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="324.4" y="606.0">rocksdb::MemTableInserter:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (57 samples, 16.72%)</title><rect x="324.9" y="579.0" width="197.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="327.9" y="590.0">rocksdb::MemTableInserter:..</text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.29%)</title><rect x="324.9" y="563.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="327.9" y="574.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.29%)</title><rect x="324.9" y="547.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="327.9" y="558.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.29%)</title><rect x="324.9" y="531.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="327.9" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.29%)</title><rect x="324.9" y="515.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="327.9" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="324.9" y="499.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="327.9" y="510.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.29%)</title><rect x="324.9" y="483.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="327.9" y="494.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.29%)</title><rect x="324.9" y="467.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="327.9" y="478.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (1 samples, 0.29%)</title><rect x="324.9" y="451.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="327.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (56 samples, 16.42%)</title><rect x="328.4" y="563.0" width="193.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="331.4" y="574.0">rocksdb::MemTable::Add(un..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (56 samples, 16.42%)</title><rect x="328.4" y="547.0" width="193.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="331.4" y="558.0">bool rocksdb::InlineSkipL..</text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (53 samples, 15.54%)</title><rect x="331.8" y="531.0" width="183.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="334.8" y="542.0">/tmp/librocksdbjni154212..</text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (43 samples, 12.61%)</title><rect x="338.7" y="515.0" width="148.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="341.7" y="526.0">/tmp/librocksdbjni1..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.59%)</title><rect x="338.7" y="499.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="341.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (41 samples, 12.02%)</title><rect x="345.7" y="499.0" width="141.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="348.7" y="510.0">rocksdb::MemTable:..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.29%)</title><rect x="345.7" y="483.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="348.7" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.29%)</title><rect x="349.1" y="483.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="352.1" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.59%)</title><rect x="352.6" y="483.0" width="6.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="355.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (36 samples, 10.56%)</title><rect x="359.5" y="483.0" width="124.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="362.5" y="494.0">rocksdb::BaseCo..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (10 samples, 2.93%)</title><rect x="359.5" y="467.0" width="34.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.5" y="478.0">JN..</text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 2.64%)</title><rect x="359.5" y="451.0" width="31.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="362.5" y="462.0">jn..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.29%)</title><rect x="359.5" y="435.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.5" y="446.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.29%)</title><rect x="363.0" y="435.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="366.0" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="366.4" y="435.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="369.4" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 1.76%)</title><rect x="369.9" y="435.0" width="20.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="372.9" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="369.9" y="419.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="372.9" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.88%)</title><rect x="373.3" y="419.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="376.3" y="430.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.29%)</title><rect x="376.8" y="403.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="379.8" y="414.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.29%)</title><rect x="380.3" y="403.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="383.3" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="383.7" y="419.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="386.7" y="430.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.29%)</title><rect x="387.2" y="419.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="390.2" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="390.6" y="451.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="393.6" y="462.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (15 samples, 4.40%)</title><rect x="394.1" y="467.0" width="51.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="397.1" y="478.0">JNIEn..</text>
</g>
<g>
<title>jni_CallVoidMethodV (15 samples, 4.40%)</title><rect x="394.1" y="451.0" width="51.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="397.1" y="462.0">jni_C..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.29%)</title><rect x="397.6" y="435.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.6" y="446.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.29%)</title><rect x="401.0" y="435.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="404.0" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (12 samples, 3.52%)</title><rect x="404.5" y="435.0" width="41.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="407.5" y="446.0">jni..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="411.4" y="419.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="414.4" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 1.76%)</title><rect x="414.9" y="419.0" width="20.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="417.9" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.29%)</title><rect x="432.2" y="403.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="435.2" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="435.6" y="419.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="438.6" y="430.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.59%)</title><rect x="439.1" y="419.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.1" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="446.0" y="467.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="449.0" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.29%)</title><rect x="449.5" y="467.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="452.5" y="478.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.59%)</title><rect x="452.9" y="467.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="455.9" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.59%)</title><rect x="452.9" y="451.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="455.9" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="456.4" y="435.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="459.4" y="446.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="456.4" y="419.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="459.4" y="430.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="456.4" y="403.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="459.4" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="459.9" y="467.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="462.9" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.88%)</title><rect x="463.3" y="467.0" width="10.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="466.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.88%)</title><rect x="473.7" y="467.0" width="10.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="476.7" y="478.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.59%)</title><rect x="477.2" y="451.0" width="6.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="480.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.29%)</title><rect x="484.1" y="483.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="487.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 2.35%)</title><rect x="487.5" y="515.0" width="27.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="490.5" y="526.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 2.35%)</title><rect x="487.5" y="499.0" width="27.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="490.5" y="510.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="487.5" y="483.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="490.5" y="494.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="487.5" y="467.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="490.5" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="487.5" y="451.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="490.5" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.29%)</title><rect x="487.5" y="435.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="490.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.29%)</title><rect x="487.5" y="419.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="490.5" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.76%)</title><rect x="491.0" y="483.0" width="20.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.0" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 1.76%)</title><rect x="491.0" y="467.0" width="20.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="494.0" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.29%)</title><rect x="501.4" y="451.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.4" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.59%)</title><rect x="504.8" y="451.0" width="7.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="507.8" y="462.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="504.8" y="435.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="507.8" y="446.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.29%)</title><rect x="508.3" y="435.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="511.3" y="446.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.29%)</title><rect x="511.8" y="483.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="514.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.59%)</title><rect x="515.2" y="531.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="518.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.59%)</title><rect x="515.2" y="515.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="518.2" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="515.2" y="499.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.2" y="510.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="515.2" y="483.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="518.2" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="518.7" y="499.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.7" y="510.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.29%)</title><rect x="518.7" y="483.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="521.7" y="494.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="518.7" y="467.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="521.7" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.29%)</title><rect x="518.7" y="451.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="521.7" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.29%)</title><rect x="518.7" y="435.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="521.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (52 samples, 15.25%)</title><rect x="522.1" y="643.0" width="180.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="525.1" y="654.0">rocksdb::WriteBatchInte..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.29%)</title><rect x="522.1" y="627.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="525.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (50 samples, 14.66%)</title><rect x="525.6" y="627.0" width="173.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.6" y="638.0">rocksdb::WriteBatch::I..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (50 samples, 14.66%)</title><rect x="525.6" y="611.0" width="173.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="528.6" y="622.0">rocksdb::WriteBatchInt..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (50 samples, 14.66%)</title><rect x="525.6" y="595.0" width="173.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="528.6" y="606.0">rocksdb::MemTableInser..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (50 samples, 14.66%)</title><rect x="525.6" y="579.0" width="173.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.6" y="590.0">rocksdb::MemTableInser..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (50 samples, 14.66%)</title><rect x="525.6" y="563.0" width="173.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="528.6" y="574.0">rocksdb::MemTable::Add..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (50 samples, 14.66%)</title><rect x="525.6" y="547.0" width="173.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="528.6" y="558.0">rocksdb::InlineSkipLis..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (50 samples, 14.66%)</title><rect x="525.6" y="531.0" width="173.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="528.6" y="542.0">bool rocksdb::InlineSk..</text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (48 samples, 14.08%)</title><rect x="525.6" y="515.0" width="166.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="528.6" y="526.0">/tmp/librocksdbjni154..</text>
</g>
<g>
<title>/tmp/librocksdbjni15421228394666119490.so (44 samples, 12.90%)</title><rect x="539.4" y="499.0" width="152.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="542.4" y="510.0">/tmp/librocksdbjni1..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (44 samples, 12.90%)</title><rect x="539.4" y="483.0" width="152.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="542.4" y="494.0">rocksdb::MemTable::..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.29%)</title><rect x="539.4" y="467.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="542.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (42 samples, 12.32%)</title><rect x="542.9" y="467.0" width="145.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="545.9" y="478.0">rocksdb::BaseCompa..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.76%)</title><rect x="542.9" y="451.0" width="20.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="545.9" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 1.76%)</title><rect x="542.9" y="435.0" width="20.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="545.9" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.29%)</title><rect x="542.9" y="419.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="545.9" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 1.47%)</title><rect x="546.4" y="419.0" width="17.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="549.4" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="546.4" y="403.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.4" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.88%)</title><rect x="549.8" y="403.0" width="10.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="552.8" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.29%)</title><rect x="553.3" y="387.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.3" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.29%)</title><rect x="553.3" y="371.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="556.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.29%)</title><rect x="556.7" y="387.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="559.7" y="398.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="556.7" y="371.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="559.7" y="382.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="556.7" y="355.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="559.7" y="366.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="556.7" y="339.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="559.7" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="560.2" y="403.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.2" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (20 samples, 5.87%)</title><rect x="563.7" y="451.0" width="69.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.7" y="462.0">JNIEnv_..</text>
</g>
<g>
<title>jni_CallVoidMethodV (19 samples, 5.57%)</title><rect x="567.1" y="435.0" width="65.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="570.1" y="446.0">jni_Cal..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.29%)</title><rect x="567.1" y="419.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="570.1" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="570.6" y="419.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.6" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.59%)</title><rect x="574.0" y="419.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="577.0" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (14 samples, 4.11%)</title><rect x="581.0" y="419.0" width="48.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="584.0" y="430.0">jni_..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.29%)</title><rect x="584.4" y="403.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="587.4" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.29%)</title><rect x="587.9" y="403.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="590.9" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 2.64%)</title><rect x="591.3" y="403.0" width="31.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="594.3" y="414.0">Ja..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.29%)</title><rect x="598.3" y="387.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="601.3" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.59%)</title><rect x="601.7" y="387.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.59%)</title><rect x="608.7" y="387.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="611.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.29%)</title><rect x="615.6" y="387.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.6" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.29%)</title><rect x="619.0" y="387.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="622.0" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.59%)</title><rect x="622.5" y="403.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="625.5" y="414.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="629.4" y="419.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="632.4" y="430.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="629.4" y="403.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="632.4" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="629.4" y="387.0" width="3.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="632.4" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 2.35%)</title><rect x="632.9" y="451.0" width="27.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="635.9" y="462.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 2.35%)</title><rect x="632.9" y="435.0" width="27.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="635.9" y="446.0">e..</text>
</g>
<g>
<title>do_syscall_64 (8 samples, 2.35%)</title><rect x="632.9" y="419.0" width="27.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="635.9" y="430.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 2.35%)</title><rect x="632.9" y="403.0" width="27.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="635.9" y="414.0">_..</text>
</g>
<g>
<title>do_futex (8 samples, 2.35%)</title><rect x="632.9" y="387.0" width="27.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="635.9" y="398.0">d..</text>
</g>
<g>
<title>futex_wake (8 samples, 2.35%)</title><rect x="632.9" y="371.0" width="27.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.9" y="382.0">f..</text>
</g>
<g>
<title>wake_up_q (8 samples, 2.35%)</title><rect x="632.9" y="355.0" width="27.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="635.9" y="366.0">w..</text>
</g>
<g>
<title>try_to_wake_up (8 samples, 2.35%)</title><rect x="632.9" y="339.0" width="27.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="635.9" y="350.0">t..</text>
</g>
<g>
<title>__lock_text_start (8 samples, 2.35%)</title><rect x="632.9" y="323.0" width="27.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.9" y="334.0">_..</text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.29%)</title><rect x="660.6" y="451.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="663.6" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.29%)</title><rect x="664.0" y="451.0" width="3.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="667.0" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.29%)</title><rect x="667.5" y="451.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="670.5" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.29%)</title><rect x="667.5" y="435.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="670.5" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="667.5" y="419.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="670.5" y="430.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="667.5" y="403.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="670.5" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="667.5" y="387.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="670.5" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.59%)</title><rect x="670.9" y="451.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="673.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.88%)</title><rect x="677.9" y="451.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="680.9" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.59%)</title><rect x="681.3" y="435.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="684.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.29%)</title><rect x="688.2" y="467.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.59%)</title><rect x="691.7" y="515.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="694.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.59%)</title><rect x="691.7" y="499.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.7" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.29%)</title><rect x="691.7" y="483.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.7" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.29%)</title><rect x="691.7" y="467.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="694.7" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.29%)</title><rect x="691.7" y="451.0" width="3.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="694.7" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.29%)</title><rect x="695.2" y="483.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="698.2" y="494.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="695.2" y="467.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="698.2" y="478.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="695.2" y="451.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="698.2" y="462.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.29%)</title><rect x="695.2" y="435.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="698.2" y="446.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.29%)</title><rect x="695.2" y="419.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="698.2" y="430.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.29%)</title><rect x="695.2" y="403.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="698.2" y="414.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.29%)</title><rect x="695.2" y="387.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="698.2" y="398.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.29%)</title><rect x="695.2" y="371.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="698.2" y="382.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="695.2" y="355.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="698.2" y="366.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;*) (1 samples, 0.29%)</title><rect x="698.6" y="627.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="701.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 4.11%)</title><rect x="702.1" y="643.0" width="48.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.1" y="654.0">rock..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.29%)</title><rect x="736.7" y="627.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="739.7" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="736.7" y="611.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="739.7" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="736.7" y="595.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="739.7" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.29%)</title><rect x="736.7" y="579.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="739.7" y="590.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.29%)</title><rect x="740.1" y="627.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="743.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.59%)</title><rect x="743.6" y="627.0" width="6.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="746.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.59%)</title><rect x="743.6" y="611.0" width="6.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="746.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.59%)</title><rect x="743.6" y="595.0" width="6.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="746.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 1.47%)</title><rect x="750.5" y="643.0" width="17.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (5 samples, 1.47%)</title><rect x="750.5" y="627.0" width="17.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="753.5" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="764.4" y="611.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="767.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.29%)</title><rect x="767.8" y="643.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.29%)</title><rect x="767.8" y="627.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.8" y="638.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.29%)</title><rect x="771.3" y="643.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="774.3" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="771.3" y="627.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="774.3" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="771.3" y="611.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="774.3" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.29%)</title><rect x="771.3" y="595.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="774.3" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.29%)</title><rect x="771.3" y="579.0" width="3.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="774.3" y="590.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.29%)</title><rect x="771.3" y="563.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="774.3" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.29%)</title><rect x="771.3" y="547.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="774.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.29%)</title><rect x="774.8" y="659.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="777.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.29%)</title><rect x="778.2" y="659.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="781.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.29%)</title><rect x="781.7" y="675.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="785.1" y="675.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.29%)</title><rect x="785.1" y="659.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="788.1" y="670.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.29%)</title><rect x="788.6" y="675.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="791.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.29%)</title><rect x="792.1" y="691.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.29%)</title><rect x="795.5" y="691.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="798.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (24 samples, 7.04%)</title><rect x="799.0" y="755.0" width="83.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="802.0" y="766.0">[unknown]</text>
</g>
<g>
<title>__libc_write (20 samples, 5.87%)</title><rect x="799.0" y="739.0" width="69.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="802.0" y="750.0">__libc_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (18 samples, 5.28%)</title><rect x="802.4" y="723.0" width="62.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="805.4" y="734.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (18 samples, 5.28%)</title><rect x="802.4" y="707.0" width="62.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="805.4" y="718.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_write (18 samples, 5.28%)</title><rect x="802.4" y="691.0" width="62.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="805.4" y="702.0">__x64_..</text>
</g>
<g>
<title>ksys_write (18 samples, 5.28%)</title><rect x="802.4" y="675.0" width="62.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="805.4" y="686.0">ksys_w..</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.88%)</title><rect x="802.4" y="659.0" width="10.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="805.4" y="670.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.59%)</title><rect x="802.4" y="643.0" width="7.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="805.4" y="654.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.59%)</title><rect x="802.4" y="627.0" width="7.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="805.4" y="638.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.29%)</title><rect x="809.4" y="643.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="812.4" y="654.0"></text>
</g>
<g>
<title>vfs_write (15 samples, 4.40%)</title><rect x="812.8" y="659.0" width="51.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="815.8" y="670.0">vfs_w..</text>
</g>
<g>
<title>__vfs_write (14 samples, 4.11%)</title><rect x="812.8" y="643.0" width="48.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="815.8" y="654.0">__vf..</text>
</g>
<g>
<title>new_sync_write (14 samples, 4.11%)</title><rect x="812.8" y="627.0" width="48.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="815.8" y="638.0">new_..</text>
</g>
<g>
<title>__generic_file_write_iter (1 samples, 0.29%)</title><rect x="812.8" y="611.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="815.8" y="622.0"></text>
</g>
<g>
<title>ext4_file_write_iter (13 samples, 3.81%)</title><rect x="816.3" y="611.0" width="45.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="819.3" y="622.0">ext4..</text>
</g>
<g>
<title>__generic_file_write_iter (12 samples, 3.52%)</title><rect x="819.7" y="595.0" width="41.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="822.7" y="606.0">__g..</text>
</g>
<g>
<title>file_update_time (1 samples, 0.29%)</title><rect x="819.7" y="579.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="822.7" y="590.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.29%)</title><rect x="819.7" y="563.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="822.7" y="574.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.29%)</title><rect x="819.7" y="547.0" width="3.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="822.7" y="558.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.29%)</title><rect x="819.7" y="531.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="822.7" y="542.0"></text>
</g>
<g>
<title>generic_perform_write (11 samples, 3.23%)</title><rect x="823.2" y="579.0" width="38.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="826.2" y="590.0">gen..</text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 1.47%)</title><rect x="823.2" y="563.0" width="17.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.2" y="574.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.59%)</title><rect x="823.2" y="547.0" width="6.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.2" y="558.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.59%)</title><rect x="823.2" y="531.0" width="6.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="826.2" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.29%)</title><rect x="823.2" y="515.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="826.2" y="526.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.29%)</title><rect x="826.7" y="515.0" width="3.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="829.7" y="526.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 0.59%)</title><rect x="830.1" y="547.0" width="6.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="833.1" y="558.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.29%)</title><rect x="830.1" y="531.0" width="3.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="833.1" y="542.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.29%)</title><rect x="830.1" y="515.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="833.1" y="526.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.29%)</title><rect x="833.6" y="531.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="836.6" y="542.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.29%)</title><rect x="837.0" y="547.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="840.0" y="558.0"></text>
</g>
<g>
<title>ext4_da_write_end (6 samples, 1.76%)</title><rect x="840.5" y="563.0" width="20.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="843.5" y="574.0"></text>
</g>
<g>
<title>generic_write_end (5 samples, 1.47%)</title><rect x="844.0" y="547.0" width="17.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="847.0" y="558.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (1 samples, 0.29%)</title><rect x="844.0" y="531.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="847.0" y="542.0"></text>
</g>
<g>
<title>__mark_inode_dirty (4 samples, 1.17%)</title><rect x="847.4" y="531.0" width="13.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="850.4" y="542.0"></text>
</g>
<g>
<title>ext4_dirty_inode (3 samples, 0.88%)</title><rect x="847.4" y="515.0" width="10.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="850.4" y="526.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (3 samples, 0.88%)</title><rect x="847.4" y="499.0" width="10.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="850.4" y="510.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.59%)</title><rect x="847.4" y="483.0" width="6.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="850.4" y="494.0"></text>
</g>
<g>
<title>ext4_do_update_inode (2 samples, 0.59%)</title><rect x="847.4" y="467.0" width="6.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="850.4" y="478.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (2 samples, 0.59%)</title><rect x="847.4" y="451.0" width="6.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="850.4" y="462.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (2 samples, 0.59%)</title><rect x="847.4" y="435.0" width="6.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="850.4" y="446.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.29%)</title><rect x="847.4" y="419.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="850.4" y="430.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.29%)</title><rect x="850.9" y="419.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="853.9" y="430.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.29%)</title><rect x="854.3" y="483.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="857.3" y="494.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.29%)</title><rect x="854.3" y="467.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="857.3" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.29%)</title><rect x="857.8" y="515.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="860.8" y="526.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.29%)</title><rect x="861.3" y="643.0" width="3.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="864.3" y="654.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.29%)</title><rect x="861.3" y="627.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="864.3" y="638.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.29%)</title><rect x="861.3" y="611.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="864.3" y="622.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.29%)</title><rect x="861.3" y="595.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="864.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="864.7" y="723.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="867.7" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="864.7" y="707.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="867.7" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="864.7" y="691.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="867.7" y="702.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (4 samples, 1.17%)</title><rect x="868.2" y="739.0" width="13.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="871.2" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.88%)</title><rect x="868.2" y="723.0" width="10.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="871.2" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.88%)</title><rect x="868.2" y="707.0" width="10.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="871.2" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.88%)</title><rect x="868.2" y="691.0" width="10.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="871.2" y="702.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.88%)</title><rect x="868.2" y="675.0" width="10.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="871.2" y="686.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.88%)</title><rect x="868.2" y="659.0" width="10.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="871.2" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.59%)</title><rect x="868.2" y="643.0" width="6.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="871.2" y="654.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.59%)</title><rect x="868.2" y="627.0" width="6.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="871.2" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.29%)</title><rect x="871.6" y="611.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="874.6" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.29%)</title><rect x="871.6" y="595.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="874.6" y="606.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.29%)</title><rect x="875.1" y="643.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="878.1" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="878.6" y="723.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="881.6" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="878.6" y="707.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="881.6" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="878.6" y="691.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="881.6" y="702.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (1 samples, 0.29%)</title><rect x="882.0" y="755.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="885.0" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 2.93%)</title><rect x="885.5" y="755.0" width="34.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="888.5" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 2.93%)</title><rect x="885.5" y="739.0" width="34.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="888.5" y="750.0">en..</text>
</g>
<g>
<title>do_syscall_64 (10 samples, 2.93%)</title><rect x="885.5" y="723.0" width="34.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="888.5" y="734.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 2.93%)</title><rect x="885.5" y="707.0" width="34.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="888.5" y="718.0">__..</text>
</g>
<g>
<title>do_futex (10 samples, 2.93%)</title><rect x="885.5" y="691.0" width="34.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="888.5" y="702.0">do..</text>
</g>
<g>
<title>futex_wake (10 samples, 2.93%)</title><rect x="885.5" y="675.0" width="34.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="888.5" y="686.0">fu..</text>
</g>
<g>
<title>wake_up_q (10 samples, 2.93%)</title><rect x="885.5" y="659.0" width="34.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="888.5" y="670.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (10 samples, 2.93%)</title><rect x="885.5" y="643.0" width="34.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="888.5" y="654.0">tr..</text>
</g>
<g>
<title>__lock_text_start (10 samples, 2.93%)</title><rect x="885.5" y="627.0" width="34.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="888.5" y="638.0">__..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (6 samples, 1.76%)</title><rect x="920.1" y="755.0" width="20.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (54 samples, 15.84%)</title><rect x="940.9" y="755.0" width="186.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.9" y="766.0">ru/mail/polis/dao/basta1..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (53 samples, 15.54%)</title><rect x="944.3" y="739.0" width="183.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.3" y="750.0">ru/mail/polis/dao/basta1..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.59%)</title><rect x="944.3" y="723.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="947.3" y="734.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.59%)</title><rect x="944.3" y="707.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="947.3" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.29%)</title><rect x="947.8" y="691.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.8" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (51 samples, 14.96%)</title><rect x="951.2" y="723.0" width="176.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="954.2" y="734.0">org/rocksdb/AbstractSli..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.59%)</title><rect x="951.2" y="707.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.2" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (49 samples, 14.37%)</title><rect x="958.2" y="707.0" width="169.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="961.2" y="718.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (49 samples, 14.37%)</title><rect x="958.2" y="691.0" width="169.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="961.2" y="702.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (45 samples, 13.20%)</title><rect x="968.5" y="675.0" width="155.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="971.5" y="686.0">Java_org_rocksdb_Sli..</text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="968.5" y="659.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.5" y="670.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.29%)</title><rect x="972.0" y="659.0" width="3.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.29%)</title><rect x="975.5" y="659.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="978.5" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.88%)</title><rect x="978.9" y="659.0" width="10.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="981.9" y="670.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.29%)</title><rect x="978.9" y="643.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.9" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.29%)</title><rect x="982.4" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.29%)</title><rect x="985.8" y="643.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.8" y="654.0"></text>
</g>
<g>
<title>jni_NewByteArray (29 samples, 8.50%)</title><rect x="989.3" y="659.0" width="100.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="992.3" y="670.0">jni_NewByteA..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.88%)</title><rect x="996.2" y="643.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.2" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.59%)</title><rect x="1006.6" y="643.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.6" y="654.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.29%)</title><rect x="1013.5" y="643.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.5" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.29%)</title><rect x="1017.0" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.88%)</title><rect x="1020.4" y="643.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.4" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 4.99%)</title><rect x="1030.8" y="643.0" width="58.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.8" y="654.0">TypeAr..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 4.69%)</title><rect x="1034.3" y="627.0" width="55.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.3" y="638.0">Colle..</text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 2.93%)</title><rect x="1034.3" y="611.0" width="34.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.3" y="622.0">Me..</text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (5 samples, 1.47%)</title><rect x="1041.2" y="595.0" width="17.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1044.2" y="606.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.29%)</title><rect x="1055.0" y="579.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1058.0" y="590.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.29%)</title><rect x="1055.0" y="563.0" width="3.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1058.0" y="574.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.29%)</title><rect x="1055.0" y="547.0" width="3.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1058.0" y="558.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="1055.0" y="531.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1058.0" y="542.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.29%)</title><rect x="1055.0" y="515.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1058.0" y="526.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.29%)</title><rect x="1055.0" y="499.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1058.0" y="510.0"></text>
</g>
<g>
<title>mem_cgroup_throttle_swaprate (1 samples, 0.29%)</title><rect x="1055.0" y="483.0" width="3.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1058.0" y="494.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.59%)</title><rect x="1058.5" y="595.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.5" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="1065.4" y="595.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1068.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="1065.4" y="579.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1068.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="1065.4" y="563.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1068.4" y="574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 1.17%)</title><rect x="1068.9" y="611.0" width="13.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.9" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.59%)</title><rect x="1082.7" y="611.0" width="6.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1085.7" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 2.64%)</title><rect x="1089.6" y="659.0" width="31.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1092.6" y="670.0">jn..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.29%)</title><rect x="1103.5" y="643.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.29%)</title><rect x="1107.0" y="643.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.0" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.88%)</title><rect x="1110.4" y="643.0" width="10.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1113.4" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.59%)</title><rect x="1113.9" y="627.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.9" y="638.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.29%)</title><rect x="1120.8" y="659.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.8" y="670.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.29%)</title><rect x="1124.3" y="675.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1127.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.29%)</title><rect x="1127.7" y="803.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1130.7" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.29%)</title><rect x="1127.7" y="787.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1130.7" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.29%)</title><rect x="1127.7" y="771.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.29%)</title><rect x="1127.7" y="755.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.29%)</title><rect x="1131.2" y="867.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.29%)</title><rect x="1131.2" y="851.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1134.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.29%)</title><rect x="1131.2" y="835.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1134.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.29%)</title><rect x="1134.6" y="867.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1137.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.29%)</title><rect x="1134.6" y="851.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1137.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.29%)</title><rect x="1138.1" y="867.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1141.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.29%)</title><rect x="1138.1" y="851.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1141.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.29%)</title><rect x="1138.1" y="835.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1141.1" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.29%)</title><rect x="1138.1" y="819.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1141.1" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 3.52%)</title><rect x="1141.6" y="883.0" width="41.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1144.6" y="894.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 3.52%)</title><rect x="1141.6" y="867.0" width="41.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1144.6" y="878.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.88%)</title><rect x="1141.6" y="851.0" width="10.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1144.6" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.29%)</title><rect x="1141.6" y="835.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.6" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.29%)</title><rect x="1145.0" y="835.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.0" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.29%)</title><rect x="1148.5" y="835.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1151.5" y="846.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.29%)</title><rect x="1148.5" y="819.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1151.5" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="1148.5" y="803.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="814.0"></text>
</g>
<g>
<title>__recv (9 samples, 2.64%)</title><rect x="1151.9" y="851.0" width="31.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1154.9" y="862.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 2.35%)</title><rect x="1155.4" y="835.0" width="27.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1158.4" y="846.0">e..</text>
</g>
<g>
<title>do_syscall_64 (8 samples, 2.35%)</title><rect x="1155.4" y="819.0" width="27.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1158.4" y="830.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (7 samples, 2.05%)</title><rect x="1158.9" y="803.0" width="24.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1161.9" y="814.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (6 samples, 1.76%)</title><rect x="1158.9" y="787.0" width="20.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 1.47%)</title><rect x="1158.9" y="771.0" width="17.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>inet6_recvmsg (5 samples, 1.47%)</title><rect x="1158.9" y="755.0" width="17.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.29%)</title><rect x="1158.9" y="739.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1161.9" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (4 samples, 1.17%)</title><rect x="1162.3" y="739.0" width="13.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1165.3" y="750.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.59%)</title><rect x="1165.8" y="723.0" width="6.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1168.8" y="734.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.59%)</title><rect x="1165.8" y="707.0" width="6.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1168.8" y="718.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.59%)</title><rect x="1165.8" y="691.0" width="6.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1168.8" y="702.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.29%)</title><rect x="1165.8" y="675.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.29%)</title><rect x="1169.2" y="675.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.29%)</title><rect x="1172.7" y="723.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1175.7" y="734.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.29%)</title><rect x="1172.7" y="707.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.29%)</title><rect x="1172.7" y="691.0" width="3.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1175.7" y="702.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.29%)</title><rect x="1172.7" y="675.0" width="3.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1175.7" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.29%)</title><rect x="1176.2" y="771.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1179.2" y="782.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.29%)</title><rect x="1176.2" y="755.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.29%)</title><rect x="1176.2" y="739.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.29%)</title><rect x="1176.2" y="723.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.29%)</title><rect x="1179.6" y="787.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1182.6" y="798.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.59%)</title><rect x="1183.1" y="931.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.59%)</title><rect x="1183.1" y="915.0" width="6.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.59%)</title><rect x="1183.1" y="899.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.59%)</title><rect x="1183.1" y="883.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.59%)</title><rect x="1183.1" y="867.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.59%)</title><rect x="1183.1" y="851.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.59%)</title><rect x="1183.1" y="835.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.59%)</title><rect x="1183.1" y="819.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.29%)</title><rect x="1183.1" y="803.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.29%)</title><rect x="1183.1" y="787.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.29%)</title><rect x="1183.1" y="771.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1186.5" y="803.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.29%)</title><rect x="1186.5" y="787.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.29%)</title><rect x="1186.5" y="771.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
</g>
</svg>
