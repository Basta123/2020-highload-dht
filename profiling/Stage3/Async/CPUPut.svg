<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (448 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 1.34%)</title><rect x="10.0" y="851.0" width="15.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3 samples, 0.67%)</title><rect x="10.0" y="835.0" width="7.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3 samples, 0.67%)</title><rect x="10.0" y="819.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.67%)</title><rect x="10.0" y="803.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.67%)</title><rect x="10.0" y="787.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.67%)</title><rect x="10.0" y="771.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (3 samples, 0.67%)</title><rect x="10.0" y="755.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (3 samples, 0.67%)</title><rect x="10.0" y="739.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (3 samples, 0.67%)</title><rect x="10.0" y="723.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.67%)</title><rect x="10.0" y="707.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.67%)</title><rect x="10.0" y="691.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.67%)</title><rect x="10.0" y="675.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (3 samples, 0.67%)</title><rect x="10.0" y="659.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.67%)</title><rect x="10.0" y="643.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (3 samples, 0.67%)</title><rect x="10.0" y="627.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.67%)</title><rect x="10.0" y="611.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (3 samples, 0.67%)</title><rect x="10.0" y="595.0" width="7.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (3 samples, 0.67%)</title><rect x="10.0" y="579.0" width="7.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.67%)</title><rect x="10.0" y="563.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.67%)</title><rect x="10.0" y="547.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.45%)</title><rect x="10.0" y="531.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.45%)</title><rect x="10.0" y="515.0" width="5.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.45%)</title><rect x="10.0" y="499.0" width="5.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.45%)</title><rect x="10.0" y="483.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.45%)</title><rect x="10.0" y="467.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="15.3" y="531.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.3" y="542.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.22%)</title><rect x="15.3" y="515.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="18.3" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.22%)</title><rect x="15.3" y="499.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="18.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="15.3" y="483.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.3" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.22%)</title><rect x="15.3" y="467.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.3" y="478.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.67%)</title><rect x="17.9" y="835.0" width="7.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="20.9" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (15 samples, 3.35%)</title><rect x="25.8" y="851.0" width="39.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="28.8" y="862.0">[un..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (9 samples, 2.01%)</title><rect x="25.8" y="835.0" width="23.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="28.8" y="846.0">J..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (9 samples, 2.01%)</title><rect x="25.8" y="819.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="28.8" y="830.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 2.01%)</title><rect x="25.8" y="803.0" width="23.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.8" y="814.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 2.01%)</title><rect x="25.8" y="787.0" width="23.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="28.8" y="798.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 2.01%)</title><rect x="25.8" y="771.0" width="23.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.8" y="782.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (9 samples, 2.01%)</title><rect x="25.8" y="755.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.8" y="766.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (9 samples, 2.01%)</title><rect x="25.8" y="739.0" width="23.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="28.8" y="750.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.89%)</title><rect x="25.8" y="723.0" width="10.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (4 samples, 0.89%)</title><rect x="25.8" y="707.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="28.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.89%)</title><rect x="25.8" y="691.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.89%)</title><rect x="25.8" y="675.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (4 samples, 0.89%)</title><rect x="25.8" y="659.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.89%)</title><rect x="25.8" y="643.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="28.8" y="654.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (4 samples, 0.89%)</title><rect x="25.8" y="627.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="28.8" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (4 samples, 0.89%)</title><rect x="25.8" y="611.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="28.8" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (3 samples, 0.67%)</title><rect x="25.8" y="595.0" width="7.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="28.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.67%)</title><rect x="25.8" y="579.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="28.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.67%)</title><rect x="25.8" y="563.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.8" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.45%)</title><rect x="25.8" y="547.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.8" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.45%)</title><rect x="25.8" y="531.0" width="5.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="28.8" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.45%)</title><rect x="25.8" y="515.0" width="5.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="28.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.45%)</title><rect x="25.8" y="499.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.8" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.22%)</title><rect x="25.8" y="483.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="28.8" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.22%)</title><rect x="28.4" y="483.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.4" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="28.4" y="467.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="31.4" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="28.4" y="451.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="31.4" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="28.4" y="435.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="31.4" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="31.1" y="547.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="34.1" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.22%)</title><rect x="31.1" y="531.0" width="2.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="34.1" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.22%)</title><rect x="31.1" y="515.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="34.1" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="31.1" y="499.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="34.1" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.22%)</title><rect x="31.1" y="483.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="34.1" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="31.1" y="467.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="34.1" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="31.1" y="451.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="34.1" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="31.1" y="435.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="34.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.22%)</title><rect x="33.7" y="595.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="36.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.22%)</title><rect x="33.7" y="579.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.7" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="33.7" y="563.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="36.7" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.22%)</title><rect x="33.7" y="547.0" width="2.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="36.7" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.22%)</title><rect x="33.7" y="531.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="36.7" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="33.7" y="515.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.7" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.22%)</title><rect x="33.7" y="499.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.7" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="33.7" y="483.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="36.7" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="33.7" y="467.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="36.7" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="33.7" y="451.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="36.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (5 samples, 1.12%)</title><rect x="36.3" y="723.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="39.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (5 samples, 1.12%)</title><rect x="36.3" y="707.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="39.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 1.12%)</title><rect x="36.3" y="691.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 1.12%)</title><rect x="36.3" y="675.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="39.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (5 samples, 1.12%)</title><rect x="36.3" y="659.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="39.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 1.12%)</title><rect x="36.3" y="643.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="39.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (5 samples, 1.12%)</title><rect x="36.3" y="627.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="39.3" y="638.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (5 samples, 1.12%)</title><rect x="36.3" y="611.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="39.3" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (5 samples, 1.12%)</title><rect x="36.3" y="595.0" width="13.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="39.3" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (5 samples, 1.12%)</title><rect x="36.3" y="579.0" width="13.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="39.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 1.12%)</title><rect x="36.3" y="563.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="39.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 1.12%)</title><rect x="36.3" y="547.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.3" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="36.3" y="531.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="39.3" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.22%)</title><rect x="36.3" y="515.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="39.3" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.22%)</title><rect x="36.3" y="499.0" width="2.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="39.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="36.3" y="483.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="39.3" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.89%)</title><rect x="39.0" y="531.0" width="10.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="42.0" y="542.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (4 samples, 0.89%)</title><rect x="39.0" y="515.0" width="10.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="42.0" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.89%)</title><rect x="39.0" y="499.0" width="10.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="42.0" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.89%)</title><rect x="39.0" y="483.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="42.0" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.89%)</title><rect x="39.0" y="467.0" width="10.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="42.0" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.22%)</title><rect x="49.5" y="835.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="52.5" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.22%)</title><rect x="49.5" y="819.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="52.5" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.22%)</title><rect x="49.5" y="803.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="52.5" y="814.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.22%)</title><rect x="49.5" y="787.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="52.5" y="798.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.22%)</title><rect x="49.5" y="771.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.5" y="782.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.22%)</title><rect x="49.5" y="755.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.5" y="766.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.22%)</title><rect x="49.5" y="739.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="52.5" y="750.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.22%)</title><rect x="49.5" y="723.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="52.5" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.22%)</title><rect x="49.5" y="707.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="52.5" y="718.0"></text>
</g>
<g>
<title>call_stub (5 samples, 1.12%)</title><rect x="52.1" y="835.0" width="13.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="55.1" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="62.7" y="819.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="65.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="62.7" y="803.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="65.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="62.7" y="787.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="65.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (374 samples, 83.48%)</title><rect x="65.3" y="851.0" width="985.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.3" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (374 samples, 83.48%)</title><rect x="65.3" y="835.0" width="985.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.3" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (374 samples, 83.48%)</title><rect x="65.3" y="819.0" width="985.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.3" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 4.91%)</title><rect x="81.1" y="803.0" width="58.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.1" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (22 samples, 4.91%)</title><rect x="81.1" y="787.0" width="58.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.1" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 3.12%)</title><rect x="83.8" y="771.0" width="36.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.8" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 3.12%)</title><rect x="83.8" y="755.0" width="36.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.8" y="766.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 3.12%)</title><rect x="83.8" y="739.0" width="36.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="750.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.89%)</title><rect x="89.0" y="723.0" width="10.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="92.0" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.22%)</title><rect x="91.7" y="707.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="94.7" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="91.7" y="691.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="94.7" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="91.7" y="675.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="94.7" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="91.7" y="659.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="94.7" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.22%)</title><rect x="94.3" y="707.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="97.3" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="96.9" y="707.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="99.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="96.9" y="691.0" width="2.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="99.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="96.9" y="675.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="99.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 1.56%)</title><rect x="99.6" y="723.0" width="18.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="102.6" y="734.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (7 samples, 1.56%)</title><rect x="99.6" y="707.0" width="18.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="102.6" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.56%)</title><rect x="99.6" y="691.0" width="18.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="102.6" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.56%)</title><rect x="99.6" y="675.0" width="18.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="102.6" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 1.56%)</title><rect x="99.6" y="659.0" width="18.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="102.6" y="670.0"></text>
</g>
<g>
<title>do_futex (7 samples, 1.56%)</title><rect x="99.6" y="643.0" width="18.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="102.6" y="654.0"></text>
</g>
<g>
<title>futex_wait (7 samples, 1.56%)</title><rect x="99.6" y="627.0" width="18.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="102.6" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (7 samples, 1.56%)</title><rect x="99.6" y="611.0" width="18.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="102.6" y="622.0"></text>
</g>
<g>
<title>schedule (7 samples, 1.56%)</title><rect x="99.6" y="595.0" width="18.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="102.6" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 1.56%)</title><rect x="99.6" y="579.0" width="18.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="102.6" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 1.56%)</title><rect x="99.6" y="563.0" width="18.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="102.6" y="574.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.22%)</title><rect x="115.4" y="547.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="118.4" y="558.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.22%)</title><rect x="115.4" y="531.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="118.4" y="542.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.22%)</title><rect x="115.4" y="515.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="118.4" y="526.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.22%)</title><rect x="115.4" y="499.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="118.4" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="118.0" y="723.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="121.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="118.0" y="707.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="121.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="118.0" y="691.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="121.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 1.56%)</title><rect x="120.6" y="771.0" width="18.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 1.56%)</title><rect x="120.6" y="755.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 1.56%)</title><rect x="120.6" y="739.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 1.56%)</title><rect x="120.6" y="723.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 1.34%)</title><rect x="123.3" y="707.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.3" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.22%)</title><rect x="123.3" y="691.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="126.3" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.22%)</title><rect x="123.3" y="675.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="126.3" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 1.12%)</title><rect x="125.9" y="691.0" width="13.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="128.9" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 1.12%)</title><rect x="125.9" y="675.0" width="13.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="128.9" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 1.12%)</title><rect x="125.9" y="659.0" width="13.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="128.9" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 1.12%)</title><rect x="125.9" y="643.0" width="13.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="128.9" y="654.0"></text>
</g>
<g>
<title>do_futex (5 samples, 1.12%)</title><rect x="125.9" y="627.0" width="13.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="128.9" y="638.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 1.12%)</title><rect x="125.9" y="611.0" width="13.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="128.9" y="622.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.22%)</title><rect x="125.9" y="595.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="128.9" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.22%)</title><rect x="128.5" y="595.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="131.5" y="606.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.67%)</title><rect x="131.2" y="595.0" width="7.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="134.2" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.67%)</title><rect x="131.2" y="579.0" width="7.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="134.2" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.67%)</title><rect x="131.2" y="563.0" width="7.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="134.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl$$Lambda$68/2074310017.run (345 samples, 77.01%)</title><rect x="139.1" y="803.0" width="908.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.1" y="814.0">ru/mail/polis/service/basta123/MyAsyncHttpServerImpl$$Lambda$68/2074310017.run</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.lambda$putValueByKey$2 (345 samples, 77.01%)</title><rect x="139.1" y="787.0" width="908.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.1" y="798.0">ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.lambda$putValueByKey$2</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (38 samples, 8.48%)</title><rect x="139.1" y="771.0" width="100.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.1" y="782.0">one/nio/http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.22%)</title><rect x="147.0" y="755.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.22%)</title><rect x="147.0" y="739.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.22%)</title><rect x="147.0" y="723.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.0" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.22%)</title><rect x="147.0" y="707.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="150.0" y="718.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.22%)</title><rect x="147.0" y="691.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="150.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="147.0" y="675.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="150.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (34 samples, 7.59%)</title><rect x="149.6" y="755.0" width="89.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.6" y="766.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.22%)</title><rect x="149.6" y="739.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.22%)</title><rect x="149.6" y="723.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.22%)</title><rect x="149.6" y="707.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.22%)</title><rect x="149.6" y="691.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.6" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="149.6" y="675.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="152.6" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="149.6" y="659.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="152.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="149.6" y="643.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="152.6" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 7.37%)</title><rect x="152.2" y="739.0" width="87.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.2" y="750.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 7.37%)</title><rect x="152.2" y="723.0" width="87.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.2" y="734.0">one/nio/ne..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.22%)</title><rect x="152.2" y="707.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="155.2" y="718.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.22%)</title><rect x="152.2" y="691.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="155.2" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.22%)</title><rect x="152.2" y="675.0" width="2.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="155.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (32 samples, 7.14%)</title><rect x="154.9" y="707.0" width="84.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.9" y="718.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (32 samples, 7.14%)</title><rect x="154.9" y="691.0" width="84.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.9" y="702.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.22%)</title><rect x="154.9" y="675.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="157.9" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.22%)</title><rect x="154.9" y="659.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="157.9" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="154.9" y="643.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="157.9" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="154.9" y="627.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="157.9" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="154.9" y="611.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="157.9" y="622.0"></text>
</g>
<g>
<title>__send (31 samples, 6.92%)</title><rect x="157.5" y="675.0" width="81.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="160.5" y="686.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 6.70%)</title><rect x="160.1" y="659.0" width="79.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="163.1" y="670.0">entry_SYS..</text>
</g>
<g>
<title>do_syscall_64 (30 samples, 6.70%)</title><rect x="160.1" y="643.0" width="79.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="163.1" y="654.0">do_syscal..</text>
</g>
<g>
<title>__x64_sys_sendto (29 samples, 6.47%)</title><rect x="160.1" y="627.0" width="76.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="163.1" y="638.0">__x64_sy..</text>
</g>
<g>
<title>__sys_sendto (29 samples, 6.47%)</title><rect x="160.1" y="611.0" width="76.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="163.1" y="622.0">__sys_se..</text>
</g>
<g>
<title>__fdget (1 samples, 0.22%)</title><rect x="162.8" y="595.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="165.8" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (27 samples, 6.03%)</title><rect x="165.4" y="595.0" width="71.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="168.4" y="606.0">sock_sen..</text>
</g>
<g>
<title>inet6_sendmsg (27 samples, 6.03%)</title><rect x="165.4" y="579.0" width="71.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="168.4" y="590.0">inet6_se..</text>
</g>
<g>
<title>tcp_sendmsg (27 samples, 6.03%)</title><rect x="165.4" y="563.0" width="71.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="168.4" y="574.0">tcp_send..</text>
</g>
<g>
<title>tcp_sendmsg_locked (27 samples, 6.03%)</title><rect x="165.4" y="547.0" width="71.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="168.4" y="558.0">tcp_send..</text>
</g>
<g>
<title>check_stack_object (1 samples, 0.22%)</title><rect x="165.4" y="531.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="168.4" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.45%)</title><rect x="168.0" y="531.0" width="5.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.0" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.22%)</title><rect x="170.7" y="515.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="173.7" y="526.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.22%)</title><rect x="170.7" y="499.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="173.7" y="510.0"></text>
</g>
<g>
<title>tcp_push (23 samples, 5.13%)</title><rect x="173.3" y="531.0" width="60.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="176.3" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (23 samples, 5.13%)</title><rect x="173.3" y="515.0" width="60.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="176.3" y="526.0">__tcp_..</text>
</g>
<g>
<title>tcp_write_xmit (23 samples, 5.13%)</title><rect x="173.3" y="499.0" width="60.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="176.3" y="510.0">tcp_wr..</text>
</g>
<g>
<title>__tcp_transmit_skb (22 samples, 4.91%)</title><rect x="173.3" y="483.0" width="58.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="176.3" y="494.0">__tcp_..</text>
</g>
<g>
<title>ip_queue_xmit (20 samples, 4.46%)</title><rect x="175.9" y="467.0" width="52.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="178.9" y="478.0">ip_qu..</text>
</g>
<g>
<title>__ip_queue_xmit (20 samples, 4.46%)</title><rect x="175.9" y="451.0" width="52.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="178.9" y="462.0">__ip_..</text>
</g>
<g>
<title>ip_local_out (20 samples, 4.46%)</title><rect x="175.9" y="435.0" width="52.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="178.9" y="446.0">ip_lo..</text>
</g>
<g>
<title>ip_output (20 samples, 4.46%)</title><rect x="175.9" y="419.0" width="52.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="178.9" y="430.0">ip_ou..</text>
</g>
<g>
<title>ip_finish_output (20 samples, 4.46%)</title><rect x="175.9" y="403.0" width="52.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="178.9" y="414.0">ip_fi..</text>
</g>
<g>
<title>__ip_finish_output (20 samples, 4.46%)</title><rect x="175.9" y="387.0" width="52.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="178.9" y="398.0">__ip_..</text>
</g>
<g>
<title>ip_finish_output2 (19 samples, 4.24%)</title><rect x="178.6" y="371.0" width="50.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="181.6" y="382.0">ip_fi..</text>
</g>
<g>
<title>__local_bh_enable_ip (17 samples, 3.79%)</title><rect x="178.6" y="355.0" width="44.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="181.6" y="366.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.20 (17 samples, 3.79%)</title><rect x="178.6" y="339.0" width="44.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="181.6" y="350.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (17 samples, 3.79%)</title><rect x="178.6" y="323.0" width="44.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="181.6" y="334.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (17 samples, 3.79%)</title><rect x="178.6" y="307.0" width="44.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="181.6" y="318.0">__so..</text>
</g>
<g>
<title>net_rx_action (17 samples, 3.79%)</title><rect x="178.6" y="291.0" width="44.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="181.6" y="302.0">net_..</text>
</g>
<g>
<title>process_backlog (17 samples, 3.79%)</title><rect x="178.6" y="275.0" width="44.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="181.6" y="286.0">proc..</text>
</g>
<g>
<title>__netif_receive_skb (17 samples, 3.79%)</title><rect x="178.6" y="259.0" width="44.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="181.6" y="270.0">__ne..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (17 samples, 3.79%)</title><rect x="178.6" y="243.0" width="44.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="181.6" y="254.0">__ne..</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.22%)</title><rect x="178.6" y="227.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="181.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv (16 samples, 3.57%)</title><rect x="181.2" y="227.0" width="42.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="184.2" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (16 samples, 3.57%)</title><rect x="181.2" y="211.0" width="42.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="184.2" y="222.0">ip_r..</text>
</g>
<g>
<title>ip_local_deliver (16 samples, 3.57%)</title><rect x="181.2" y="195.0" width="42.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="184.2" y="206.0">ip_l..</text>
</g>
<g>
<title>ip_local_deliver_finish (16 samples, 3.57%)</title><rect x="181.2" y="179.0" width="42.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="184.2" y="190.0">ip_l..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (16 samples, 3.57%)</title><rect x="181.2" y="163.0" width="42.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="184.2" y="174.0">ip_p..</text>
</g>
<g>
<title>tcp_v4_rcv (16 samples, 3.57%)</title><rect x="181.2" y="147.0" width="42.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="184.2" y="158.0">tcp_..</text>
</g>
<g>
<title>tcp_v4_do_rcv (16 samples, 3.57%)</title><rect x="181.2" y="131.0" width="42.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="184.2" y="142.0">tcp_..</text>
</g>
<g>
<title>tcp_rcv_established (16 samples, 3.57%)</title><rect x="181.2" y="115.0" width="42.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="184.2" y="126.0">tcp_..</text>
</g>
<g>
<title>tcp_ack (2 samples, 0.45%)</title><rect x="183.8" y="99.0" width="5.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="186.8" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.45%)</title><rect x="183.8" y="83.0" width="5.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="186.8" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.22%)</title><rect x="186.5" y="67.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="189.5" y="78.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.22%)</title><rect x="186.5" y="51.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="189.5" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.22%)</title><rect x="186.5" y="35.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="189.5" y="46.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.22%)</title><rect x="189.1" y="99.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="192.1" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (12 samples, 2.68%)</title><rect x="191.7" y="99.0" width="31.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="194.7" y="110.0">tc..</text>
</g>
<g>
<title>sock_def_readable (12 samples, 2.68%)</title><rect x="191.7" y="83.0" width="31.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="194.7" y="94.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (12 samples, 2.68%)</title><rect x="191.7" y="67.0" width="31.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="194.7" y="78.0">__..</text>
</g>
<g>
<title>__wake_up_common_lock (12 samples, 2.68%)</title><rect x="191.7" y="51.0" width="31.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="194.7" y="62.0">__..</text>
</g>
<g>
<title>__lock_text_start (12 samples, 2.68%)</title><rect x="191.7" y="35.0" width="31.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="194.7" y="46.0">__..</text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 0.45%)</title><rect x="223.3" y="355.0" width="5.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="226.3" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 0.45%)</title><rect x="223.3" y="339.0" width="5.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="226.3" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.45%)</title><rect x="223.3" y="323.0" width="5.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="226.3" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.22%)</title><rect x="226.0" y="307.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="229.0" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.22%)</title><rect x="226.0" y="291.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="229.0" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.22%)</title><rect x="226.0" y="275.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="229.0" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.22%)</title><rect x="226.0" y="259.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="229.0" y="270.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.22%)</title><rect x="228.6" y="467.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="231.6" y="478.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.22%)</title><rect x="228.6" y="451.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="231.6" y="462.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.22%)</title><rect x="231.3" y="483.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="234.3" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.22%)</title><rect x="233.9" y="531.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="236.9" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.22%)</title><rect x="233.9" y="515.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="236.9" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="236.5" y="627.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="239.5" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.22%)</title><rect x="236.5" y="611.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="239.5" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.22%)</title><rect x="236.5" y="595.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="239.5" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.22%)</title><rect x="236.5" y="579.0" width="2.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="239.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.upsert (307 samples, 68.53%)</title><rect x="239.2" y="771.0" width="808.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.2" y="782.0">ru/mail/polis/dao/basta123/MyDAORocksDB.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (307 samples, 68.53%)</title><rect x="239.2" y="755.0" width="808.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.2" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (307 samples, 68.53%)</title><rect x="239.2" y="739.0" width="808.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.2" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.22%)</title><rect x="239.2" y="723.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.2" y="734.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (211 samples, 47.10%)</title><rect x="241.8" y="723.0" width="555.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="244.8" y="734.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.22%)</title><rect x="247.1" y="707.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="250.1" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="247.1" y="691.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="250.1" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="247.1" y="675.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="250.1" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="247.1" y="659.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="250.1" y="670.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.22%)</title><rect x="249.7" y="707.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="252.7" y="718.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (207 samples, 46.21%)</title><rect x="252.3" y="707.0" width="545.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="255.3" y="718.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, ro..</text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.22%)</title><rect x="252.3" y="691.0" width="2.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="255.3" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="252.3" y="675.0" width="2.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="255.3" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="252.3" y="659.0" width="2.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="255.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="252.3" y="643.0" width="2.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="255.3" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.22%)</title><rect x="255.0" y="691.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="258.0" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.22%)</title><rect x="255.0" y="675.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="258.0" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.22%)</title><rect x="257.6" y="691.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="260.6" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.22%)</title><rect x="257.6" y="675.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="260.6" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="257.6" y="659.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="260.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (203 samples, 45.31%)</title><rect x="260.2" y="691.0" width="534.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="263.2" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (203 samples, 45.31%)</title><rect x="260.2" y="675.0" width="534.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="263.2" y="686.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHa..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (203 samples, 45.31%)</title><rect x="260.2" y="659.0" width="534.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="263.2" y="670.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle..</text>
</g>
<g>
<title>free@plt (1 samples, 0.22%)</title><rect x="260.2" y="643.0" width="2.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="263.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (193 samples, 43.08%)</title><rect x="262.9" y="643.0" width="508.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.9" y="654.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBat..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (1 samples, 0.22%)</title><rect x="262.9" y="627.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (192 samples, 42.86%)</title><rect x="265.5" y="627.0" width="505.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="268.5" y="638.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.22%)</title><rect x="268.1" y="611.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="271.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (5 samples, 1.12%)</title><rect x="270.8" y="611.0" width="13.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="273.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (4 samples, 0.89%)</title><rect x="273.4" y="595.0" width="10.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="276.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (3 samples, 0.67%)</title><rect x="276.0" y="579.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="279.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (2 samples, 0.45%)</title><rect x="276.0" y="563.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="279.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.22%)</title><rect x="278.7" y="547.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.7" y="558.0"></text>
</g>
<g>
<title>__libc_write (1 samples, 0.22%)</title><rect x="278.7" y="531.0" width="2.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="281.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.22%)</title><rect x="281.3" y="563.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="284.3" y="574.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.22%)</title><rect x="281.3" y="547.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="284.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.45%)</title><rect x="283.9" y="611.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="286.9" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.45%)</title><rect x="283.9" y="595.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="286.9" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="286.6" y="579.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="289.6" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="286.6" y="563.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="289.6" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="286.6" y="547.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="289.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.22%)</title><rect x="289.2" y="611.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="292.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.22%)</title><rect x="291.8" y="611.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="294.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (36 samples, 8.04%)</title><rect x="294.5" y="611.0" width="94.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="297.5" y="622.0">rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (36 samples, 8.04%)</title><rect x="294.5" y="595.0" width="94.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.5" y="606.0">rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (36 samples, 8.04%)</title><rect x="294.5" y="579.0" width="94.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="297.5" y="590.0">rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (36 samples, 8.04%)</title><rect x="294.5" y="563.0" width="94.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="297.5" y="574.0">rocksdb::Me..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.22%)</title><rect x="294.5" y="547.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="297.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.22%)</title><rect x="297.1" y="547.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="300.1" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="297.1" y="531.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="300.1" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="297.1" y="515.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="300.1" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="297.1" y="499.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (34 samples, 7.59%)</title><rect x="299.7" y="547.0" width="89.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="302.7" y="558.0">rocksdb::M..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.22%)</title><rect x="299.7" y="531.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (33 samples, 7.37%)</title><rect x="302.4" y="531.0" width="86.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.4" y="542.0">rocksdb::M..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (3 samples, 0.67%)</title><rect x="302.4" y="515.0" width="7.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="305.4" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="302.4" y="499.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="305.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.22%)</title><rect x="305.0" y="499.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="308.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.22%)</title><rect x="307.6" y="499.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="310.6" y="510.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (30 samples, 6.70%)</title><rect x="310.3" y="515.0" width="79.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="313.3" y="526.0">bool rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (30 samples, 6.70%)</title><rect x="310.3" y="499.0" width="79.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="313.3" y="510.0">/tmp/libr..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (20 samples, 4.46%)</title><rect x="318.2" y="483.0" width="52.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="321.2" y="494.0">/tmp/..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="318.2" y="467.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="321.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (19 samples, 4.24%)</title><rect x="320.8" y="467.0" width="50.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="323.8" y="478.0">rocks..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.22%)</title><rect x="320.8" y="451.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.8" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="323.4" y="451.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="326.4" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.45%)</title><rect x="326.1" y="451.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="329.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (15 samples, 3.35%)</title><rect x="331.3" y="451.0" width="39.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="334.3" y="462.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (5 samples, 1.12%)</title><rect x="331.3" y="435.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="334.3" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (5 samples, 1.12%)</title><rect x="331.3" y="419.0" width="13.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="334.3" y="430.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.45%)</title><rect x="331.3" y="403.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="334.3" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.67%)</title><rect x="336.6" y="403.0" width="7.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="339.6" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="336.6" y="387.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="339.6" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.22%)</title><rect x="339.2" y="387.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="342.2" y="398.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="341.9" y="387.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="344.9" y="398.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="341.9" y="371.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="344.9" y="382.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="341.9" y="355.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="344.9" y="366.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (9 samples, 2.01%)</title><rect x="344.5" y="435.0" width="23.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="347.5" y="446.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (9 samples, 2.01%)</title><rect x="344.5" y="419.0" width="23.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="347.5" y="430.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.22%)</title><rect x="344.5" y="403.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="347.5" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (8 samples, 1.79%)</title><rect x="347.1" y="403.0" width="21.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="350.1" y="414.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.22%)</title><rect x="357.7" y="387.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="360.7" y="398.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="357.7" y="371.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="360.7" y="382.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="357.7" y="355.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="360.7" y="366.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="357.7" y="339.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="360.7" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.67%)</title><rect x="360.3" y="387.0" width="7.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="363.3" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.22%)</title><rect x="360.3" y="371.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.3" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.45%)</title><rect x="362.9" y="371.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="365.9" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.22%)</title><rect x="365.6" y="355.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="368.6" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.22%)</title><rect x="368.2" y="435.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="371.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 1.56%)</title><rect x="370.8" y="483.0" width="18.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="373.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 1.56%)</title><rect x="370.8" y="467.0" width="18.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.8" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.67%)</title><rect x="370.8" y="451.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="373.8" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.67%)</title><rect x="370.8" y="435.0" width="7.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="373.8" y="446.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.22%)</title><rect x="376.1" y="419.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="379.1" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.67%)</title><rect x="378.7" y="451.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="381.7" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.67%)</title><rect x="378.7" y="435.0" width="8.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="381.7" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.45%)</title><rect x="381.4" y="419.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="384.4" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.22%)</title><rect x="384.0" y="403.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="387.0" y="414.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.22%)</title><rect x="384.0" y="387.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.22%)</title><rect x="386.7" y="451.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="389.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (102 samples, 22.77%)</title><rect x="389.3" y="611.0" width="268.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="392.3" y="622.0">rocksdb::WriteBatchInternal::InsertI..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (102 samples, 22.77%)</title><rect x="389.3" y="595.0" width="268.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="392.3" y="606.0">rocksdb::WriteBatch::Iterate(rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.22%)</title><rect x="389.3" y="579.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="392.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (101 samples, 22.54%)</title><rect x="391.9" y="579.0" width="266.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.9" y="590.0">rocksdb::WriteBatchInternal::Iterate..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (100 samples, 22.32%)</title><rect x="394.6" y="563.0" width="263.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.6" y="574.0">rocksdb::MemTableInserter::PutCF(un..</text>
</g>
<g>
<title>malloc@plt (1 samples, 0.22%)</title><rect x="394.6" y="547.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="397.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.22%)</title><rect x="397.2" y="547.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="400.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (97 samples, 21.65%)</title><rect x="399.8" y="547.0" width="255.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="402.8" y="558.0">rocksdb::MemTableInserter::PutCFIm..</text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (2 samples, 0.45%)</title><rect x="402.5" y="531.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="405.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (94 samples, 20.98%)</title><rect x="407.7" y="531.0" width="247.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="410.7" y="542.0">rocksdb::MemTable::Add(unsigned l..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (1 samples, 0.22%)</title><rect x="413.0" y="515.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="416.0" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="413.0" y="499.0" width="2.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="416.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (91 samples, 20.31%)</title><rect x="415.6" y="515.0" width="239.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="418.6" y="526.0">rocksdb::InlineSkipList&lt;rocksdb:..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (91 samples, 20.31%)</title><rect x="415.6" y="499.0" width="239.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.6" y="510.0">bool rocksdb::InlineSkipList&lt;roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (87 samples, 19.42%)</title><rect x="415.6" y="483.0" width="229.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="418.6" y="494.0">/tmp/librocksdbjni221189104405..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (86 samples, 19.20%)</title><rect x="418.3" y="467.0" width="226.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="421.3" y="478.0">/tmp/librocksdbjni221189104405..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.45%)</title><rect x="418.3" y="451.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="421.3" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="423.5" y="451.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="426.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (83 samples, 18.53%)</title><rect x="426.2" y="451.0" width="218.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="429.2" y="462.0">rocksdb::MemTable::KeyCompara..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="426.2" y="435.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="429.2" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.45%)</title><rect x="428.8" y="435.0" width="5.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="431.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (77 samples, 17.19%)</title><rect x="434.1" y="435.0" width="202.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="437.1" y="446.0">rocksdb::BaseComparatorJni..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (14 samples, 3.12%)</title><rect x="434.1" y="419.0" width="36.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="437.1" y="430.0">JNI..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.22%)</title><rect x="434.1" y="403.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.1" y="414.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (13 samples, 2.90%)</title><rect x="436.7" y="403.0" width="34.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="439.7" y="414.0">jn..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.22%)</title><rect x="439.3" y="387.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="442.3" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.22%)</title><rect x="442.0" y="387.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.0" y="398.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.22%)</title><rect x="444.6" y="387.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="447.6" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.22%)</title><rect x="447.2" y="387.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="450.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.22%)</title><rect x="449.9" y="387.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="452.9" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (7 samples, 1.56%)</title><rect x="452.5" y="387.0" width="18.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="455.5" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.22%)</title><rect x="457.8" y="371.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="460.8" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.67%)</title><rect x="460.4" y="371.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.4" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.22%)</title><rect x="460.4" y="355.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="463.4" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.22%)</title><rect x="463.0" y="355.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="466.0" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.22%)</title><rect x="463.0" y="339.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="466.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.22%)</title><rect x="465.7" y="355.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="468.7" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.22%)</title><rect x="468.3" y="371.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.3" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (34 samples, 7.59%)</title><rect x="470.9" y="419.0" width="89.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="473.9" y="430.0">JNIEnv_::C..</text>
</g>
<g>
<title>jni_CallVoidMethodV (33 samples, 7.37%)</title><rect x="473.6" y="403.0" width="86.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="476.6" y="414.0">jni_CallVo..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.22%)</title><rect x="476.2" y="387.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="479.2" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.22%)</title><rect x="478.8" y="387.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="481.8" y="398.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.45%)</title><rect x="481.5" y="387.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="484.5" y="398.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="484.1" y="371.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="487.1" y="382.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="484.1" y="355.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="487.1" y="366.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="484.1" y="339.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="487.1" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.22%)</title><rect x="486.7" y="387.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.7" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.22%)</title><rect x="489.4" y="387.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="492.4" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (26 samples, 5.80%)</title><rect x="492.0" y="387.0" width="68.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="495.0" y="398.0">jni_inv..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (9 samples, 2.01%)</title><rect x="502.5" y="371.0" width="23.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="505.5" y="382.0">J..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="523.6" y="355.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="526.6" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="523.6" y="339.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="526.6" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="523.6" y="323.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="526.6" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (10 samples, 2.23%)</title><rect x="526.2" y="371.0" width="26.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="529.2" y="382.0">J..</text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.67%)</title><rect x="534.2" y="355.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="537.2" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.22%)</title><rect x="539.4" y="339.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="542.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.22%)</title><rect x="542.1" y="355.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="545.1" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.45%)</title><rect x="544.7" y="355.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="547.7" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.22%)</title><rect x="550.0" y="355.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="553.0" y="366.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.22%)</title><rect x="550.0" y="339.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="553.0" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="552.6" y="371.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="555.6" y="382.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="552.6" y="355.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="555.6" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="552.6" y="339.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="555.6" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="552.6" y="323.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="555.6" y="334.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.22%)</title><rect x="555.2" y="371.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.2" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.22%)</title><rect x="557.9" y="371.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="560.9" y="382.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.45%)</title><rect x="560.5" y="419.0" width="5.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="563.5" y="430.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.45%)</title><rect x="560.5" y="403.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="563.5" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.45%)</title><rect x="560.5" y="387.0" width="5.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="563.5" y="398.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.45%)</title><rect x="560.5" y="371.0" width="5.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="563.5" y="382.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.45%)</title><rect x="560.5" y="355.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="563.5" y="366.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.45%)</title><rect x="560.5" y="339.0" width="5.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="563.5" y="350.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.45%)</title><rect x="560.5" y="323.0" width="5.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="563.5" y="334.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.45%)</title><rect x="560.5" y="307.0" width="5.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="563.5" y="318.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.45%)</title><rect x="560.5" y="291.0" width="5.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="563.5" y="302.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.45%)</title><rect x="560.5" y="275.0" width="5.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="563.5" y="286.0"></text>
</g>
<g>
<title>__lll_unlock_wake (20 samples, 4.46%)</title><rect x="565.8" y="419.0" width="52.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="568.8" y="430.0">__lll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 4.46%)</title><rect x="565.8" y="403.0" width="52.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="568.8" y="414.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (20 samples, 4.46%)</title><rect x="565.8" y="387.0" width="52.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="568.8" y="398.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_futex (20 samples, 4.46%)</title><rect x="565.8" y="371.0" width="52.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="568.8" y="382.0">__x64..</text>
</g>
<g>
<title>do_futex (20 samples, 4.46%)</title><rect x="565.8" y="355.0" width="52.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="568.8" y="366.0">do_fu..</text>
</g>
<g>
<title>futex_wake (20 samples, 4.46%)</title><rect x="565.8" y="339.0" width="52.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="568.8" y="350.0">futex..</text>
</g>
<g>
<title>wake_up_q (20 samples, 4.46%)</title><rect x="565.8" y="323.0" width="52.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="568.8" y="334.0">wake_..</text>
</g>
<g>
<title>try_to_wake_up (20 samples, 4.46%)</title><rect x="565.8" y="307.0" width="52.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="568.8" y="318.0">try_t..</text>
</g>
<g>
<title>__lock_text_start (20 samples, 4.46%)</title><rect x="565.8" y="291.0" width="52.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="568.8" y="302.0">__loc..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.45%)</title><rect x="618.4" y="419.0" width="5.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="621.4" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.22%)</title><rect x="621.1" y="403.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="624.1" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.45%)</title><rect x="623.7" y="419.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="626.7" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.22%)</title><rect x="629.0" y="419.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="632.0" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.45%)</title><rect x="631.6" y="419.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="634.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.45%)</title><rect x="636.9" y="435.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.22%)</title><rect x="642.1" y="435.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="645.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.89%)</title><rect x="644.8" y="483.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="647.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.89%)</title><rect x="644.8" y="467.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.8" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.22%)</title><rect x="644.8" y="451.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="647.8" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.22%)</title><rect x="644.8" y="435.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="647.8" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.22%)</title><rect x="644.8" y="419.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="647.8" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.22%)</title><rect x="644.8" y="403.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="647.8" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.67%)</title><rect x="647.4" y="451.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.4" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.67%)</title><rect x="647.4" y="435.0" width="7.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="650.4" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.67%)</title><rect x="647.4" y="419.0" width="7.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="650.4" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.22%)</title><rect x="650.0" y="403.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="653.0" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="652.7" y="403.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="655.7" y="414.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.22%)</title><rect x="655.3" y="547.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (31 samples, 6.92%)</title><rect x="657.9" y="611.0" width="81.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="660.9" y="622.0">rocksdb::..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.22%)</title><rect x="715.9" y="595.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="718.9" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.22%)</title><rect x="715.9" y="579.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="718.9" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.22%)</title><rect x="715.9" y="563.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="718.9" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.22%)</title><rect x="718.5" y="595.0" width="2.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="721.5" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 1.56%)</title><rect x="721.2" y="595.0" width="18.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="724.2" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 1.56%)</title><rect x="721.2" y="579.0" width="18.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="724.2" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 1.56%)</title><rect x="721.2" y="563.0" width="18.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="724.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) [clone .plt] (1 samples, 0.22%)</title><rect x="739.6" y="611.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (6 samples, 1.34%)</title><rect x="742.2" y="611.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 0.89%)</title><rect x="742.2" y="595.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.2" y="606.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.45%)</title><rect x="752.8" y="595.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="755.8" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.22%)</title><rect x="755.4" y="579.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="758.4" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.22%)</title><rect x="755.4" y="563.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="758.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.22%)</title><rect x="758.0" y="611.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.22%)</title><rect x="760.7" y="611.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.7" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="760.7" y="595.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="763.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="760.7" y="579.0" width="2.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="763.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="760.7" y="563.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="763.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.22%)</title><rect x="763.3" y="611.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.3" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.22%)</title><rect x="763.3" y="595.0" width="2.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="766.3" y="606.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.22%)</title><rect x="765.9" y="611.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="768.9" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.22%)</title><rect x="765.9" y="595.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="768.9" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.22%)</title><rect x="765.9" y="579.0" width="2.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="768.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="768.6" y="611.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="771.6" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="768.6" y="595.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="771.6" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="768.6" y="579.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="771.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.22%)</title><rect x="771.2" y="643.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 1.12%)</title><rect x="773.8" y="643.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.67%)</title><rect x="773.8" y="627.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="776.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.22%)</title><rect x="781.7" y="627.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.22%)</title><rect x="784.4" y="627.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.4" y="638.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.22%)</title><rect x="787.0" y="643.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="790.0" y="654.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.22%)</title><rect x="789.6" y="643.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.6" y="654.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.22%)</title><rect x="792.3" y="643.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.3" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.22%)</title><rect x="794.9" y="691.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 4.91%)</title><rect x="797.5" y="723.0" width="58.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="800.5" y="734.0">[unkno..</text>
</g>
<g>
<title>__libc_write (12 samples, 2.68%)</title><rect x="797.5" y="707.0" width="31.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="800.5" y="718.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 2.68%)</title><rect x="797.5" y="691.0" width="31.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="800.5" y="702.0">en..</text>
</g>
<g>
<title>do_syscall_64 (12 samples, 2.68%)</title><rect x="797.5" y="675.0" width="31.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="800.5" y="686.0">do..</text>
</g>
<g>
<title>__x64_sys_write (12 samples, 2.68%)</title><rect x="797.5" y="659.0" width="31.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="800.5" y="670.0">__..</text>
</g>
<g>
<title>ksys_write (12 samples, 2.68%)</title><rect x="797.5" y="643.0" width="31.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="800.5" y="654.0">ks..</text>
</g>
<g>
<title>vfs_write (12 samples, 2.68%)</title><rect x="797.5" y="627.0" width="31.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.5" y="638.0">vf..</text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.22%)</title><rect x="797.5" y="611.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="800.5" y="622.0"></text>
</g>
<g>
<title>__vfs_write (11 samples, 2.46%)</title><rect x="800.2" y="611.0" width="29.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="803.2" y="622.0">__..</text>
</g>
<g>
<title>new_sync_write (11 samples, 2.46%)</title><rect x="800.2" y="595.0" width="29.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="803.2" y="606.0">ne..</text>
</g>
<g>
<title>ext4_file_write_iter (11 samples, 2.46%)</title><rect x="800.2" y="579.0" width="29.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="803.2" y="590.0">ex..</text>
</g>
<g>
<title>__generic_file_write_iter (11 samples, 2.46%)</title><rect x="800.2" y="563.0" width="29.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="803.2" y="574.0">__..</text>
</g>
<g>
<title>generic_perform_write (11 samples, 2.46%)</title><rect x="800.2" y="547.0" width="29.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="803.2" y="558.0">ge..</text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 1.12%)</title><rect x="802.8" y="531.0" width="13.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="805.8" y="542.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (3 samples, 0.67%)</title><rect x="808.1" y="515.0" width="7.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="811.1" y="526.0"></text>
</g>
<g>
<title>pagecache_get_page (3 samples, 0.67%)</title><rect x="808.1" y="499.0" width="7.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="811.1" y="510.0"></text>
</g>
<g>
<title>__page_cache_alloc (1 samples, 0.22%)</title><rect x="808.1" y="483.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="811.1" y="494.0"></text>
</g>
<g>
<title>alloc_pages_current (1 samples, 0.22%)</title><rect x="808.1" y="467.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="811.1" y="478.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.22%)</title><rect x="808.1" y="451.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="811.1" y="462.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.22%)</title><rect x="808.1" y="435.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="811.1" y="446.0"></text>
</g>
<g>
<title>node_dirty_ok (1 samples, 0.22%)</title><rect x="808.1" y="419.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="811.1" y="430.0"></text>
</g>
<g>
<title>find_get_entry (2 samples, 0.45%)</title><rect x="810.7" y="483.0" width="5.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="813.7" y="494.0"></text>
</g>
<g>
<title>xas_load (2 samples, 0.45%)</title><rect x="810.7" y="467.0" width="5.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="813.7" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_end (5 samples, 1.12%)</title><rect x="816.0" y="531.0" width="13.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="819.0" y="542.0"></text>
</g>
<g>
<title>generic_write_end (5 samples, 1.12%)</title><rect x="816.0" y="515.0" width="13.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="819.0" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (5 samples, 1.12%)</title><rect x="816.0" y="499.0" width="13.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="819.0" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (5 samples, 1.12%)</title><rect x="816.0" y="483.0" width="13.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="819.0" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (5 samples, 1.12%)</title><rect x="816.0" y="467.0" width="13.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="819.0" y="478.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.22%)</title><rect x="816.0" y="451.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="819.0" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (4 samples, 0.89%)</title><rect x="818.6" y="451.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="821.6" y="462.0"></text>
</g>
<g>
<title>ext4_do_update_inode (4 samples, 0.89%)</title><rect x="818.6" y="435.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="821.6" y="446.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (3 samples, 0.67%)</title><rect x="818.6" y="419.0" width="7.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="821.6" y="430.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.22%)</title><rect x="821.2" y="403.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="824.2" y="414.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.22%)</title><rect x="823.9" y="403.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="826.9" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.22%)</title><rect x="826.5" y="419.0" width="2.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="829.5" y="430.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (9 samples, 2.01%)</title><rect x="829.2" y="707.0" width="23.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="832.2" y="718.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 1.79%)</title><rect x="831.8" y="691.0" width="21.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="834.8" y="702.0">e..</text>
</g>
<g>
<title>do_syscall_64 (8 samples, 1.79%)</title><rect x="831.8" y="675.0" width="21.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="834.8" y="686.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 1.79%)</title><rect x="831.8" y="659.0" width="21.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="834.8" y="670.0">_..</text>
</g>
<g>
<title>do_futex (8 samples, 1.79%)</title><rect x="831.8" y="643.0" width="21.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="834.8" y="654.0">d..</text>
</g>
<g>
<title>futex_wait (8 samples, 1.79%)</title><rect x="831.8" y="627.0" width="21.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="834.8" y="638.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (7 samples, 1.56%)</title><rect x="831.8" y="611.0" width="18.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="834.8" y="622.0"></text>
</g>
<g>
<title>schedule (7 samples, 1.56%)</title><rect x="831.8" y="595.0" width="18.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="834.8" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 1.56%)</title><rect x="831.8" y="579.0" width="18.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="834.8" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 1.34%)</title><rect x="834.4" y="563.0" width="15.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="837.4" y="574.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.22%)</title><rect x="850.2" y="611.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="853.2" y="622.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.22%)</title><rect x="850.2" y="595.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="853.2" y="606.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.22%)</title><rect x="852.9" y="707.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="855.9" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="852.9" y="691.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="855.9" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="852.9" y="675.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="855.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="852.9" y="659.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="855.9" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 3.12%)</title><rect x="855.5" y="723.0" width="36.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="858.5" y="734.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 3.12%)</title><rect x="855.5" y="707.0" width="36.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="858.5" y="718.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 3.12%)</title><rect x="855.5" y="691.0" width="36.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="858.5" y="702.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 2.90%)</title><rect x="858.1" y="675.0" width="34.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="861.1" y="686.0">__..</text>
</g>
<g>
<title>do_futex (13 samples, 2.90%)</title><rect x="858.1" y="659.0" width="34.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="861.1" y="670.0">do..</text>
</g>
<g>
<title>futex_wake (13 samples, 2.90%)</title><rect x="858.1" y="643.0" width="34.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="861.1" y="654.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.22%)</title><rect x="858.1" y="627.0" width="2.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="861.1" y="638.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 2.68%)</title><rect x="860.8" y="627.0" width="31.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="863.8" y="638.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (12 samples, 2.68%)</title><rect x="860.8" y="611.0" width="31.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="863.8" y="622.0">tr..</text>
</g>
<g>
<title>__lock_text_start (12 samples, 2.68%)</title><rect x="860.8" y="595.0" width="31.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="863.8" y="606.0">__..</text>
</g>
<g>
<title>call_stub (1 samples, 0.22%)</title><rect x="892.4" y="723.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="895.4" y="734.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.22%)</title><rect x="895.0" y="723.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="898.0" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (6 samples, 1.34%)</title><rect x="897.6" y="723.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="900.6" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="910.8" y="707.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="913.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="910.8" y="691.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="913.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="910.8" y="675.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="913.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (50 samples, 11.16%)</title><rect x="913.4" y="723.0" width="131.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="916.4" y="734.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (49 samples, 10.94%)</title><rect x="916.1" y="707.0" width="129.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="919.1" y="718.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (49 samples, 10.94%)</title><rect x="916.1" y="691.0" width="129.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.1" y="702.0">org/rocksdb/Abst..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.45%)</title><rect x="916.1" y="675.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="919.1" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (47 samples, 10.49%)</title><rect x="921.3" y="675.0" width="123.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="924.3" y="686.0">org/rocksdb/Sli..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (45 samples, 10.04%)</title><rect x="926.6" y="659.0" width="118.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="929.6" y="670.0">org/rocksdb/Sl..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (41 samples, 9.15%)</title><rect x="929.2" y="643.0" width="108.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="932.2" y="654.0">Java_org_rock..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.22%)</title><rect x="929.2" y="627.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="932.2" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.22%)</title><rect x="931.9" y="627.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.9" y="638.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.67%)</title><rect x="934.5" y="627.0" width="7.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="937.5" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.67%)</title><rect x="942.4" y="627.0" width="7.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="945.4" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.22%)</title><rect x="942.4" y="611.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="945.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.45%)</title><rect x="945.0" y="611.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="948.0" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (21 samples, 4.69%)</title><rect x="950.3" y="627.0" width="55.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="953.3" y="638.0">jni_N..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.45%)</title><rect x="952.9" y="611.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="955.9" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.22%)</title><rect x="958.2" y="611.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.2" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 3.79%)</title><rect x="960.8" y="611.0" width="44.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.8" y="622.0">Type..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (12 samples, 2.68%)</title><rect x="974.0" y="595.0" width="31.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.0" y="606.0">Co..</text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 1.79%)</title><rect x="976.7" y="579.0" width="21.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.7" y="590.0">M..</text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.89%)</title><rect x="981.9" y="563.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.9" y="574.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.22%)</title><rect x="989.8" y="547.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="992.8" y="558.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.22%)</title><rect x="989.8" y="531.0" width="2.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="992.8" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.22%)</title><rect x="989.8" y="515.0" width="2.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="992.8" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (2 samples, 0.45%)</title><rect x="992.5" y="563.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="995.5" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="995.1" y="547.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="998.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="995.1" y="531.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="998.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="995.1" y="515.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="998.1" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.22%)</title><rect x="997.7" y="579.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1000.7" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.45%)</title><rect x="1000.4" y="579.0" width="5.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1003.4" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 2.68%)</title><rect x="1005.6" y="627.0" width="31.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1008.6" y="638.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.22%)</title><rect x="1016.2" y="611.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.2" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="1018.8" y="611.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.22%)</title><rect x="1021.4" y="611.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.4" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.67%)</title><rect x="1024.1" y="611.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.1" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.45%)</title><rect x="1032.0" y="611.0" width="5.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1035.0" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.22%)</title><rect x="1034.6" y="595.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.6" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.45%)</title><rect x="1037.2" y="643.0" width="5.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1040.2" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="1042.5" y="643.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1045.5" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="1042.5" y="627.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1045.5" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="1042.5" y="611.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1045.5" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="1045.1" y="723.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1048.1" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="1045.1" y="707.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1048.1" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="1045.1" y="691.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1048.1" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="1047.8" y="803.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1050.8" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="1047.8" y="787.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1050.8" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="1047.8" y="771.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1050.8" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (53 samples, 11.83%)</title><rect x="1050.4" y="851.0" width="139.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1053.4" y="862.0">one/nio/server/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.22%)</title><rect x="1053.0" y="835.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (24 samples, 5.36%)</title><rect x="1055.7" y="835.0" width="63.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.7" y="846.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (22 samples, 4.91%)</title><rect x="1060.9" y="819.0" width="58.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1063.9" y="830.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.22%)</title><rect x="1063.6" y="803.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1066.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 4.02%)</title><rect x="1066.2" y="803.0" width="47.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1069.2" y="814.0">[unk..</text>
</g>
<g>
<title>epoll_wait (18 samples, 4.02%)</title><rect x="1066.2" y="787.0" width="47.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1069.2" y="798.0">epol..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (16 samples, 3.57%)</title><rect x="1071.5" y="771.0" width="42.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1074.5" y="782.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (16 samples, 3.57%)</title><rect x="1071.5" y="755.0" width="42.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1074.5" y="766.0">do_s..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (15 samples, 3.35%)</title><rect x="1074.1" y="739.0" width="39.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1077.1" y="750.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (15 samples, 3.35%)</title><rect x="1074.1" y="723.0" width="39.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1077.1" y="734.0">do_..</text>
</g>
<g>
<title>ep_poll (12 samples, 2.68%)</title><rect x="1079.4" y="707.0" width="31.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1082.4" y="718.0">ep..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.22%)</title><rect x="1079.4" y="691.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1082.4" y="702.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.22%)</title><rect x="1079.4" y="675.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1082.4" y="686.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.22%)</title><rect x="1079.4" y="659.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1082.4" y="670.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.22%)</title><rect x="1079.4" y="643.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1082.4" y="654.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.22%)</title><rect x="1079.4" y="627.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1082.4" y="638.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (11 samples, 2.46%)</title><rect x="1082.0" y="691.0" width="29.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1085.0" y="702.0">sc..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (11 samples, 2.46%)</title><rect x="1082.0" y="675.0" width="29.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1085.0" y="686.0">sc..</text>
</g>
<g>
<title>schedule (11 samples, 2.46%)</title><rect x="1082.0" y="659.0" width="29.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1085.0" y="670.0">sc..</text>
</g>
<g>
<title>__sched_text_start (11 samples, 2.46%)</title><rect x="1082.0" y="643.0" width="29.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1085.0" y="654.0">__..</text>
</g>
<g>
<title>finish_task_switch (11 samples, 2.46%)</title><rect x="1082.0" y="627.0" width="29.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1085.0" y="638.0">fi..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.22%)</title><rect x="1111.0" y="707.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1114.0" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.45%)</title><rect x="1113.6" y="803.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.6" y="814.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.45%)</title><rect x="1113.6" y="787.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1116.6" y="798.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.45%)</title><rect x="1113.6" y="771.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1116.6" y="782.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.22%)</title><rect x="1116.3" y="755.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1119.3" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.22%)</title><rect x="1116.3" y="739.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1119.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (27 samples, 6.03%)</title><rect x="1118.9" y="835.0" width="71.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1121.9" y="846.0">one/nio/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.22%)</title><rect x="1118.9" y="819.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.9" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.22%)</title><rect x="1118.9" y="803.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.9" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.22%)</title><rect x="1118.9" y="787.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.9" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.22%)</title><rect x="1118.9" y="771.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1121.9" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="1118.9" y="755.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1121.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="1118.9" y="739.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1121.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="1118.9" y="723.0" width="2.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1121.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (26 samples, 5.80%)</title><rect x="1121.5" y="819.0" width="68.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.5" y="830.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 3.12%)</title><rect x="1121.5" y="803.0" width="36.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.5" y="814.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 2.01%)</title><rect x="1124.2" y="787.0" width="23.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1127.2" y="798.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 2.01%)</title><rect x="1124.2" y="771.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.2" y="782.0">o..</text>
</g>
<g>
<title>RequestHandler3_putValueByKey.handleRequest (9 samples, 2.01%)</title><rect x="1124.2" y="755.0" width="23.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.2" y="766.0">R..</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.putValueByKey (9 samples, 2.01%)</title><rect x="1124.2" y="739.0" width="23.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.2" y="750.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 2.01%)</title><rect x="1124.2" y="723.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 2.01%)</title><rect x="1124.2" y="707.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1127.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.22%)</title><rect x="1124.2" y="691.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.22%)</title><rect x="1124.2" y="675.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1127.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.22%)</title><rect x="1124.2" y="659.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1127.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.22%)</title><rect x="1124.2" y="643.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1127.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 1.79%)</title><rect x="1126.8" y="691.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1129.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 1.79%)</title><rect x="1126.8" y="675.0" width="21.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 1.79%)</title><rect x="1126.8" y="659.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 1.79%)</title><rect x="1126.8" y="643.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.8" y="654.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 1.79%)</title><rect x="1126.8" y="627.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1129.8" y="638.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.22%)</title><rect x="1126.8" y="611.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1129.8" y="622.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.22%)</title><rect x="1126.8" y="595.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.8" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.22%)</title><rect x="1126.8" y="579.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1129.8" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.22%)</title><rect x="1126.8" y="563.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1129.8" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.22%)</title><rect x="1126.8" y="547.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1129.8" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 1.34%)</title><rect x="1129.4" y="611.0" width="15.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1132.4" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.34%)</title><rect x="1129.4" y="595.0" width="15.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1132.4" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 1.34%)</title><rect x="1129.4" y="579.0" width="15.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1132.4" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 1.34%)</title><rect x="1129.4" y="563.0" width="15.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1132.4" y="574.0"></text>
</g>
<g>
<title>do_futex (6 samples, 1.34%)</title><rect x="1129.4" y="547.0" width="15.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1132.4" y="558.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 1.34%)</title><rect x="1129.4" y="531.0" width="15.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1132.4" y="542.0"></text>
</g>
<g>
<title>wake_up_q (6 samples, 1.34%)</title><rect x="1129.4" y="515.0" width="15.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1132.4" y="526.0"></text>
</g>
<g>
<title>try_to_wake_up (6 samples, 1.34%)</title><rect x="1129.4" y="499.0" width="15.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1132.4" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 1.34%)</title><rect x="1129.4" y="483.0" width="15.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1132.4" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.22%)</title><rect x="1145.2" y="611.0" width="2.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1148.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.22%)</title><rect x="1147.9" y="787.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1150.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.22%)</title><rect x="1147.9" y="771.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.22%)</title><rect x="1150.5" y="787.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.45%)</title><rect x="1153.1" y="787.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1156.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.22%)</title><rect x="1155.8" y="771.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 2.68%)</title><rect x="1158.4" y="803.0" width="31.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1161.4" y="814.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 2.68%)</title><rect x="1158.4" y="787.0" width="31.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1161.4" y="798.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.45%)</title><rect x="1158.4" y="771.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1161.4" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.22%)</title><rect x="1158.4" y="755.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.22%)</title><rect x="1161.0" y="755.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.22%)</title><rect x="1161.0" y="739.0" width="2.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>__recv (10 samples, 2.23%)</title><rect x="1163.7" y="771.0" width="26.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1166.7" y="782.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 2.01%)</title><rect x="1166.3" y="755.0" width="23.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1169.3" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (9 samples, 2.01%)</title><rect x="1166.3" y="739.0" width="23.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1169.3" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 2.01%)</title><rect x="1166.3" y="723.0" width="23.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1169.3" y="734.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (9 samples, 2.01%)</title><rect x="1166.3" y="707.0" width="23.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1169.3" y="718.0">_..</text>
</g>
<g>
<title>sock_recvmsg (8 samples, 1.79%)</title><rect x="1166.3" y="691.0" width="21.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.3" y="702.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (6 samples, 1.34%)</title><rect x="1166.3" y="675.0" width="15.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1169.3" y="686.0"></text>
</g>
<g>
<title>tcp_recvmsg (6 samples, 1.34%)</title><rect x="1166.3" y="659.0" width="15.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 1.12%)</title><rect x="1168.9" y="643.0" width="13.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1171.9" y="654.0"></text>
</g>
<g>
<title>tcp_send_ack (5 samples, 1.12%)</title><rect x="1168.9" y="627.0" width="13.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1171.9" y="638.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.46 (5 samples, 1.12%)</title><rect x="1168.9" y="611.0" width="13.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1171.9" y="622.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.45%)</title><rect x="1168.9" y="595.0" width="5.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1171.9" y="606.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.22%)</title><rect x="1168.9" y="579.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1171.9" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.22%)</title><rect x="1171.6" y="579.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1174.6" y="590.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.67%)</title><rect x="1174.2" y="595.0" width="7.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1177.2" y="606.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.67%)</title><rect x="1174.2" y="579.0" width="7.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1177.2" y="590.0"></text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.67%)</title><rect x="1174.2" y="563.0" width="7.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.2" y="574.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 0.67%)</title><rect x="1174.2" y="547.0" width="7.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1177.2" y="558.0"></text>
</g>
<g>
<title>ip_output (3 samples, 0.67%)</title><rect x="1174.2" y="531.0" width="7.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1177.2" y="542.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 0.67%)</title><rect x="1174.2" y="515.0" width="7.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1177.2" y="526.0"></text>
</g>
<g>
<title>__ip_finish_output (3 samples, 0.67%)</title><rect x="1174.2" y="499.0" width="7.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1177.2" y="510.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 0.67%)</title><rect x="1174.2" y="483.0" width="7.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1177.2" y="494.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.67%)</title><rect x="1174.2" y="467.0" width="7.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1177.2" y="478.0"></text>
</g>
<g>
<title>do_softirq.part.20 (3 samples, 0.67%)</title><rect x="1174.2" y="451.0" width="7.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1177.2" y="462.0"></text>
</g>
<g>
<title>do_softirq_own_stack (3 samples, 0.67%)</title><rect x="1174.2" y="435.0" width="7.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.2" y="446.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.67%)</title><rect x="1174.2" y="419.0" width="7.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1177.2" y="430.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.67%)</title><rect x="1174.2" y="403.0" width="7.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.2" y="414.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.67%)</title><rect x="1174.2" y="387.0" width="7.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1177.2" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb (3 samples, 0.67%)</title><rect x="1174.2" y="371.0" width="7.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1177.2" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.45%)</title><rect x="1176.8" y="355.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.45%)</title><rect x="1176.8" y="339.0" width="5.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.45%)</title><rect x="1176.8" y="323.0" width="5.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.45%)</title><rect x="1176.8" y="307.0" width="5.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1179.8" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.45%)</title><rect x="1176.8" y="291.0" width="5.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1179.8" y="302.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.45%)</title><rect x="1176.8" y="275.0" width="5.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1179.8" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.45%)</title><rect x="1176.8" y="259.0" width="5.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1179.8" y="270.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (2 samples, 0.45%)</title><rect x="1176.8" y="243.0" width="5.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1179.8" y="254.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.45%)</title><rect x="1176.8" y="227.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.8" y="238.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.22%)</title><rect x="1176.8" y="211.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1179.8" y="222.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.22%)</title><rect x="1179.5" y="211.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.45%)</title><rect x="1182.1" y="675.0" width="5.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.45%)</title><rect x="1182.1" y="659.0" width="5.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.45%)</title><rect x="1182.1" y="643.0" width="5.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.45%)</title><rect x="1182.1" y="627.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1185.1" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.22%)</title><rect x="1187.4" y="691.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1190.4" y="702.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.22%)</title><rect x="1187.4" y="675.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.22%)</title><rect x="1187.4" y="659.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.22%)</title><rect x="1187.4" y="643.0" width="2.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
</g>
</svg>
