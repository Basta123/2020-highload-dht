<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (379 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 1.32%)</title><rect x="10.0" y="851.0" width="15.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 1.32%)</title><rect x="10.0" y="835.0" width="15.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (5 samples, 1.32%)</title><rect x="10.0" y="819.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.79%)</title><rect x="10.0" y="803.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.26%)</title><rect x="10.0" y="787.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="10.0" y="771.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="10.0" y="755.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="10.0" y="739.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.26%)</title><rect x="13.1" y="787.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.26%)</title><rect x="16.2" y="787.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="16.2" y="771.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="16.2" y="755.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.26%)</title><rect x="16.2" y="739.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="19.2" y="750.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.26%)</title><rect x="16.2" y="723.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="19.2" y="734.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.26%)</title><rect x="16.2" y="707.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="19.2" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="19.3" y="803.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="22.3" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="19.3" y="787.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="22.3" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="19.3" y="771.0" width="3.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="22.3" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="19.3" y="755.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="22.3" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.26%)</title><rect x="22.5" y="803.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="25.5" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 1.06%)</title><rect x="25.6" y="851.0" width="12.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="28.6" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.26%)</title><rect x="25.6" y="835.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="28.6" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (1 samples, 0.26%)</title><rect x="28.7" y="835.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.26%)</title><rect x="28.7" y="819.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="31.7" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="28.7" y="803.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.7" y="814.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.26%)</title><rect x="28.7" y="787.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.7" y="798.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.26%)</title><rect x="31.8" y="835.0" width="3.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="34.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (1 samples, 0.26%)</title><rect x="34.9" y="835.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.9" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="34.9" y="819.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="37.9" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="34.9" y="803.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="37.9" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="34.9" y="787.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="37.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.32%)</title><rect x="38.0" y="851.0" width="15.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="41.0" y="862.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (5 samples, 1.32%)</title><rect x="38.0" y="835.0" width="15.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="41.0" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 1.32%)</title><rect x="38.0" y="819.0" width="15.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="41.0" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 1.32%)</title><rect x="38.0" y="803.0" width="15.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="41.0" y="814.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 1.32%)</title><rect x="38.0" y="787.0" width="15.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="41.0" y="798.0"></text>
</g>
<g>
<title>do_futex (5 samples, 1.32%)</title><rect x="38.0" y="771.0" width="15.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="41.0" y="782.0"></text>
</g>
<g>
<title>futex_wait (5 samples, 1.32%)</title><rect x="38.0" y="755.0" width="15.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="41.0" y="766.0"></text>
</g>
<g>
<title>futex_wait_queue_me (5 samples, 1.32%)</title><rect x="38.0" y="739.0" width="15.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="41.0" y="750.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.26%)</title><rect x="38.0" y="723.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="41.0" y="734.0"></text>
</g>
<g>
<title>schedule (4 samples, 1.06%)</title><rect x="41.1" y="723.0" width="12.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="44.1" y="734.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 1.06%)</title><rect x="41.1" y="707.0" width="12.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="44.1" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 1.06%)</title><rect x="41.1" y="691.0" width="12.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="44.1" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 4.75%)</title><rect x="53.6" y="851.0" width="56.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="56.6" y="862.0">[unkno..</text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (2 samples, 0.53%)</title><rect x="53.6" y="835.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (2 samples, 0.53%)</title><rect x="53.6" y="819.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="56.6" y="830.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.26%)</title><rect x="53.6" y="803.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="56.6" y="814.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="56.7" y="803.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="59.7" y="814.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.26%)</title><rect x="56.7" y="787.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="59.7" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (16 samples, 4.22%)</title><rect x="59.8" y="835.0" width="49.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="62.8" y="846.0">__pth..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (16 samples, 4.22%)</title><rect x="59.8" y="819.0" width="49.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="62.8" y="830.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (16 samples, 4.22%)</title><rect x="59.8" y="803.0" width="49.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="62.8" y="814.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_futex (16 samples, 4.22%)</title><rect x="59.8" y="787.0" width="49.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="62.8" y="798.0">__x64..</text>
</g>
<g>
<title>do_futex (16 samples, 4.22%)</title><rect x="59.8" y="771.0" width="49.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="62.8" y="782.0">do_fu..</text>
</g>
<g>
<title>futex_wake (15 samples, 3.96%)</title><rect x="62.9" y="755.0" width="46.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="65.9" y="766.0">fute..</text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.26%)</title><rect x="62.9" y="739.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="65.9" y="750.0"></text>
</g>
<g>
<title>wake_up_q (14 samples, 3.69%)</title><rect x="66.0" y="739.0" width="43.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="69.0" y="750.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (14 samples, 3.69%)</title><rect x="66.0" y="723.0" width="43.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="69.0" y="734.0">try_..</text>
</g>
<g>
<title>__lock_text_start (14 samples, 3.69%)</title><rect x="66.0" y="707.0" width="43.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="69.0" y="718.0">__lo..</text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 0.53%)</title><rect x="109.6" y="851.0" width="6.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="112.6" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.53%)</title><rect x="109.6" y="835.0" width="6.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="112.6" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.53%)</title><rect x="109.6" y="819.0" width="6.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="112.6" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.53%)</title><rect x="109.6" y="803.0" width="6.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="112.6" y="814.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.53%)</title><rect x="109.6" y="787.0" width="6.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="112.6" y="798.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.53%)</title><rect x="109.6" y="771.0" width="6.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="112.6" y="782.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.53%)</title><rect x="109.6" y="755.0" width="6.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="112.6" y="766.0"></text>
</g>
<g>
<title>hrtimer_sleeper_start_expires (1 samples, 0.26%)</title><rect x="109.6" y="739.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="112.6" y="750.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.26%)</title><rect x="109.6" y="723.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="112.6" y="734.0"></text>
</g>
<g>
<title>lock_hrtimer_base (1 samples, 0.26%)</title><rect x="109.6" y="707.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="112.6" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.26%)</title><rect x="109.6" y="691.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="112.6" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.26%)</title><rect x="112.7" y="739.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="115.7" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.26%)</title><rect x="112.7" y="723.0" width="3.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="115.7" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.26%)</title><rect x="112.7" y="707.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="115.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (272 samples, 71.77%)</title><rect x="115.9" y="851.0" width="846.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.9" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (272 samples, 71.77%)</title><rect x="115.9" y="835.0" width="846.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.9" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (272 samples, 71.77%)</title><rect x="115.9" y="819.0" width="846.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.9" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.26%)</title><rect x="115.9" y="803.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.26%)</title><rect x="115.9" y="787.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.26%)</title><rect x="115.9" y="771.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.26%)</title><rect x="115.9" y="755.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl$$Lambda$70/561367791.run (1 samples, 0.26%)</title><rect x="115.9" y="739.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (28 samples, 7.39%)</title><rect x="119.0" y="803.0" width="87.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.0" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (27 samples, 7.12%)</title><rect x="122.1" y="787.0" width="84.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.1" y="798.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 5.80%)</title><rect x="122.1" y="771.0" width="68.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.1" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 5.54%)</title><rect x="125.2" y="755.0" width="65.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.2" y="766.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 5.54%)</title><rect x="125.2" y="739.0" width="65.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.2" y="750.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Park (4 samples, 1.06%)</title><rect x="131.4" y="723.0" width="12.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="134.4" y="734.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.26%)</title><rect x="131.4" y="707.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="134.4" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.53%)</title><rect x="134.5" y="707.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="137.5" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="134.5" y="691.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="137.5" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="134.5" y="675.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="137.5" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="134.5" y="659.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="137.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="134.5" y="643.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="137.5" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="137.7" y="691.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="140.7" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="137.7" y="675.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="140.7" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="137.7" y="659.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="140.7" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="137.7" y="643.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="140.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.26%)</title><rect x="140.8" y="707.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="143.8" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="140.8" y="691.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="143.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="140.8" y="675.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="143.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="140.8" y="659.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="143.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 3.96%)</title><rect x="143.9" y="723.0" width="46.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="146.9" y="734.0">[unk..</text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (15 samples, 3.96%)</title><rect x="143.9" y="707.0" width="46.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="146.9" y="718.0">pthr..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 3.69%)</title><rect x="147.0" y="691.0" width="43.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="150.0" y="702.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 3.69%)</title><rect x="147.0" y="675.0" width="43.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="150.0" y="686.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (14 samples, 3.69%)</title><rect x="147.0" y="659.0" width="43.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="150.0" y="670.0">__x6..</text>
</g>
<g>
<title>do_futex (14 samples, 3.69%)</title><rect x="147.0" y="643.0" width="43.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="150.0" y="654.0">do_f..</text>
</g>
<g>
<title>futex_wait (14 samples, 3.69%)</title><rect x="147.0" y="627.0" width="43.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="150.0" y="638.0">fute..</text>
</g>
<g>
<title>futex_wait_queue_me (13 samples, 3.43%)</title><rect x="147.0" y="611.0" width="40.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="150.0" y="622.0">fut..</text>
</g>
<g>
<title>plist_add (1 samples, 0.26%)</title><rect x="147.0" y="595.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.0" y="606.0"></text>
</g>
<g>
<title>schedule (12 samples, 3.17%)</title><rect x="150.1" y="595.0" width="37.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="153.1" y="606.0">sch..</text>
</g>
<g>
<title>__sched_text_start (12 samples, 3.17%)</title><rect x="150.1" y="579.0" width="37.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="153.1" y="590.0">__s..</text>
</g>
<g>
<title>finish_task_switch (11 samples, 2.90%)</title><rect x="153.2" y="563.0" width="34.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="156.2" y="574.0">fi..</text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.26%)</title><rect x="187.5" y="611.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.32%)</title><rect x="190.6" y="771.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.32%)</title><rect x="190.6" y="755.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.32%)</title><rect x="190.6" y="739.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.32%)</title><rect x="190.6" y="723.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 1.32%)</title><rect x="190.6" y="707.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.6" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.26%)</title><rect x="190.6" y="691.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="193.6" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.26%)</title><rect x="190.6" y="675.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="193.6" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.06%)</title><rect x="193.7" y="691.0" width="12.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="196.7" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.06%)</title><rect x="193.7" y="675.0" width="12.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="196.7" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 1.06%)</title><rect x="193.7" y="659.0" width="12.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="196.7" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 1.06%)</title><rect x="193.7" y="643.0" width="12.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="196.7" y="654.0"></text>
</g>
<g>
<title>do_futex (4 samples, 1.06%)</title><rect x="193.7" y="627.0" width="12.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="196.7" y="638.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 1.06%)</title><rect x="193.7" y="611.0" width="12.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="196.7" y="622.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 1.06%)</title><rect x="193.7" y="595.0" width="12.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="196.7" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 1.06%)</title><rect x="193.7" y="579.0" width="12.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="196.7" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 1.06%)</title><rect x="193.7" y="563.0" width="12.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="196.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl$$Lambda$70/561367791.run (243 samples, 64.12%)</title><rect x="206.1" y="803.0" width="756.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.1" y="814.0">ru/mail/polis/service/basta123/MyAsyncHttpServerImpl$$Lambda$70/561367791.run</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.lambda$getValueByKey$1 (243 samples, 64.12%)</title><rect x="206.1" y="787.0" width="756.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.1" y="798.0">ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.lambda$getValueByKey$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (34 samples, 8.97%)</title><rect x="206.1" y="771.0" width="105.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.1" y="782.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.26%)</title><rect x="206.1" y="755.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.26%)</title><rect x="206.1" y="739.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.26%)</title><rect x="206.1" y="723.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.26%)</title><rect x="206.1" y="707.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (32 samples, 8.44%)</title><rect x="209.3" y="755.0" width="99.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.3" y="766.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.26%)</title><rect x="209.3" y="739.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.26%)</title><rect x="209.3" y="723.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.26%)</title><rect x="209.3" y="707.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.26%)</title><rect x="209.3" y="691.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.3" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 8.18%)</title><rect x="212.4" y="739.0" width="96.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.4" y="750.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 8.18%)</title><rect x="212.4" y="723.0" width="96.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.4" y="734.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (31 samples, 8.18%)</title><rect x="212.4" y="707.0" width="96.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.4" y="718.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (31 samples, 8.18%)</title><rect x="212.4" y="691.0" width="96.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.4" y="702.0">one/nio/net..</text>
</g>
<g>
<title>__send (31 samples, 8.18%)</title><rect x="212.4" y="675.0" width="96.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="215.4" y="686.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (31 samples, 8.18%)</title><rect x="212.4" y="659.0" width="96.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="215.4" y="670.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (31 samples, 8.18%)</title><rect x="212.4" y="643.0" width="96.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="215.4" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (29 samples, 7.65%)</title><rect x="215.5" y="627.0" width="90.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="218.5" y="638.0">__x64_sys_..</text>
</g>
<g>
<title>__sys_sendto (29 samples, 7.65%)</title><rect x="215.5" y="611.0" width="90.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="218.5" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (27 samples, 7.12%)</title><rect x="215.5" y="595.0" width="84.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="218.5" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (27 samples, 7.12%)</title><rect x="215.5" y="579.0" width="84.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="218.5" y="590.0">inet6_send..</text>
</g>
<g>
<title>tcp_sendmsg (27 samples, 7.12%)</title><rect x="215.5" y="563.0" width="84.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="218.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (27 samples, 7.12%)</title><rect x="215.5" y="547.0" width="84.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="218.5" y="558.0">tcp_sendms..</text>
</g>
<g>
<title>tcp_push (26 samples, 6.86%)</title><rect x="215.5" y="531.0" width="80.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="218.5" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (26 samples, 6.86%)</title><rect x="215.5" y="515.0" width="80.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="218.5" y="526.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (26 samples, 6.86%)</title><rect x="215.5" y="499.0" width="80.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="218.5" y="510.0">tcp_write..</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.26%)</title><rect x="215.5" y="483.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="218.5" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (24 samples, 6.33%)</title><rect x="218.6" y="483.0" width="74.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="221.6" y="494.0">__tcp_tr..</text>
</g>
<g>
<title>ip_queue_xmit (22 samples, 5.80%)</title><rect x="221.7" y="467.0" width="68.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="224.7" y="478.0">ip_queu..</text>
</g>
<g>
<title>__ip_queue_xmit (22 samples, 5.80%)</title><rect x="221.7" y="451.0" width="68.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="224.7" y="462.0">__ip_qu..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.26%)</title><rect x="221.7" y="435.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="224.7" y="446.0"></text>
</g>
<g>
<title>ip_local_out (20 samples, 5.28%)</title><rect x="224.8" y="435.0" width="62.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="227.8" y="446.0">ip_loc..</text>
</g>
<g>
<title>ip_output (20 samples, 5.28%)</title><rect x="224.8" y="419.0" width="62.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="227.8" y="430.0">ip_out..</text>
</g>
<g>
<title>ip_finish_output (20 samples, 5.28%)</title><rect x="224.8" y="403.0" width="62.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="227.8" y="414.0">ip_fin..</text>
</g>
<g>
<title>__ip_finish_output (20 samples, 5.28%)</title><rect x="224.8" y="387.0" width="62.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="227.8" y="398.0">__ip_f..</text>
</g>
<g>
<title>ip_finish_output2 (20 samples, 5.28%)</title><rect x="224.8" y="371.0" width="62.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="227.8" y="382.0">ip_fin..</text>
</g>
<g>
<title>__local_bh_enable_ip (20 samples, 5.28%)</title><rect x="224.8" y="355.0" width="62.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="227.8" y="366.0">__loca..</text>
</g>
<g>
<title>do_softirq.part.20 (20 samples, 5.28%)</title><rect x="224.8" y="339.0" width="62.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="227.8" y="350.0">do_sof..</text>
</g>
<g>
<title>do_softirq_own_stack (20 samples, 5.28%)</title><rect x="224.8" y="323.0" width="62.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="227.8" y="334.0">do_sof..</text>
</g>
<g>
<title>__softirqentry_text_start (20 samples, 5.28%)</title><rect x="224.8" y="307.0" width="62.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="227.8" y="318.0">__soft..</text>
</g>
<g>
<title>net_rx_action (19 samples, 5.01%)</title><rect x="227.9" y="291.0" width="59.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="230.9" y="302.0">net_rx..</text>
</g>
<g>
<title>process_backlog (19 samples, 5.01%)</title><rect x="227.9" y="275.0" width="59.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="230.9" y="286.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (19 samples, 5.01%)</title><rect x="227.9" y="259.0" width="59.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="230.9" y="270.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (19 samples, 5.01%)</title><rect x="227.9" y="243.0" width="59.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="230.9" y="254.0">__neti..</text>
</g>
<g>
<title>ip_rcv (19 samples, 5.01%)</title><rect x="227.9" y="227.0" width="59.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="230.9" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.26%)</title><rect x="227.9" y="211.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="230.9" y="222.0"></text>
</g>
<g>
<title>ip_rcv_finish (18 samples, 4.75%)</title><rect x="231.1" y="211.0" width="56.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="234.1" y="222.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (18 samples, 4.75%)</title><rect x="231.1" y="195.0" width="56.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="234.1" y="206.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (18 samples, 4.75%)</title><rect x="231.1" y="179.0" width="56.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="234.1" y="190.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (18 samples, 4.75%)</title><rect x="231.1" y="163.0" width="56.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="234.1" y="174.0">ip_pro..</text>
</g>
<g>
<title>tcp_v4_rcv (18 samples, 4.75%)</title><rect x="231.1" y="147.0" width="56.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="234.1" y="158.0">tcp_v4..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.26%)</title><rect x="231.1" y="131.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="234.1" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.26%)</title><rect x="231.1" y="115.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="234.1" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (17 samples, 4.49%)</title><rect x="234.2" y="131.0" width="52.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="237.2" y="142.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (17 samples, 4.49%)</title><rect x="234.2" y="115.0" width="52.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="237.2" y="126.0">tcp_r..</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.26%)</title><rect x="234.2" y="99.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="237.2" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.26%)</title><rect x="234.2" y="83.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="237.2" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.26%)</title><rect x="234.2" y="67.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="237.2" y="78.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.26%)</title><rect x="234.2" y="51.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="237.2" y="62.0"></text>
</g>
<g>
<title>tcp_data_ready (15 samples, 3.96%)</title><rect x="237.3" y="99.0" width="46.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="240.3" y="110.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (15 samples, 3.96%)</title><rect x="237.3" y="83.0" width="46.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="240.3" y="94.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (15 samples, 3.96%)</title><rect x="237.3" y="67.0" width="46.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="240.3" y="78.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (15 samples, 3.96%)</title><rect x="237.3" y="51.0" width="46.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="240.3" y="62.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (15 samples, 3.96%)</title><rect x="237.3" y="35.0" width="46.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="240.3" y="46.0">__lo..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.26%)</title><rect x="284.0" y="99.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="287.0" y="110.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.26%)</title><rect x="287.1" y="435.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="290.1" y="446.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.26%)</title><rect x="290.2" y="467.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="293.2" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.26%)</title><rect x="290.2" y="451.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="293.2" y="462.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.26%)</title><rect x="293.3" y="483.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="296.3" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.26%)</title><rect x="296.4" y="531.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="299.4" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.26%)</title><rect x="296.4" y="515.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="299.4" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.26%)</title><rect x="296.4" y="499.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="299.4" y="510.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.53%)</title><rect x="299.6" y="595.0" width="6.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="302.6" y="606.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.53%)</title><rect x="299.6" y="579.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="302.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.53%)</title><rect x="299.6" y="563.0" width="6.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="302.6" y="574.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.53%)</title><rect x="299.6" y="547.0" width="6.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="302.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="305.8" y="627.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="308.8" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.26%)</title><rect x="305.8" y="611.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="308.8" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.26%)</title><rect x="305.8" y="595.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="308.8" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.26%)</title><rect x="305.8" y="579.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="308.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.26%)</title><rect x="308.9" y="755.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.get (209 samples, 55.15%)</title><rect x="312.0" y="771.0" width="650.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.0" y="782.0">ru/mail/polis/dao/basta123/MyDAORocksDB.get</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.26%)</title><rect x="318.2" y="755.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="321.2" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.26%)</title><rect x="318.2" y="739.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="321.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.26%)</title><rect x="321.3" y="755.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.3" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.26%)</title><rect x="321.3" y="739.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.26%)</title><rect x="321.3" y="723.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="321.3" y="707.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="324.3" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.26%)</title><rect x="321.3" y="691.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.3" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.26%)</title><rect x="321.3" y="675.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="324.3" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.26%)</title><rect x="321.3" y="659.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (2 samples, 0.53%)</title><rect x="324.5" y="755.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.53%)</title><rect x="324.5" y="739.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.26%)</title><rect x="324.5" y="723.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="324.5" y="707.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.26%)</title><rect x="324.5" y="691.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.5" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="327.6" y="723.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="330.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.iterator (191 samples, 50.40%)</title><rect x="330.7" y="755.0" width="594.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.7" y="766.0">ru/mail/polis/dao/basta123/MyDAORocksDB.iterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (20 samples, 5.28%)</title><rect x="330.7" y="739.0" width="62.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.7" y="750.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (17 samples, 4.49%)</title><rect x="330.7" y="723.0" width="52.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.7" y="734.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (12 samples, 3.17%)</title><rect x="333.8" y="707.0" width="37.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="336.8" y="718.0">Jav..</text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (12 samples, 3.17%)</title><rect x="333.8" y="691.0" width="37.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="336.8" y="702.0">roc..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::GetRangeDelAggregator() (1 samples, 0.26%)</title><rect x="333.8" y="675.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="336.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (1 samples, 0.26%)</title><rect x="336.9" y="675.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (10 samples, 2.64%)</title><rect x="340.0" y="675.0" width="31.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="343.0" y="686.0">ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.26%)</title><rect x="340.0" y="659.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="343.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.26%)</title><rect x="343.1" y="659.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="346.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 1.32%)</title><rect x="346.3" y="659.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="349.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.53%)</title><rect x="346.3" y="643.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="349.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.26%)</title><rect x="346.3" y="627.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="349.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.26%)</title><rect x="349.4" y="627.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="352.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.26%)</title><rect x="352.5" y="643.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="355.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.26%)</title><rect x="352.5" y="627.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="355.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.53%)</title><rect x="355.6" y="643.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="358.6" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="358.7" y="627.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="361.7" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="358.7" y="611.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="361.7" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="358.7" y="595.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="361.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.26%)</title><rect x="361.8" y="659.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="364.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (2 samples, 0.53%)</title><rect x="364.9" y="659.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="367.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.26%)</title><rect x="364.9" y="643.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="367.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::AddIterator(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (1 samples, 0.26%)</title><rect x="368.0" y="643.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="371.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.53%)</title><rect x="371.2" y="707.0" width="6.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="374.2" y="718.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.53%)</title><rect x="371.2" y="691.0" width="6.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="374.2" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="374.3" y="675.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="377.3" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="374.3" y="659.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="377.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="374.3" y="643.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="377.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::DB::NewIterator(rocksdb::ReadOptions const&amp;) (1 samples, 0.26%)</title><rect x="377.4" y="707.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="380.4" y="718.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.26%)</title><rect x="380.5" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="383.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="380.5" y="691.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="383.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="380.5" y="675.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="383.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="380.5" y="659.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="383.5" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (3 samples, 0.79%)</title><rect x="383.6" y="723.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.6" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (3 samples, 0.79%)</title><rect x="383.6" y="707.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.6" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (3 samples, 0.79%)</title><rect x="383.6" y="691.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="386.6" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (3 samples, 0.79%)</title><rect x="383.6" y="675.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.6" y="686.0"></text>
</g>
<g>
<title>_register_finalizer_Java (1 samples, 0.26%)</title><rect x="383.6" y="659.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="386.6" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (2 samples, 0.53%)</title><rect x="386.7" y="659.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.53%)</title><rect x="386.7" y="643.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.7" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (2 samples, 0.53%)</title><rect x="386.7" y="627.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="389.7" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (1 samples, 0.26%)</title><rect x="386.7" y="611.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="389.7" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="386.7" y="595.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="389.7" y="606.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.26%)</title><rect x="386.7" y="579.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="389.7" y="590.0"></text>
</g>
<g>
<title>LatestMethodCache::get_method() (1 samples, 0.26%)</title><rect x="389.8" y="611.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt; (160 samples, 42.22%)</title><rect x="393.0" y="739.0" width="498.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.0" y="750.0">ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (160 samples, 42.22%)</title><rect x="393.0" y="723.0" width="498.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.0" y="734.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (160 samples, 42.22%)</title><rect x="393.0" y="707.0" width="498.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.0" y="718.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.79%)</title><rect x="396.1" y="691.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.1" y="702.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (111 samples, 29.29%)</title><rect x="405.4" y="691.0" width="345.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="408.4" y="702.0">Java_org_rocksdb_RocksIterator_seek0</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="405.4" y="675.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="408.4" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="408.5" y="675.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="411.5" y="686.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (1 samples, 0.26%)</title><rect x="411.6" y="675.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="414.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (108 samples, 28.50%)</title><rect x="414.7" y="675.0" width="336.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.7" y="686.0">rocksdb::DBIter::Seek(rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.53%)</title><rect x="414.7" y="659.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="417.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (106 samples, 27.97%)</title><rect x="421.0" y="659.0" width="330.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="424.0" y="670.0">rocksdb::MemTableIterator::Seek(rocksdb::Slic..</text>
</g>
<g>
<title>/tmp/librocksdbjni2211891044054504534.so (104 samples, 27.44%)</title><rect x="424.1" y="643.0" width="323.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="427.1" y="654.0">/tmp/librocksdbjni2211891044054504534.so</text>
</g>
<g>
<title>rocksdb::EncodeKey(std::string*, rocksdb::Slice const&amp;) (1 samples, 0.26%)</title><rect x="424.1" y="627.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="427.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (102 samples, 26.91%)</title><rect x="427.2" y="627.0" width="317.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="430.2" y="638.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRe..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (93 samples, 24.54%)</title><rect x="452.1" y="611.0" width="289.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="455.1" y="622.0">rocksdb::MemTable::KeyComparator::opera..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.26%)</title><rect x="452.1" y="595.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="455.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.53%)</title><rect x="455.2" y="595.0" width="6.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="458.2" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.53%)</title><rect x="461.5" y="595.0" width="6.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="464.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (83 samples, 21.90%)</title><rect x="467.7" y="595.0" width="258.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="470.7" y="606.0">rocksdb::BaseComparatorJniCallback..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (26 samples, 6.86%)</title><rect x="467.7" y="579.0" width="80.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.7" y="590.0">JNIEnv_::..</text>
</g>
<g>
<title>jni_CallIntMethodV (25 samples, 6.60%)</title><rect x="467.7" y="563.0" width="77.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="470.7" y="574.0">jni_CallI..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="470.8" y="547.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="473.8" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="473.9" y="547.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="476.9" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (19 samples, 5.01%)</title><rect x="477.0" y="547.0" width="59.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="480.0" y="558.0">jni_in..</text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.26%)</title><rect x="489.5" y="531.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="492.5" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.79%)</title><rect x="492.6" y="531.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="495.6" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="498.8" y="515.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="501.8" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="498.8" y="499.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="501.8" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="498.8" y="483.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="501.8" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 2.37%)</title><rect x="501.9" y="531.0" width="28.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="504.9" y="542.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="517.5" y="515.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="520.5" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.26%)</title><rect x="520.6" y="515.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="523.6" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.53%)</title><rect x="523.7" y="515.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="526.7" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.26%)</title><rect x="529.9" y="531.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.9" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.26%)</title><rect x="533.1" y="531.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="536.1" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.53%)</title><rect x="536.2" y="547.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="539.2" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="542.4" y="547.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="545.4" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="542.4" y="531.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="545.4" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="542.4" y="515.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="545.4" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.26%)</title><rect x="545.5" y="563.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="548.5" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (42 samples, 11.08%)</title><rect x="548.6" y="579.0" width="130.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.6" y="590.0">JNIEnv_::CallVoi..</text>
</g>
<g>
<title>jni_CallVoidMethodV (42 samples, 11.08%)</title><rect x="548.6" y="563.0" width="130.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="551.6" y="574.0">jni_CallVoidMeth..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="567.3" y="547.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="570.3" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="567.3" y="531.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="570.3" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="567.3" y="515.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="570.3" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="567.3" y="499.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="570.3" y="510.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.26%)</title><rect x="570.4" y="547.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="573.4" y="558.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.26%)</title><rect x="573.5" y="547.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="576.5" y="558.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.26%)</title><rect x="576.6" y="547.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="579.6" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="579.8" y="547.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="582.8" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="579.8" y="531.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="582.8" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="579.8" y="515.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="582.8" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="579.8" y="499.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="582.8" y="510.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.53%)</title><rect x="582.9" y="547.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="585.9" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.26%)</title><rect x="589.1" y="547.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="592.1" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.26%)</title><rect x="592.2" y="547.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.2" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (27 samples, 7.12%)</title><rect x="595.3" y="547.0" width="84.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="598.3" y="558.0">jni_invoke..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.26%)</title><rect x="601.6" y="531.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="604.6" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (9 samples, 2.37%)</title><rect x="604.7" y="531.0" width="28.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.7" y="542.0">JN..</text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.26%)</title><rect x="632.7" y="531.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="635.7" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 1.85%)</title><rect x="635.8" y="531.0" width="21.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="638.8" y="542.0">J..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.26%)</title><rect x="645.1" y="515.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="648.1" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.79%)</title><rect x="648.3" y="515.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="651.3" y="526.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.53%)</title><rect x="657.6" y="531.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.6" y="542.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.53%)</title><rect x="663.8" y="531.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.8" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.53%)</title><rect x="670.1" y="531.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="673.1" y="542.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.26%)</title><rect x="676.3" y="531.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="679.3" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 1.85%)</title><rect x="679.4" y="579.0" width="21.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="682.4" y="590.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.79%)</title><rect x="685.6" y="563.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="688.6" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="691.8" y="547.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="694.8" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="691.8" y="531.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="694.8" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="691.8" y="515.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="694.8" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.53%)</title><rect x="695.0" y="563.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="698.0" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.79%)</title><rect x="701.2" y="579.0" width="9.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="704.2" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (2 samples, 0.53%)</title><rect x="710.5" y="579.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="713.5" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.79%)</title><rect x="716.8" y="579.0" width="9.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="719.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (3 samples, 0.79%)</title><rect x="726.1" y="595.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="729.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.26%)</title><rect x="735.4" y="595.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.26%)</title><rect x="738.5" y="595.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.5" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="741.7" y="611.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="744.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="741.7" y="595.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="744.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="741.7" y="579.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="744.7" y="590.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (1 samples, 0.26%)</title><rect x="744.8" y="627.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="747.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="747.9" y="643.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="750.9" y="654.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.26%)</title><rect x="751.0" y="691.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="754.0" y="702.0"></text>
</g>
<g>
<title>call_stub (4 samples, 1.06%)</title><rect x="754.1" y="691.0" width="12.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="757.1" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (4 samples, 1.06%)</title><rect x="766.6" y="691.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (36 samples, 9.50%)</title><rect x="779.0" y="691.0" width="112.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.0" y="702.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (35 samples, 9.23%)</title><rect x="782.1" y="675.0" width="109.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.1" y="686.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.26%)</title><rect x="782.1" y="659.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.1" y="670.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.26%)</title><rect x="782.1" y="643.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.1" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (34 samples, 8.97%)</title><rect x="785.3" y="659.0" width="105.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.3" y="670.0">org/rocksdb/A..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.26%)</title><rect x="785.3" y="643.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.3" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (33 samples, 8.71%)</title><rect x="788.4" y="643.0" width="102.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.4" y="654.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (31 samples, 8.18%)</title><rect x="794.6" y="627.0" width="96.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.6" y="638.0">org/rocksdb..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (26 samples, 6.86%)</title><rect x="803.9" y="611.0" width="81.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="806.9" y="622.0">Java_org_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.26%)</title><rect x="803.9" y="595.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.9" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.26%)</title><rect x="807.0" y="595.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.0" y="606.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (2 samples, 0.53%)</title><rect x="810.2" y="595.0" width="6.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="813.2" y="606.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.53%)</title><rect x="816.4" y="595.0" width="6.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="819.4" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.53%)</title><rect x="822.6" y="595.0" width="6.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="825.6" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.53%)</title><rect x="822.6" y="579.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="825.7" y="563.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="828.7" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="825.7" y="547.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="828.7" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="825.7" y="531.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="828.7" y="542.0"></text>
</g>
<g>
<title>jni_NewByteArray (13 samples, 3.43%)</title><rect x="828.8" y="595.0" width="40.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="831.8" y="606.0">jni..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.26%)</title><rect x="832.0" y="579.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.0" y="590.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.26%)</title><rect x="835.1" y="579.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.1" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.26%)</title><rect x="838.2" y="579.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="841.2" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.26%)</title><rect x="841.3" y="579.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="844.3" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 2.11%)</title><rect x="844.4" y="579.0" width="24.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.4" y="590.0">T..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 1.85%)</title><rect x="847.5" y="563.0" width="21.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.5" y="574.0">C..</text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 1.85%)</title><rect x="847.5" y="547.0" width="21.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.5" y="558.0">M..</text>
</g>
<g>
<title>__memset_avx2_unaligned (5 samples, 1.32%)</title><rect x="853.7" y="531.0" width="15.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.7" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 1.32%)</title><rect x="869.3" y="595.0" width="15.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="872.3" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.53%)</title><rect x="875.5" y="579.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="878.5" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.26%)</title><rect x="878.7" y="563.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="881.7" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="881.8" y="579.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="884.8" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="881.8" y="563.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="884.8" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="881.8" y="547.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="884.8" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.26%)</title><rect x="884.9" y="611.0" width="3.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="887.9" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="884.9" y="595.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="887.9" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="884.9" y="579.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.9" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="884.9" y="563.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="887.9" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.26%)</title><rect x="888.0" y="611.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="891.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.close (11 samples, 2.90%)</title><rect x="891.1" y="739.0" width="34.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.1" y="750.0">ru..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (11 samples, 2.90%)</title><rect x="891.1" y="723.0" width="34.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="894.1" y="734.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (11 samples, 2.90%)</title><rect x="891.1" y="707.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="894.1" y="718.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (11 samples, 2.90%)</title><rect x="891.1" y="691.0" width="34.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.1" y="702.0">or..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.26%)</title><rect x="891.1" y="675.0" width="3.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="894.1" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="891.1" y="659.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="894.1" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="891.1" y="643.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="894.1" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="891.1" y="627.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="894.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (9 samples, 2.37%)</title><rect x="894.2" y="675.0" width="28.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="897.2" y="686.0">ro..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (6 samples, 1.58%)</title><rect x="897.3" y="659.0" width="18.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.3" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="897.3" y="643.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="900.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (3 samples, 0.79%)</title><rect x="900.4" y="643.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() [clone .plt] (1 samples, 0.26%)</title><rect x="903.6" y="627.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.26%)</title><rect x="906.7" y="627.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.7" y="638.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.26%)</title><rect x="906.7" y="611.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="909.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.26%)</title><rect x="909.8" y="643.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="912.8" y="654.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;unsigned long&gt;*) (1 samples, 0.26%)</title><rect x="912.9" y="643.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="915.9" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="912.9" y="627.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="915.9" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="912.9" y="611.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="915.9" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="912.9" y="595.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="915.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (1 samples, 0.26%)</title><rect x="916.0" y="659.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="919.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() [clone .plt] (1 samples, 0.26%)</title><rect x="919.1" y="659.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() [clone .plt] (1 samples, 0.26%)</title><rect x="922.2" y="675.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="925.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (12 samples, 3.17%)</title><rect x="925.4" y="755.0" width="37.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.4" y="766.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (12 samples, 3.17%)</title><rect x="925.4" y="739.0" width="37.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="928.4" y="750.0">ru/..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (12 samples, 3.17%)</title><rect x="925.4" y="723.0" width="37.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.4" y="734.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (12 samples, 3.17%)</title><rect x="925.4" y="707.0" width="37.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="928.4" y="718.0">org..</text>
</g>
<g>
<title>call_stub (1 samples, 0.26%)</title><rect x="925.4" y="691.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="928.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (8 samples, 2.11%)</title><rect x="928.5" y="691.0" width="24.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.5" y="702.0">r..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.53%)</title><rect x="928.5" y="675.0" width="6.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="931.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (6 samples, 1.58%)</title><rect x="934.7" y="675.0" width="18.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.7" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.26%)</title><rect x="934.7" y="659.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="937.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 1.32%)</title><rect x="937.8" y="659.0" width="15.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.8" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (5 samples, 1.32%)</title><rect x="937.8" y="643.0" width="15.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="940.8" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (5 samples, 1.32%)</title><rect x="937.8" y="627.0" width="15.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="940.8" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.26%)</title><rect x="937.8" y="611.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.8" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 1.06%)</title><rect x="940.9" y="611.0" width="12.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="943.9" y="622.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.26%)</title><rect x="940.9" y="595.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.9" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.79%)</title><rect x="944.0" y="595.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="947.0" y="606.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.26%)</title><rect x="944.0" y="579.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.0" y="590.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.26%)</title><rect x="947.2" y="579.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.2" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="950.3" y="579.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="953.3" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="950.3" y="563.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="953.3" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="950.3" y="547.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="953.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (3 samples, 0.79%)</title><rect x="953.4" y="691.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (3 samples, 0.79%)</title><rect x="953.4" y="675.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.4" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (3 samples, 0.79%)</title><rect x="953.4" y="659.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.4" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (3 samples, 0.79%)</title><rect x="953.4" y="643.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.4" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (3 samples, 0.79%)</title><rect x="953.4" y="627.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.4" y="638.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (3 samples, 0.79%)</title><rect x="953.4" y="611.0" width="9.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="956.4" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.79%)</title><rect x="953.4" y="595.0" width="9.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="956.4" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.26%)</title><rect x="956.5" y="579.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.5" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.26%)</title><rect x="959.6" y="579.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer$FinalizerThread.run (1 samples, 0.26%)</title><rect x="962.7" y="851.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.7" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.26%)</title><rect x="962.7" y="835.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="965.7" y="846.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (1 samples, 0.26%)</title><rect x="962.7" y="819.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="965.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.26%)</title><rect x="962.7" y="803.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (2 samples, 0.53%)</title><rect x="965.8" y="851.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="968.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (2 samples, 0.53%)</title><rect x="965.8" y="835.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="968.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ref/FinalReference.&lt;init&gt; (2 samples, 0.53%)</title><rect x="965.8" y="819.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="968.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.53%)</title><rect x="965.8" y="803.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="968.8" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="968.9" y="787.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="971.9" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="968.9" y="771.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="971.9" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="968.9" y="755.0" width="3.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="971.9" y="766.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.26%)</title><rect x="968.9" y="739.0" width="3.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="971.9" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.26%)</title><rect x="968.9" y="723.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="971.9" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.26%)</title><rect x="968.9" y="707.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="971.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ref/Reference$ReferenceHandler.run (1 samples, 0.26%)</title><rect x="972.1" y="851.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="975.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.processPendingReferences (1 samples, 0.26%)</title><rect x="972.1" y="835.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="975.1" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="972.1" y="819.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="975.1" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="972.1" y="803.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="975.1" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="972.1" y="787.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="975.1" y="798.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (54 samples, 14.25%)</title><rect x="975.2" y="851.0" width="168.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="978.2" y="862.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (16 samples, 4.22%)</title><rect x="978.3" y="835.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="981.3" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (16 samples, 4.22%)</title><rect x="978.3" y="819.0" width="49.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="981.3" y="830.0">one/n..</text>
</g>
<g>
<title>[unknown] (16 samples, 4.22%)</title><rect x="978.3" y="803.0" width="49.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="981.3" y="814.0">[unkn..</text>
</g>
<g>
<title>epoll_wait (16 samples, 4.22%)</title><rect x="978.3" y="787.0" width="49.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="981.3" y="798.0">epoll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 3.69%)</title><rect x="981.4" y="771.0" width="43.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="984.4" y="782.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 3.69%)</title><rect x="981.4" y="755.0" width="43.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="984.4" y="766.0">do_s..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (14 samples, 3.69%)</title><rect x="981.4" y="739.0" width="43.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="984.4" y="750.0">__x6..</text>
</g>
<g>
<title>do_epoll_wait (14 samples, 3.69%)</title><rect x="981.4" y="723.0" width="43.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="984.4" y="734.0">do_e..</text>
</g>
<g>
<title>ep_poll (14 samples, 3.69%)</title><rect x="981.4" y="707.0" width="43.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="984.4" y="718.0">ep_p..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.53%)</title><rect x="984.5" y="691.0" width="6.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="987.5" y="702.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.53%)</title><rect x="984.5" y="675.0" width="6.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="987.5" y="686.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.26%)</title><rect x="984.5" y="659.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="987.5" y="670.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.26%)</title><rect x="987.6" y="659.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="990.6" y="670.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (11 samples, 2.90%)</title><rect x="990.7" y="691.0" width="34.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="993.7" y="702.0">sc..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (11 samples, 2.90%)</title><rect x="990.7" y="675.0" width="34.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="993.7" y="686.0">sc..</text>
</g>
<g>
<title>schedule (11 samples, 2.90%)</title><rect x="990.7" y="659.0" width="34.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="993.7" y="670.0">sc..</text>
</g>
<g>
<title>__sched_text_start (11 samples, 2.90%)</title><rect x="990.7" y="643.0" width="34.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="993.7" y="654.0">__..</text>
</g>
<g>
<title>finish_task_switch (11 samples, 2.90%)</title><rect x="990.7" y="627.0" width="34.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="993.7" y="638.0">fi..</text>
</g>
<g>
<title>put_task_stack (1 samples, 0.26%)</title><rect x="1021.9" y="611.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1024.9" y="622.0"></text>
</g>
<g>
<title>vfree_atomic (1 samples, 0.26%)</title><rect x="1021.9" y="595.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1024.9" y="606.0"></text>
</g>
<g>
<title>queue_work_on (1 samples, 0.26%)</title><rect x="1021.9" y="579.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1024.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="1025.0" y="771.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1028.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="1025.0" y="755.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1028.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="1025.0" y="739.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1028.0" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (37 samples, 9.76%)</title><rect x="1028.1" y="835.0" width="115.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1031.1" y="846.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (37 samples, 9.76%)</title><rect x="1028.1" y="819.0" width="115.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.1" y="830.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (24 samples, 6.33%)</title><rect x="1028.1" y="803.0" width="74.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.1" y="814.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (21 samples, 5.54%)</title><rect x="1028.1" y="787.0" width="65.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1031.1" y="798.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (21 samples, 5.54%)</title><rect x="1028.1" y="771.0" width="65.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1031.1" y="782.0">one/nio..</text>
</g>
<g>
<title>RequestHandler2_getValueByKey.handleRequest (19 samples, 5.01%)</title><rect x="1031.2" y="755.0" width="59.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.2" y="766.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.79%)</title><rect x="1031.2" y="739.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1034.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.79%)</title><rect x="1031.2" y="723.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.79%)</title><rect x="1031.2" y="707.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1034.2" y="718.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.26%)</title><rect x="1037.4" y="691.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1040.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyAsyncHttpServerImpl.getValueByKey (16 samples, 4.22%)</title><rect x="1040.6" y="739.0" width="49.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1043.6" y="750.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 4.22%)</title><rect x="1040.6" y="723.0" width="49.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.6" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (16 samples, 4.22%)</title><rect x="1040.6" y="707.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.6" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.26%)</title><rect x="1040.6" y="691.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.26%)</title><rect x="1040.6" y="675.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1043.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.26%)</title><rect x="1040.6" y="659.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.26%)</title><rect x="1040.6" y="643.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.26%)</title><rect x="1040.6" y="627.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1043.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.26%)</title><rect x="1040.6" y="611.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1043.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 3.96%)</title><rect x="1043.7" y="691.0" width="46.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1046.7" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 3.96%)</title><rect x="1043.7" y="675.0" width="46.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.7" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 3.96%)</title><rect x="1043.7" y="659.0" width="46.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.7" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 3.96%)</title><rect x="1043.7" y="643.0" width="46.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.7" y="654.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 3.96%)</title><rect x="1043.7" y="627.0" width="46.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.7" y="638.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.26%)</title><rect x="1043.7" y="611.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1046.7" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 3.69%)</title><rect x="1046.8" y="611.0" width="43.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1049.8" y="622.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 3.69%)</title><rect x="1046.8" y="595.0" width="43.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1049.8" y="606.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 3.69%)</title><rect x="1046.8" y="579.0" width="43.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1049.8" y="590.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 3.43%)</title><rect x="1049.9" y="563.0" width="40.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1052.9" y="574.0">__x..</text>
</g>
<g>
<title>do_futex (13 samples, 3.43%)</title><rect x="1049.9" y="547.0" width="40.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1052.9" y="558.0">do_..</text>
</g>
<g>
<title>futex_wake (13 samples, 3.43%)</title><rect x="1049.9" y="531.0" width="40.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1052.9" y="542.0">fut..</text>
</g>
<g>
<title>wake_up_q (11 samples, 2.90%)</title><rect x="1056.1" y="515.0" width="34.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1059.1" y="526.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (11 samples, 2.90%)</title><rect x="1056.1" y="499.0" width="34.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1059.1" y="510.0">tr..</text>
</g>
<g>
<title>__lock_text_start (11 samples, 2.90%)</title><rect x="1056.1" y="483.0" width="34.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1059.1" y="494.0">__..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.26%)</title><rect x="1090.4" y="755.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1093.4" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="1090.4" y="739.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1093.4" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="1090.4" y="723.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1093.4" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="1090.4" y="707.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1093.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.53%)</title><rect x="1093.5" y="787.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1096.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.53%)</title><rect x="1093.5" y="771.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.5" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.26%)</title><rect x="1096.6" y="755.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1099.6" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.26%)</title><rect x="1096.6" y="739.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1099.6" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.26%)</title><rect x="1096.6" y="723.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1099.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.26%)</title><rect x="1099.7" y="787.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1102.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 3.43%)</title><rect x="1102.8" y="803.0" width="40.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1105.8" y="814.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 3.43%)</title><rect x="1102.8" y="787.0" width="40.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.8" y="798.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.79%)</title><rect x="1102.8" y="771.0" width="9.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1105.8" y="782.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (2 samples, 0.53%)</title><rect x="1102.8" y="755.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1105.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.26%)</title><rect x="1109.1" y="755.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1112.1" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.26%)</title><rect x="1109.1" y="739.0" width="3.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1112.1" y="750.0"></text>
</g>
<g>
<title>__recv (9 samples, 2.37%)</title><rect x="1112.2" y="771.0" width="28.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1115.2" y="782.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.58%)</title><rect x="1121.5" y="755.0" width="18.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1124.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 1.58%)</title><rect x="1121.5" y="739.0" width="18.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (6 samples, 1.58%)</title><rect x="1121.5" y="723.0" width="18.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1124.5" y="734.0"></text>
</g>
<g>
<title>__sys_recvfrom (5 samples, 1.32%)</title><rect x="1121.5" y="707.0" width="15.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1124.5" y="718.0"></text>
</g>
<g>
<title>sock_recvmsg (3 samples, 0.79%)</title><rect x="1121.5" y="691.0" width="9.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1124.5" y="702.0"></text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 0.79%)</title><rect x="1121.5" y="675.0" width="9.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1124.5" y="686.0"></text>
</g>
<g>
<title>tcp_recvmsg (3 samples, 0.79%)</title><rect x="1121.5" y="659.0" width="9.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1124.5" y="670.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.26%)</title><rect x="1121.5" y="643.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1124.5" y="654.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.26%)</title><rect x="1121.5" y="627.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1124.5" y="638.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.26%)</title><rect x="1121.5" y="611.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1124.5" y="622.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.26%)</title><rect x="1121.5" y="595.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1124.5" y="606.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.26%)</title><rect x="1124.6" y="643.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1127.6" y="654.0"></text>
</g>
<g>
<title>tcp_send_ack (1 samples, 0.26%)</title><rect x="1124.6" y="627.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1127.6" y="638.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.46 (1 samples, 0.26%)</title><rect x="1124.6" y="611.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1127.6" y="622.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.26%)</title><rect x="1124.6" y="595.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1127.6" y="606.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.26%)</title><rect x="1124.6" y="579.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1127.6" y="590.0"></text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.26%)</title><rect x="1124.6" y="563.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1127.6" y="574.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.26%)</title><rect x="1124.6" y="547.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1127.6" y="558.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.26%)</title><rect x="1124.6" y="531.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1127.6" y="542.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.26%)</title><rect x="1124.6" y="515.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1127.6" y="526.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.26%)</title><rect x="1124.6" y="499.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1127.6" y="510.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.26%)</title><rect x="1124.6" y="483.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1127.6" y="494.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.26%)</title><rect x="1124.6" y="467.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1127.6" y="478.0"></text>
</g>
<g>
<title>do_softirq.part.20 (1 samples, 0.26%)</title><rect x="1124.6" y="451.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1127.6" y="462.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.26%)</title><rect x="1124.6" y="435.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1127.6" y="446.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.26%)</title><rect x="1124.6" y="419.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1127.6" y="430.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.26%)</title><rect x="1124.6" y="403.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1127.6" y="414.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.26%)</title><rect x="1124.6" y="387.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1127.6" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.26%)</title><rect x="1124.6" y="371.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1127.6" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.26%)</title><rect x="1124.6" y="355.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1127.6" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.26%)</title><rect x="1124.6" y="339.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1127.6" y="350.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.26%)</title><rect x="1127.7" y="643.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1130.7" y="654.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.26%)</title><rect x="1127.7" y="627.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1130.7" y="638.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.26%)</title><rect x="1127.7" y="611.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1130.7" y="622.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.26%)</title><rect x="1127.7" y="595.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1130.7" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.53%)</title><rect x="1130.8" y="691.0" width="6.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1133.8" y="702.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.53%)</title><rect x="1130.8" y="675.0" width="6.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1133.8" y="686.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.53%)</title><rect x="1130.8" y="659.0" width="6.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1133.8" y="670.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.26%)</title><rect x="1137.1" y="707.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.26%)</title><rect x="1140.2" y="771.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1143.2" y="782.0"></text>
</g>
<g>
<title>start_thread (15 samples, 3.96%)</title><rect x="1143.3" y="851.0" width="46.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1146.3" y="862.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 3.96%)</title><rect x="1143.3" y="835.0" width="46.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1146.3" y="846.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (15 samples, 3.96%)</title><rect x="1143.3" y="819.0" width="46.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="830.0">Thre..</text>
</g>
<g>
<title>JavaThread::run() (15 samples, 3.96%)</title><rect x="1143.3" y="803.0" width="46.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="814.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (15 samples, 3.96%)</title><rect x="1143.3" y="787.0" width="46.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="798.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (15 samples, 3.96%)</title><rect x="1143.3" y="771.0" width="46.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="782.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (15 samples, 3.96%)</title><rect x="1143.3" y="755.0" width="46.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="766.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (15 samples, 3.96%)</title><rect x="1143.3" y="739.0" width="46.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="750.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (9 samples, 2.37%)</title><rect x="1143.3" y="723.0" width="28.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.3" y="734.0">Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.26%)</title><rect x="1143.3" y="707.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="718.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.26%)</title><rect x="1143.3" y="691.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.26%)</title><rect x="1146.4" y="707.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.4" y="718.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.26%)</title><rect x="1146.4" y="691.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.4" y="702.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.26%)</title><rect x="1149.5" y="707.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.26%)</title><rect x="1149.5" y="691.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="702.0"></text>
</g>
<g>
<title>jmpConNode::ideal_Opcode() const (1 samples, 0.26%)</title><rect x="1149.5" y="675.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.26%)</title><rect x="1152.6" y="707.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 1.32%)</title><rect x="1155.8" y="707.0" width="15.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.26%)</title><rect x="1155.8" y="691.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.8" y="702.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.26%)</title><rect x="1155.8" y="675.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.26%)</title><rect x="1158.9" y="691.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.26%)</title><rect x="1158.9" y="675.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.26%)</title><rect x="1162.0" y="691.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.26%)</title><rect x="1162.0" y="675.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.26%)</title><rect x="1162.0" y="659.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.26%)</title><rect x="1165.1" y="691.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.1" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.26%)</title><rect x="1168.2" y="691.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 1.32%)</title><rect x="1171.3" y="723.0" width="15.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="734.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (1 samples, 0.26%)</title><rect x="1171.3" y="707.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.26%)</title><rect x="1171.3" y="691.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.26%)</title><rect x="1171.3" y="675.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.26%)</title><rect x="1171.3" y="659.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.26%)</title><rect x="1171.3" y="643.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.53%)</title><rect x="1174.4" y="707.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.53%)</title><rect x="1174.4" y="691.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.53%)</title><rect x="1174.4" y="675.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.53%)</title><rect x="1174.4" y="659.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.53%)</title><rect x="1174.4" y="643.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.53%)</title><rect x="1174.4" y="627.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.26%)</title><rect x="1174.4" y="611.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="622.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.242] (1 samples, 0.26%)</title><rect x="1174.4" y="595.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="611.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="595.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="579.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="563.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="547.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1177.5" y="531.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.26%)</title><rect x="1177.5" y="515.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.26%)</title><rect x="1180.7" y="707.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.26%)</title><rect x="1183.8" y="707.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.26%)</title><rect x="1183.8" y="691.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1183.8" y="675.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1186.9" y="723.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1186.9" y="707.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1186.9" y="691.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1186.9" y="675.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1186.9" y="659.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1186.9" y="643.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1186.9" y="627.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1186.9" y="611.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1186.9" y="595.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1186.9" y="579.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1186.9" y="563.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1186.9" y="547.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1186.9" y="531.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1186.9" y="515.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1186.9" y="499.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1186.9" y="483.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1186.9" y="467.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1186.9" y="451.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1186.9" y="435.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1186.9" y="419.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.26%)</title><rect x="1186.9" y="403.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.26%)</title><rect x="1186.9" y="387.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.9" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1186.9" y="371.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1186.9" y="355.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1186.9" y="339.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1186.9" y="323.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="334.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1186.9" y="307.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="318.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.26%)</title><rect x="1186.9" y="291.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.9" y="302.0"></text>
</g>
</g>
</svg>
