<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1317"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1317"> </text>
<g id="frames">
<g>
<title>all (534 samples, 100.00%)</title><rect x="10.0" y="1283.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.75%)</title><rect x="10.0" y="1267.0" width="8.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.19%)</title><rect x="10.0" y="1251.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.19%)</title><rect x="10.0" y="1235.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.19%)</title><rect x="10.0" y="1219.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.19%)</title><rect x="10.0" y="1203.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.19%)</title><rect x="10.0" y="1187.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="10.0" y="1171.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="10.0" y="1155.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="10.0" y="1139.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.56%)</title><rect x="12.2" y="1251.0" width="6.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.2" y="1262.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 1.50%)</title><rect x="18.8" y="1267.0" width="17.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="21.8" y="1278.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (7 samples, 1.31%)</title><rect x="18.8" y="1251.0" width="15.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="21.8" y="1262.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (7 samples, 1.31%)</title><rect x="18.8" y="1235.0" width="15.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.8" y="1246.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.31%)</title><rect x="18.8" y="1219.0" width="15.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.8" y="1230.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.31%)</title><rect x="18.8" y="1203.0" width="15.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.8" y="1214.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.31%)</title><rect x="18.8" y="1187.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.8" y="1198.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (7 samples, 1.31%)</title><rect x="18.8" y="1171.0" width="15.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.8" y="1182.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (7 samples, 1.31%)</title><rect x="18.8" y="1155.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.8" y="1166.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (7 samples, 1.31%)</title><rect x="18.8" y="1139.0" width="15.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.8" y="1150.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 1.31%)</title><rect x="18.8" y="1123.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 1.31%)</title><rect x="18.8" y="1107.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.31%)</title><rect x="18.8" y="1091.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.8" y="1102.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 1.31%)</title><rect x="18.8" y="1075.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.8" y="1086.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 1.31%)</title><rect x="18.8" y="1059.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="21.8" y="1070.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (7 samples, 1.31%)</title><rect x="18.8" y="1043.0" width="15.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="21.8" y="1054.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (7 samples, 1.31%)</title><rect x="18.8" y="1027.0" width="15.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="21.8" y="1038.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (7 samples, 1.31%)</title><rect x="18.8" y="1011.0" width="15.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="21.8" y="1022.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 1.31%)</title><rect x="18.8" y="995.0" width="15.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.8" y="1006.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 1.31%)</title><rect x="18.8" y="979.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="21.8" y="990.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.75%)</title><rect x="18.8" y="963.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.8" y="974.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.75%)</title><rect x="18.8" y="947.0" width="8.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="21.8" y="958.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.75%)</title><rect x="18.8" y="931.0" width="8.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="21.8" y="942.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.75%)</title><rect x="18.8" y="915.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.8" y="926.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.19%)</title><rect x="18.8" y="899.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.8" y="910.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.37%)</title><rect x="21.0" y="899.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.0" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="25.5" y="899.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="28.5" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="25.5" y="883.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="28.5" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="25.5" y="867.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="28.5" y="878.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.56%)</title><rect x="27.7" y="963.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="30.7" y="974.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.56%)</title><rect x="27.7" y="947.0" width="6.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="30.7" y="958.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.56%)</title><rect x="27.7" y="931.0" width="6.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="30.7" y="942.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.37%)</title><rect x="27.7" y="915.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="30.7" y="926.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.19%)</title><rect x="32.1" y="915.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="35.1" y="926.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.19%)</title><rect x="32.1" y="899.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.1" y="910.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.19%)</title><rect x="34.3" y="1251.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="37.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (378 samples, 70.79%)</title><rect x="36.5" y="1267.0" width="835.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.5" y="1278.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (378 samples, 70.79%)</title><rect x="36.5" y="1251.0" width="835.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.5" y="1262.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (378 samples, 70.79%)</title><rect x="36.5" y="1235.0" width="835.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.5" y="1246.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.37%)</title><rect x="36.5" y="1219.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.37%)</title><rect x="36.5" y="1203.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.37%)</title><rect x="36.5" y="1187.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.37%)</title><rect x="36.5" y="1171.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (38 samples, 7.12%)</title><rect x="40.9" y="1219.0" width="84.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.9" y="1230.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (38 samples, 7.12%)</title><rect x="40.9" y="1203.0" width="84.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.9" y="1214.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (28 samples, 5.24%)</title><rect x="40.9" y="1187.0" width="61.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.9" y="1198.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (26 samples, 4.87%)</title><rect x="43.1" y="1171.0" width="57.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="46.1" y="1182.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (26 samples, 4.87%)</title><rect x="43.1" y="1155.0" width="57.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.1" y="1166.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park (10 samples, 1.87%)</title><rect x="43.1" y="1139.0" width="22.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="46.1" y="1150.0">U..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.19%)</title><rect x="45.4" y="1123.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="48.4" y="1134.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.19%)</title><rect x="47.6" y="1123.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="50.6" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.19%)</title><rect x="47.6" y="1107.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="50.6" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.94%)</title><rect x="49.8" y="1123.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="52.8" y="1134.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.37%)</title><rect x="56.4" y="1107.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="59.4" y="1118.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.37%)</title><rect x="56.4" y="1091.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="59.4" y="1102.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.19%)</title><rect x="58.6" y="1075.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="61.6" y="1086.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.19%)</title><rect x="58.6" y="1059.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="61.6" y="1070.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="60.8" y="1123.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="63.8" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.19%)</title><rect x="63.0" y="1123.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="66.0" y="1134.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 2.81%)</title><rect x="65.2" y="1139.0" width="33.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="68.2" y="1150.0">[u..</text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (15 samples, 2.81%)</title><rect x="65.2" y="1123.0" width="33.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="68.2" y="1134.0">pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 2.06%)</title><rect x="71.9" y="1107.0" width="24.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="74.9" y="1118.0">e..</text>
</g>
<g>
<title>do_syscall_64 (11 samples, 2.06%)</title><rect x="71.9" y="1091.0" width="24.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="74.9" y="1102.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 1.87%)</title><rect x="74.1" y="1075.0" width="22.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.1" y="1086.0">_..</text>
</g>
<g>
<title>do_futex (10 samples, 1.87%)</title><rect x="74.1" y="1059.0" width="22.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.1" y="1070.0">d..</text>
</g>
<g>
<title>futex_wait (10 samples, 1.87%)</title><rect x="74.1" y="1043.0" width="22.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="77.1" y="1054.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (10 samples, 1.87%)</title><rect x="74.1" y="1027.0" width="22.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.1" y="1038.0">f..</text>
</g>
<g>
<title>schedule (10 samples, 1.87%)</title><rect x="74.1" y="1011.0" width="22.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="77.1" y="1022.0">s..</text>
</g>
<g>
<title>__sched_text_start (10 samples, 1.87%)</title><rect x="74.1" y="995.0" width="22.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="77.1" y="1006.0">_..</text>
</g>
<g>
<title>finish_task_switch (10 samples, 1.87%)</title><rect x="74.1" y="979.0" width="22.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="77.1" y="990.0">f..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="96.2" y="1107.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="99.2" y="1118.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="96.2" y="1091.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="99.2" y="1102.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="96.2" y="1075.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="99.2" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.19%)</title><rect x="98.4" y="1139.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="101.4" y="1150.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="98.4" y="1123.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="101.4" y="1134.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="98.4" y="1107.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="101.4" y="1118.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="98.4" y="1091.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="101.4" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="100.6" y="1171.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="103.6" y="1182.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="100.6" y="1155.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="103.6" y="1166.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="100.6" y="1139.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="103.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 1.87%)</title><rect x="102.8" y="1187.0" width="22.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.8" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.87%)</title><rect x="102.8" y="1171.0" width="22.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.87%)</title><rect x="102.8" y="1155.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.8" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.87%)</title><rect x="102.8" y="1139.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.8" y="1150.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 1.87%)</title><rect x="102.8" y="1123.0" width="22.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.8" y="1134.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.19%)</title><rect x="102.8" y="1107.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="105.8" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.19%)</title><rect x="102.8" y="1091.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="105.8" y="1102.0"></text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 1.69%)</title><rect x="105.0" y="1107.0" width="19.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="108.0" y="1118.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 1.69%)</title><rect x="105.0" y="1091.0" width="19.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="108.0" y="1102.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 1.69%)</title><rect x="105.0" y="1075.0" width="19.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="108.0" y="1086.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 1.69%)</title><rect x="105.0" y="1059.0" width="19.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="108.0" y="1070.0"></text>
</g>
<g>
<title>do_futex (9 samples, 1.69%)</title><rect x="105.0" y="1043.0" width="19.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="108.0" y="1054.0"></text>
</g>
<g>
<title>futex_wake (9 samples, 1.69%)</title><rect x="105.0" y="1027.0" width="19.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="108.0" y="1038.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 1.69%)</title><rect x="105.0" y="1011.0" width="19.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="108.0" y="1022.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 1.69%)</title><rect x="105.0" y="995.0" width="19.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="108.0" y="1006.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 1.69%)</title><rect x="105.0" y="979.0" width="19.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="108.0" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl$$Lambda$69/887437128.run (338 samples, 63.30%)</title><rect x="124.9" y="1219.0" width="746.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.9" y="1230.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl$$Lambda$69/887437128.run</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.lambda$executeAsync$4 (338 samples, 63.30%)</title><rect x="124.9" y="1203.0" width="746.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.9" y="1214.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.makeAct (338 samples, 63.30%)</title><rect x="124.9" y="1187.0" width="746.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.9" y="1198.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl.makeAct</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl$$Lambda$67/1331986774.act (338 samples, 63.30%)</title><rect x="124.9" y="1171.0" width="746.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.9" y="1182.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl$$Lambda$67/1331986774.act</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.lambda$putValueByKey$2 (337 samples, 63.11%)</title><rect x="127.1" y="1155.0" width="744.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.1" y="1166.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl.lambda$putValueByKey$2</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.put (337 samples, 63.11%)</title><rect x="127.1" y="1139.0" width="744.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="130.1" y="1150.0">ru/mail/polis/service/basta123/AsyncHttpServerImpl.put</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (63 samples, 11.80%)</title><rect x="127.1" y="1123.0" width="139.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.1" y="1134.0">one/nio/http/Http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.37%)</title><rect x="129.3" y="1107.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.37%)</title><rect x="129.3" y="1091.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.37%)</title><rect x="129.3" y="1075.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.3" y="1086.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.37%)</title><rect x="129.3" y="1059.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="132.3" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.37%)</title><rect x="129.3" y="1043.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="132.3" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (57 samples, 10.67%)</title><rect x="133.7" y="1107.0" width="126.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.7" y="1118.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.37%)</title><rect x="133.7" y="1091.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.19%)</title><rect x="136.0" y="1075.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.0" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.19%)</title><rect x="136.0" y="1059.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.19%)</title><rect x="136.0" y="1043.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.0" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.19%)</title><rect x="136.0" y="1027.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="139.0" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="136.0" y="1011.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="139.0" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="136.0" y="995.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="139.0" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="136.0" y="979.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="139.0" y="990.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.19%)</title><rect x="136.0" y="963.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="139.0" y="974.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.19%)</title><rect x="136.0" y="947.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="139.0" y="958.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.19%)</title><rect x="136.0" y="931.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="139.0" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 10.30%)</title><rect x="138.2" y="1091.0" width="121.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.2" y="1102.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 10.30%)</title><rect x="138.2" y="1075.0" width="121.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.2" y="1086.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (55 samples, 10.30%)</title><rect x="138.2" y="1059.0" width="121.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.2" y="1070.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (55 samples, 10.30%)</title><rect x="138.2" y="1043.0" width="121.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.2" y="1054.0">one/nio/net/Nat..</text>
</g>
<g>
<title>__send (55 samples, 10.30%)</title><rect x="138.2" y="1027.0" width="121.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="141.2" y="1038.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (54 samples, 10.11%)</title><rect x="140.4" y="1011.0" width="119.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="143.4" y="1022.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (54 samples, 10.11%)</title><rect x="140.4" y="995.0" width="119.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="143.4" y="1006.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (53 samples, 9.93%)</title><rect x="140.4" y="979.0" width="117.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="143.4" y="990.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (53 samples, 9.93%)</title><rect x="140.4" y="963.0" width="117.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="143.4" y="974.0">__sys_sendto</text>
</g>
<g>
<title>__fdget (1 samples, 0.19%)</title><rect x="142.6" y="947.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="145.6" y="958.0"></text>
</g>
<g>
<title>sock_sendmsg (51 samples, 9.55%)</title><rect x="144.8" y="947.0" width="112.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="147.8" y="958.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.19%)</title><rect x="144.8" y="931.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="147.8" y="942.0"></text>
</g>
<g>
<title>inet6_sendmsg (49 samples, 9.18%)</title><rect x="147.0" y="931.0" width="108.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="150.0" y="942.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (49 samples, 9.18%)</title><rect x="147.0" y="915.0" width="108.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="150.0" y="926.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (49 samples, 9.18%)</title><rect x="147.0" y="899.0" width="108.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="150.0" y="910.0">tcp_sendmsg_l..</text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.19%)</title><rect x="149.2" y="883.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="152.2" y="894.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.56%)</title><rect x="151.4" y="883.0" width="6.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="154.4" y="894.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.56%)</title><rect x="151.4" y="867.0" width="6.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="154.4" y="878.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.37%)</title><rect x="151.4" y="851.0" width="4.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.4" y="862.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.19%)</title><rect x="151.4" y="835.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="154.4" y="846.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.19%)</title><rect x="151.4" y="819.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.4" y="830.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.19%)</title><rect x="153.6" y="835.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="156.6" y="846.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.19%)</title><rect x="155.8" y="851.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="158.8" y="862.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.19%)</title><rect x="155.8" y="835.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="158.8" y="846.0"></text>
</g>
<g>
<title>tcp_push (44 samples, 8.24%)</title><rect x="158.1" y="883.0" width="97.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="161.1" y="894.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (44 samples, 8.24%)</title><rect x="158.1" y="867.0" width="97.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="161.1" y="878.0">__tcp_push_..</text>
</g>
<g>
<title>tcp_write_xmit (44 samples, 8.24%)</title><rect x="158.1" y="851.0" width="97.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="161.1" y="862.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_transmit_skb (40 samples, 7.49%)</title><rect x="160.3" y="835.0" width="88.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="163.3" y="846.0">__tcp_tran..</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.19%)</title><rect x="160.3" y="819.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="163.3" y="830.0"></text>
</g>
<g>
<title>ip_queue_xmit (39 samples, 7.30%)</title><rect x="162.5" y="819.0" width="86.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="165.5" y="830.0">ip_queue_x..</text>
</g>
<g>
<title>__ip_queue_xmit (38 samples, 7.12%)</title><rect x="162.5" y="803.0" width="83.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="165.5" y="814.0">__ip_queu..</text>
</g>
<g>
<title>ip_local_out (37 samples, 6.93%)</title><rect x="162.5" y="787.0" width="81.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="165.5" y="798.0">ip_local_..</text>
</g>
<g>
<title>ip_output (37 samples, 6.93%)</title><rect x="162.5" y="771.0" width="81.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="165.5" y="782.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (37 samples, 6.93%)</title><rect x="162.5" y="755.0" width="81.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="165.5" y="766.0">ip_finish..</text>
</g>
<g>
<title>__ip_finish_output (37 samples, 6.93%)</title><rect x="162.5" y="739.0" width="81.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="165.5" y="750.0">__ip_fini..</text>
</g>
<g>
<title>ip_finish_output2 (37 samples, 6.93%)</title><rect x="162.5" y="723.0" width="81.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="165.5" y="734.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (31 samples, 5.81%)</title><rect x="164.7" y="707.0" width="68.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="167.7" y="718.0">__local..</text>
</g>
<g>
<title>do_softirq.part.20 (31 samples, 5.81%)</title><rect x="164.7" y="691.0" width="68.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="167.7" y="702.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (31 samples, 5.81%)</title><rect x="164.7" y="675.0" width="68.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="167.7" y="686.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (31 samples, 5.81%)</title><rect x="164.7" y="659.0" width="68.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="167.7" y="670.0">__softi..</text>
</g>
<g>
<title>net_rx_action (30 samples, 5.62%)</title><rect x="166.9" y="643.0" width="66.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="169.9" y="654.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (30 samples, 5.62%)</title><rect x="166.9" y="627.0" width="66.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="169.9" y="638.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (30 samples, 5.62%)</title><rect x="166.9" y="611.0" width="66.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="169.9" y="622.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (30 samples, 5.62%)</title><rect x="166.9" y="595.0" width="66.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="169.9" y="606.0">__netif..</text>
</g>
<g>
<title>ip_rcv (30 samples, 5.62%)</title><rect x="166.9" y="579.0" width="66.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="169.9" y="590.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (30 samples, 5.62%)</title><rect x="166.9" y="563.0" width="66.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="169.9" y="574.0">ip_rcv_..</text>
</g>
<g>
<title>ip_local_deliver (30 samples, 5.62%)</title><rect x="166.9" y="547.0" width="66.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="169.9" y="558.0">ip_loca..</text>
</g>
<g>
<title>ip_local_deliver_finish (30 samples, 5.62%)</title><rect x="166.9" y="531.0" width="66.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="169.9" y="542.0">ip_loca..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (30 samples, 5.62%)</title><rect x="166.9" y="515.0" width="66.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="169.9" y="526.0">ip_prot..</text>
</g>
<g>
<title>tcp_v4_rcv (29 samples, 5.43%)</title><rect x="169.1" y="499.0" width="64.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="172.1" y="510.0">tcp_v4_..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.19%)</title><rect x="169.1" y="483.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="172.1" y="494.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.19%)</title><rect x="171.3" y="483.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="174.3" y="494.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.19%)</title><rect x="171.3" y="467.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="174.3" y="478.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (27 samples, 5.06%)</title><rect x="173.5" y="483.0" width="59.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="176.5" y="494.0">tcp_v4..</text>
</g>
<g>
<title>tcp_rcv_established (27 samples, 5.06%)</title><rect x="173.5" y="467.0" width="59.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="176.5" y="478.0">tcp_rc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.19%)</title><rect x="175.7" y="451.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="178.7" y="462.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.19%)</title><rect x="175.7" y="435.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="178.7" y="446.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.19%)</title><rect x="175.7" y="419.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="178.7" y="430.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.19%)</title><rect x="175.7" y="403.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="178.7" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.19%)</title><rect x="175.7" y="387.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="178.7" y="398.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.37%)</title><rect x="177.9" y="451.0" width="4.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.9" y="462.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.37%)</title><rect x="177.9" y="435.0" width="4.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="180.9" y="446.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.19%)</title><rect x="180.1" y="419.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="183.1" y="430.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.19%)</title><rect x="180.1" y="403.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="183.1" y="414.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.19%)</title><rect x="180.1" y="387.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="183.1" y="398.0"></text>
</g>
<g>
<title>tcp_data_ready (23 samples, 4.31%)</title><rect x="182.4" y="451.0" width="50.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="185.4" y="462.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (23 samples, 4.31%)</title><rect x="182.4" y="435.0" width="50.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="185.4" y="446.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (23 samples, 4.31%)</title><rect x="182.4" y="419.0" width="50.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="185.4" y="430.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (23 samples, 4.31%)</title><rect x="182.4" y="403.0" width="50.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="185.4" y="414.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (23 samples, 4.31%)</title><rect x="182.4" y="387.0" width="50.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="185.4" y="398.0">__loc..</text>
</g>
<g>
<title>dev_queue_xmit (5 samples, 0.94%)</title><rect x="233.2" y="707.0" width="11.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="236.2" y="718.0"></text>
</g>
<g>
<title>__dev_queue_xmit (5 samples, 0.94%)</title><rect x="233.2" y="691.0" width="11.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="236.2" y="702.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.56%)</title><rect x="233.2" y="675.0" width="6.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="236.2" y="686.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.19%)</title><rect x="233.2" y="659.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="236.2" y="670.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.37%)</title><rect x="235.4" y="659.0" width="4.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="238.4" y="670.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.37%)</title><rect x="235.4" y="643.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="238.4" y="654.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.37%)</title><rect x="239.8" y="675.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="242.8" y="686.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.19%)</title><rect x="239.8" y="659.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="242.8" y="670.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.19%)</title><rect x="242.0" y="659.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="245.0" y="670.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.19%)</title><rect x="244.2" y="787.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="247.2" y="798.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.19%)</title><rect x="246.4" y="803.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="249.4" y="814.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.19%)</title><rect x="248.7" y="835.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="251.7" y="846.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.19%)</title><rect x="250.9" y="835.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="253.9" y="846.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.19%)</title><rect x="250.9" y="819.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="253.9" y="830.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.19%)</title><rect x="250.9" y="803.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="253.9" y="814.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.19%)</title><rect x="250.9" y="787.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="253.9" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.19%)</title><rect x="250.9" y="771.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="253.9" y="782.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.19%)</title><rect x="253.1" y="835.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="256.1" y="846.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.19%)</title><rect x="255.3" y="931.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="258.3" y="942.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.19%)</title><rect x="255.3" y="915.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="258.3" y="926.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.19%)</title><rect x="255.3" y="899.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="258.3" y="910.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.19%)</title><rect x="255.3" y="883.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="258.3" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="257.5" y="979.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="260.5" y="990.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.19%)</title><rect x="257.5" y="963.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="260.5" y="974.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.19%)</title><rect x="257.5" y="947.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="260.5" y="958.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.19%)</title><rect x="257.5" y="931.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="260.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.37%)</title><rect x="259.7" y="1107.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.7" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="264.1" y="1107.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="267.1" y="1118.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="264.1" y="1091.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="267.1" y="1102.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="264.1" y="1075.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="267.1" y="1086.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.19%)</title><rect x="264.1" y="1059.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="267.1" y="1070.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.19%)</title><rect x="264.1" y="1043.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="267.1" y="1054.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.19%)</title><rect x="264.1" y="1027.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="267.1" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/DAORocksDB.upsert (224 samples, 41.95%)</title><rect x="266.3" y="1123.0" width="495.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.3" y="1134.0">ru/mail/polis/dao/basta123/DAORocksDB.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (224 samples, 41.95%)</title><rect x="266.3" y="1107.0" width="495.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.3" y="1118.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (224 samples, 41.95%)</title><rect x="266.3" y="1091.0" width="495.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="269.3" y="1102.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.37%)</title><rect x="266.3" y="1075.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.3" y="1086.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (149 samples, 27.90%)</title><rect x="270.7" y="1075.0" width="329.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.7" y="1086.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.19%)</title><rect x="270.7" y="1059.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="273.7" y="1070.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.19%)</title><rect x="273.0" y="1059.0" width="2.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="276.0" y="1070.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (146 samples, 27.34%)</title><rect x="275.2" y="1059.0" width="322.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="278.2" y="1070.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (146 samples, 27.34%)</title><rect x="275.2" y="1043.0" width="322.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.2" y="1054.0">rocksdb::DB::Put(rocksdb::WriteOptions const..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (146 samples, 27.34%)</title><rect x="275.2" y="1027.0" width="322.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.2" y="1038.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions c..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (145 samples, 27.15%)</title><rect x="275.2" y="1011.0" width="320.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="278.2" y="1022.0">rocksdb::DB::Put(rocksdb::WriteOptions cons..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (142 samples, 26.59%)</title><rect x="275.2" y="995.0" width="313.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="278.2" y="1006.0">rocksdb::DBImpl::Write(rocksdb::WriteOptio..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.19%)</title><rect x="275.2" y="979.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="278.2" y="990.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="275.2" y="963.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="278.2" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="275.2" y="947.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="278.2" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="275.2" y="931.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="278.2" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="277.4" y="979.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="280.4" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (135 samples, 25.28%)</title><rect x="279.6" y="979.0" width="298.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="282.6" y="990.0">rocksdb::DBImpl::WriteImpl(rocksdb::Writ..</text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.75%)</title><rect x="284.0" y="963.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="287.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (6 samples, 1.12%)</title><rect x="292.8" y="963.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="295.8" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (5 samples, 0.94%)</title><rect x="292.8" y="947.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="295.8" y="958.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 0.94%)</title><rect x="292.8" y="931.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.8" y="942.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (2 samples, 0.37%)</title><rect x="292.8" y="915.0" width="4.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="295.8" y="926.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (2 samples, 0.37%)</title><rect x="297.3" y="915.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.3" y="926.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.19%)</title><rect x="299.5" y="899.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="302.5" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="299.5" y="883.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="302.5" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="299.5" y="867.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="302.5" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="299.5" y="851.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="302.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.19%)</title><rect x="301.7" y="915.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="304.7" y="926.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.19%)</title><rect x="301.7" y="899.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="304.7" y="910.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.19%)</title><rect x="303.9" y="947.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="306.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.19%)</title><rect x="306.1" y="963.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="309.1" y="974.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (91 samples, 17.04%)</title><rect x="308.3" y="963.0" width="201.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="311.3" y="974.0">rocksdb::WriteBatchInterna..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (90 samples, 16.85%)</title><rect x="308.3" y="947.0" width="198.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="311.3" y="958.0">rocksdb::WriteBatch::Itera..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.19%)</title><rect x="308.3" y="931.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.3" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (89 samples, 16.67%)</title><rect x="310.5" y="931.0" width="196.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="313.5" y="942.0">rocksdb::WriteBatchInterna..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (88 samples, 16.48%)</title><rect x="310.5" y="915.0" width="194.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="313.5" y="926.0">rocksdb::MemTableInserter..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.19%)</title><rect x="310.5" y="899.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="313.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (87 samples, 16.29%)</title><rect x="312.7" y="899.0" width="192.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="315.7" y="910.0">rocksdb::MemTableInserter..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.19%)</title><rect x="312.7" y="883.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.7" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (86 samples, 16.10%)</title><rect x="314.9" y="883.0" width="190.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.9" y="894.0">rocksdb::MemTable::Add(un..</text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (3 samples, 0.56%)</title><rect x="314.9" y="867.0" width="6.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="317.9" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="319.4" y="851.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="322.4" y="862.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (83 samples, 15.54%)</title><rect x="321.6" y="867.0" width="183.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="324.6" y="878.0">bool rocksdb::InlineSkip..</text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (77 samples, 14.42%)</title><rect x="321.6" y="851.0" width="170.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="324.6" y="862.0">/tmp/librocksdbjni1072..</text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (66 samples, 12.36%)</title><rect x="330.4" y="835.0" width="145.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="333.4" y="846.0">/tmp/librocksdbjni..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.19%)</title><rect x="330.4" y="819.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="333.4" y="830.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.19%)</title><rect x="332.6" y="819.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="335.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (64 samples, 11.99%)</title><rect x="334.8" y="819.0" width="141.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="337.8" y="830.0">rocksdb::MemTable:..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (61 samples, 11.42%)</title><rect x="337.0" y="803.0" width="134.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="340.0" y="814.0">rocksdb::BaseComp..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (17 samples, 3.18%)</title><rect x="339.3" y="787.0" width="37.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="342.3" y="798.0">JNI..</text>
</g>
<g>
<title>jni_CallIntMethodV (15 samples, 2.81%)</title><rect x="339.3" y="771.0" width="33.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="342.3" y="782.0">jn..</text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.19%)</title><rect x="341.5" y="755.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.5" y="766.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.19%)</title><rect x="343.7" y="755.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="346.7" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.19%)</title><rect x="345.9" y="755.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.9" y="766.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (11 samples, 2.06%)</title><rect x="348.1" y="755.0" width="24.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="351.1" y="766.0">j..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.19%)</title><rect x="352.5" y="739.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="355.5" y="750.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (4 samples, 0.75%)</title><rect x="354.7" y="739.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="357.7" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.75%)</title><rect x="363.6" y="739.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="366.6" y="750.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.19%)</title><rect x="368.0" y="723.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="371.0" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="370.2" y="723.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="373.2" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="370.2" y="707.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="373.2" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="370.2" y="691.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="373.2" y="702.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.19%)</title><rect x="372.4" y="771.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="375.4" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="374.6" y="771.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="377.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="374.6" y="755.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="377.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="374.6" y="739.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="377.6" y="750.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (27 samples, 5.06%)</title><rect x="376.8" y="787.0" width="59.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="379.8" y="798.0">JNIEnv..</text>
</g>
<g>
<title>jni_CallVoidMethodV (26 samples, 4.87%)</title><rect x="379.0" y="771.0" width="57.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="382.0" y="782.0">jni_Ca..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.56%)</title><rect x="383.4" y="755.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="386.4" y="766.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.19%)</title><rect x="390.1" y="755.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="393.1" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.19%)</title><rect x="392.3" y="755.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="395.3" y="766.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.19%)</title><rect x="394.5" y="755.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="397.5" y="766.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.19%)</title><rect x="396.7" y="755.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="399.7" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.19%)</title><rect x="398.9" y="755.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="401.9" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.19%)</title><rect x="401.1" y="755.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="404.1" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.19%)</title><rect x="403.3" y="755.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="406.3" y="766.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (14 samples, 2.62%)</title><rect x="405.5" y="755.0" width="31.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="408.5" y="766.0">jn..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (4 samples, 0.75%)</title><rect x="414.4" y="739.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="417.4" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.75%)</title><rect x="423.2" y="739.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="426.2" y="750.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.19%)</title><rect x="429.9" y="723.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="432.9" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.19%)</title><rect x="432.1" y="739.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="435.1" y="750.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.19%)</title><rect x="434.3" y="739.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="437.3" y="750.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.75%)</title><rect x="436.5" y="787.0" width="8.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="439.5" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.37%)</title><rect x="440.9" y="771.0" width="4.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="443.9" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.37%)</title><rect x="440.9" y="755.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="443.9" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.37%)</title><rect x="440.9" y="739.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="443.9" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 1.12%)</title><rect x="445.3" y="787.0" width="13.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="448.3" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.37%)</title><rect x="449.7" y="771.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="452.7" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="451.9" y="755.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="454.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="451.9" y="739.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="454.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="451.9" y="723.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="454.9" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.37%)</title><rect x="454.2" y="771.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="457.2" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="456.4" y="755.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="459.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="456.4" y="739.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="459.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="456.4" y="723.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="459.4" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.19%)</title><rect x="458.6" y="787.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="461.6" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="458.6" y="771.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="461.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="458.6" y="755.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="461.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="458.6" y="739.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="461.6" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.37%)</title><rect x="460.8" y="787.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="463.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.56%)</title><rect x="465.2" y="787.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="468.2" y="798.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.19%)</title><rect x="467.4" y="771.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="470.4" y="782.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.19%)</title><rect x="469.6" y="771.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="472.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.19%)</title><rect x="471.8" y="803.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="474.8" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="474.0" y="803.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="477.0" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="474.0" y="787.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="477.0" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="474.0" y="771.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="477.0" y="782.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.19%)</title><rect x="476.3" y="835.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="479.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 1.12%)</title><rect x="478.5" y="835.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="481.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (6 samples, 1.12%)</title><rect x="478.5" y="819.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="481.5" y="830.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.12%)</title><rect x="478.5" y="803.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="481.5" y="814.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 1.12%)</title><rect x="478.5" y="787.0" width="13.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="481.5" y="798.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.19%)</title><rect x="478.5" y="771.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.5" y="782.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 0.94%)</title><rect x="480.7" y="771.0" width="11.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="483.7" y="782.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.19%)</title><rect x="482.9" y="755.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="485.9" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.37%)</title><rect x="485.1" y="755.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.19%)</title><rect x="487.3" y="739.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="490.3" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="489.5" y="755.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="492.5" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="489.5" y="739.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="492.5" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="489.5" y="723.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="492.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (6 samples, 1.12%)</title><rect x="491.7" y="851.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="494.7" y="862.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.19%)</title><rect x="493.9" y="835.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="496.9" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="493.9" y="819.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="496.9" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="493.9" y="803.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="496.9" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="493.9" y="787.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="496.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.75%)</title><rect x="496.1" y="835.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="499.1" y="846.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.19%)</title><rect x="496.1" y="819.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.1" y="830.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.19%)</title><rect x="496.1" y="803.0" width="2.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="499.1" y="814.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.19%)</title><rect x="496.1" y="787.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="499.1" y="798.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.56%)</title><rect x="498.4" y="819.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="501.4" y="830.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.56%)</title><rect x="498.4" y="803.0" width="6.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="501.4" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.19%)</title><rect x="500.6" y="787.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="503.6" y="798.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.19%)</title><rect x="502.8" y="787.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="505.8" y="798.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.19%)</title><rect x="502.8" y="771.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.8" y="782.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.19%)</title><rect x="502.8" y="755.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.8" y="766.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.19%)</title><rect x="502.8" y="739.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="505.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.19%)</title><rect x="505.0" y="915.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="508.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.19%)</title><rect x="507.2" y="947.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.2" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="507.2" y="931.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="510.2" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="507.2" y="915.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="510.2" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="507.2" y="899.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="510.2" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (18 samples, 3.37%)</title><rect x="509.4" y="963.0" width="39.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="512.4" y="974.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.19%)</title><rect x="509.4" y="947.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.4" y="958.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (17 samples, 3.18%)</title><rect x="511.6" y="947.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.6" y="958.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (17 samples, 3.18%)</title><rect x="511.6" y="931.0" width="37.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="514.6" y="942.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (17 samples, 3.18%)</title><rect x="511.6" y="915.0" width="37.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.6" y="926.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (17 samples, 3.18%)</title><rect x="511.6" y="899.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.6" y="910.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (16 samples, 3.00%)</title><rect x="513.8" y="883.0" width="35.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="516.8" y="894.0">roc..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (16 samples, 3.00%)</title><rect x="513.8" y="867.0" width="35.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="516.8" y="878.0">roc..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (16 samples, 3.00%)</title><rect x="513.8" y="851.0" width="35.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="516.8" y="862.0">boo..</text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (16 samples, 3.00%)</title><rect x="513.8" y="835.0" width="35.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="516.8" y="846.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni1072992072075371344.so (16 samples, 3.00%)</title><rect x="513.8" y="819.0" width="35.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="516.8" y="830.0">/tm..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (16 samples, 3.00%)</title><rect x="513.8" y="803.0" width="35.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="516.8" y="814.0">roc..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 3.00%)</title><rect x="513.8" y="787.0" width="35.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="516.8" y="798.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.37%)</title><rect x="516.0" y="771.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="519.0" y="782.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.37%)</title><rect x="516.0" y="755.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="519.0" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.19%)</title><rect x="516.0" y="739.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="519.0" y="750.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.19%)</title><rect x="518.2" y="739.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="521.2" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.19%)</title><rect x="518.2" y="723.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.2" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="518.2" y="707.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="521.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="518.2" y="691.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="521.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="518.2" y="675.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="521.2" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (9 samples, 1.69%)</title><rect x="520.4" y="771.0" width="19.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="523.4" y="782.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (9 samples, 1.69%)</title><rect x="520.4" y="755.0" width="19.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="523.4" y="766.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 1.69%)</title><rect x="520.4" y="739.0" width="19.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="523.4" y="750.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.56%)</title><rect x="524.9" y="723.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="527.9" y="734.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.75%)</title><rect x="531.5" y="723.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="534.5" y="734.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.19%)</title><rect x="533.7" y="707.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="536.7" y="718.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.19%)</title><rect x="535.9" y="707.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.9" y="718.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.19%)</title><rect x="535.9" y="691.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="538.9" y="702.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.19%)</title><rect x="538.1" y="707.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="541.1" y="718.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.19%)</title><rect x="538.1" y="691.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="541.1" y="702.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.19%)</title><rect x="540.3" y="771.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="543.3" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.19%)</title><rect x="540.3" y="755.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="543.3" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.19%)</title><rect x="540.3" y="739.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="543.3" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.19%)</title><rect x="540.3" y="723.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="543.3" y="734.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.19%)</title><rect x="540.3" y="707.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="543.3" y="718.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.19%)</title><rect x="540.3" y="691.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="543.3" y="702.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.19%)</title><rect x="540.3" y="675.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="543.3" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.19%)</title><rect x="540.3" y="659.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="543.3" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.19%)</title><rect x="540.3" y="643.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="543.3" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.19%)</title><rect x="540.3" y="627.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="543.3" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.19%)</title><rect x="542.5" y="771.0" width="2.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="545.5" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.19%)</title><rect x="542.5" y="755.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="545.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.19%)</title><rect x="542.5" y="739.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="545.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.19%)</title><rect x="542.5" y="723.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="545.5" y="734.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.19%)</title><rect x="542.5" y="707.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="545.5" y="718.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.19%)</title><rect x="542.5" y="691.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="545.5" y="702.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.19%)</title><rect x="542.5" y="675.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="545.5" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.19%)</title><rect x="542.5" y="659.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="545.5" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.19%)</title><rect x="542.5" y="643.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="545.5" y="654.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.19%)</title><rect x="544.8" y="771.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="547.8" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="544.8" y="755.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="547.8" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="544.8" y="739.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="547.8" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="544.8" y="723.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="547.8" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="547.0" y="771.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="550.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="547.0" y="755.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="550.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="547.0" y="739.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="550.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 1.12%)</title><rect x="549.2" y="963.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="552.2" y="974.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.37%)</title><rect x="553.6" y="947.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="556.6" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.37%)</title><rect x="558.0" y="947.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="561.0" y="958.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.37%)</title><rect x="558.0" y="931.0" width="4.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="561.0" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.37%)</title><rect x="558.0" y="915.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="561.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 0.94%)</title><rect x="562.4" y="963.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="565.4" y="974.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 0.75%)</title><rect x="564.6" y="947.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.6" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="571.3" y="931.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="574.3" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="571.3" y="915.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="574.3" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="571.3" y="899.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="574.3" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.19%)</title><rect x="573.5" y="963.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.5" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.19%)</title><rect x="573.5" y="947.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="576.5" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="575.7" y="963.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="578.7" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="575.7" y="947.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="578.7" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="575.7" y="931.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="578.7" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.19%)</title><rect x="577.9" y="979.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.9" y="990.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) [clone .plt] (1 samples, 0.19%)</title><rect x="580.1" y="979.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="583.1" y="990.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.19%)</title><rect x="582.3" y="979.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="585.3" y="990.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.19%)</title><rect x="584.5" y="979.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="587.5" y="990.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.19%)</title><rect x="586.7" y="979.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="589.7" y="990.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.19%)</title><rect x="589.0" y="995.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="592.0" y="1006.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.37%)</title><rect x="591.2" y="995.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.2" y="1006.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.37%)</title><rect x="591.2" y="979.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.2" y="990.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.19%)</title><rect x="591.2" y="963.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="594.2" y="974.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.19%)</title><rect x="593.4" y="963.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.4" y="974.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.19%)</title><rect x="595.6" y="1011.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="598.6" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="597.8" y="1059.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="600.8" y="1070.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="597.8" y="1043.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="600.8" y="1054.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="597.8" y="1027.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="600.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 4.87%)</title><rect x="600.0" y="1075.0" width="57.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="603.0" y="1086.0">[unkno..</text>
</g>
<g>
<title>__libc_write (24 samples, 4.49%)</title><rect x="600.0" y="1059.0" width="53.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="603.0" y="1070.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 4.31%)</title><rect x="602.2" y="1043.0" width="50.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="605.2" y="1054.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (23 samples, 4.31%)</title><rect x="602.2" y="1027.0" width="50.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="605.2" y="1038.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_write (23 samples, 4.31%)</title><rect x="602.2" y="1011.0" width="50.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="605.2" y="1022.0">__x64..</text>
</g>
<g>
<title>ksys_write (23 samples, 4.31%)</title><rect x="602.2" y="995.0" width="50.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="605.2" y="1006.0">ksys_..</text>
</g>
<g>
<title>vfs_write (23 samples, 4.31%)</title><rect x="602.2" y="979.0" width="50.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="605.2" y="990.0">vfs_w..</text>
</g>
<g>
<title>__vfs_write (22 samples, 4.12%)</title><rect x="602.2" y="963.0" width="48.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="605.2" y="974.0">__vf..</text>
</g>
<g>
<title>new_sync_write (22 samples, 4.12%)</title><rect x="602.2" y="947.0" width="48.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="605.2" y="958.0">new_..</text>
</g>
<g>
<title>ext4_file_write_iter (21 samples, 3.93%)</title><rect x="604.4" y="931.0" width="46.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="607.4" y="942.0">ext4..</text>
</g>
<g>
<title>__generic_file_write_iter (19 samples, 3.56%)</title><rect x="608.8" y="915.0" width="42.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="611.8" y="926.0">__g..</text>
</g>
<g>
<title>file_update_time (4 samples, 0.75%)</title><rect x="608.8" y="899.0" width="8.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="611.8" y="910.0"></text>
</g>
<g>
<title>__mnt_want_write_file (1 samples, 0.19%)</title><rect x="608.8" y="883.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="611.8" y="894.0"></text>
</g>
<g>
<title>generic_update_time (3 samples, 0.56%)</title><rect x="611.0" y="883.0" width="6.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="614.0" y="894.0"></text>
</g>
<g>
<title>__mark_inode_dirty (3 samples, 0.56%)</title><rect x="611.0" y="867.0" width="6.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="614.0" y="878.0"></text>
</g>
<g>
<title>ext4_dirty_inode (3 samples, 0.56%)</title><rect x="611.0" y="851.0" width="6.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="614.0" y="862.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.19%)</title><rect x="611.0" y="835.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="614.0" y="846.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.19%)</title><rect x="611.0" y="819.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="614.0" y="830.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.19%)</title><rect x="611.0" y="803.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="614.0" y="814.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.37%)</title><rect x="613.3" y="835.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="616.3" y="846.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.19%)</title><rect x="613.3" y="819.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="616.3" y="830.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.19%)</title><rect x="613.3" y="803.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="616.3" y="814.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.19%)</title><rect x="615.5" y="819.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="618.5" y="830.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.19%)</title><rect x="615.5" y="803.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="618.5" y="814.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.19%)</title><rect x="615.5" y="787.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="618.5" y="798.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (1 samples, 0.19%)</title><rect x="615.5" y="771.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="618.5" y="782.0"></text>
</g>
<g>
<title>generic_perform_write (15 samples, 2.81%)</title><rect x="617.7" y="899.0" width="33.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="620.7" y="910.0">ge..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.19%)</title><rect x="617.7" y="883.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="620.7" y="894.0"></text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.56%)</title><rect x="619.9" y="883.0" width="6.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="622.9" y="894.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.19%)</title><rect x="622.1" y="867.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="625.1" y="878.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.19%)</title><rect x="622.1" y="851.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="625.1" y="862.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.19%)</title><rect x="624.3" y="867.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="627.3" y="878.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.19%)</title><rect x="624.3" y="851.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="627.3" y="862.0"></text>
</g>
<g>
<title>ext4_da_write_end (9 samples, 1.69%)</title><rect x="626.5" y="883.0" width="19.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="629.5" y="894.0"></text>
</g>
<g>
<title>generic_write_end (9 samples, 1.69%)</title><rect x="626.5" y="867.0" width="19.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="629.5" y="878.0"></text>
</g>
<g>
<title>__mark_inode_dirty (8 samples, 1.50%)</title><rect x="626.5" y="851.0" width="17.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="629.5" y="862.0"></text>
</g>
<g>
<title>ext4_dirty_inode (8 samples, 1.50%)</title><rect x="626.5" y="835.0" width="17.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="629.5" y="846.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.19%)</title><rect x="626.5" y="819.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="629.5" y="830.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (7 samples, 1.31%)</title><rect x="628.7" y="819.0" width="15.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="631.7" y="830.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (4 samples, 0.75%)</title><rect x="628.7" y="803.0" width="8.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="631.7" y="814.0"></text>
</g>
<g>
<title>ext4_do_update_inode (4 samples, 0.75%)</title><rect x="628.7" y="787.0" width="8.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="631.7" y="798.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (1 samples, 0.19%)</title><rect x="633.1" y="771.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="636.1" y="782.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.19%)</title><rect x="633.1" y="755.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="636.1" y="766.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.19%)</title><rect x="633.1" y="739.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="636.1" y="750.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.19%)</title><rect x="633.1" y="723.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="636.1" y="734.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.19%)</title><rect x="635.4" y="771.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="638.4" y="782.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (3 samples, 0.56%)</title><rect x="637.6" y="803.0" width="6.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="640.6" y="814.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (2 samples, 0.37%)</title><rect x="637.6" y="787.0" width="4.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="640.6" y="798.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.37%)</title><rect x="637.6" y="771.0" width="4.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="640.6" y="782.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (1 samples, 0.19%)</title><rect x="639.8" y="755.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="642.8" y="766.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.19%)</title><rect x="642.0" y="787.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="645.0" y="798.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.19%)</title><rect x="644.2" y="851.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="647.2" y="862.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (1 samples, 0.19%)</title><rect x="644.2" y="835.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="647.2" y="846.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.37%)</title><rect x="646.4" y="883.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="649.4" y="894.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.37%)</title><rect x="646.4" y="867.0" width="4.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="649.4" y="878.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.19%)</title><rect x="650.8" y="963.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="653.8" y="974.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.19%)</title><rect x="650.8" y="947.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="653.8" y="958.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.19%)</title><rect x="650.8" y="931.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="653.8" y="942.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.19%)</title><rect x="650.8" y="915.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="653.8" y="926.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.19%)</title><rect x="653.0" y="1059.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="656.0" y="1070.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.19%)</title><rect x="653.0" y="1043.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="656.0" y="1054.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.19%)</title><rect x="653.0" y="1027.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="656.0" y="1038.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.19%)</title><rect x="653.0" y="1011.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="656.0" y="1022.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.19%)</title><rect x="653.0" y="995.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="656.0" y="1006.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.19%)</title><rect x="653.0" y="979.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="656.0" y="990.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.19%)</title><rect x="653.0" y="963.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="656.0" y="974.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.19%)</title><rect x="653.0" y="947.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="656.0" y="958.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.19%)</title><rect x="653.0" y="931.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="656.0" y="942.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.19%)</title><rect x="653.0" y="915.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="656.0" y="926.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) [clone .plt] (1 samples, 0.19%)</title><rect x="655.2" y="1059.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="658.2" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 1.31%)</title><rect x="657.5" y="1075.0" width="15.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="660.5" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.31%)</title><rect x="657.5" y="1059.0" width="15.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="660.5" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 1.31%)</title><rect x="657.5" y="1043.0" width="15.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="660.5" y="1054.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 1.31%)</title><rect x="657.5" y="1027.0" width="15.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="660.5" y="1038.0"></text>
</g>
<g>
<title>do_futex (7 samples, 1.31%)</title><rect x="657.5" y="1011.0" width="15.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="660.5" y="1022.0"></text>
</g>
<g>
<title>futex_wake (7 samples, 1.31%)</title><rect x="657.5" y="995.0" width="15.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="660.5" y="1006.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 1.31%)</title><rect x="657.5" y="979.0" width="15.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="660.5" y="990.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 1.31%)</title><rect x="657.5" y="963.0" width="15.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="660.5" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 1.31%)</title><rect x="657.5" y="947.0" width="15.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="660.5" y="958.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.19%)</title><rect x="672.9" y="1075.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="675.9" y="1086.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.19%)</title><rect x="675.1" y="1075.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="678.1" y="1086.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="675.1" y="1059.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="678.1" y="1070.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="675.1" y="1043.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="678.1" y="1054.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="675.1" y="1027.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="678.1" y="1038.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (3 samples, 0.56%)</title><rect x="677.3" y="1075.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/SingedBytesComparator.compare (35 samples, 6.55%)</title><rect x="684.0" y="1075.0" width="77.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="687.0" y="1086.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/SingedBytesComparator.compare (35 samples, 6.55%)</title><rect x="684.0" y="1059.0" width="77.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.0" y="1070.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.19%)</title><rect x="684.0" y="1043.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="687.0" y="1054.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.19%)</title><rect x="684.0" y="1027.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.0" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="684.0" y="1011.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="687.0" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="684.0" y="995.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="687.0" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="684.0" y="979.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="687.0" y="990.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (34 samples, 6.37%)</title><rect x="686.2" y="1043.0" width="75.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="689.2" y="1054.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (34 samples, 6.37%)</title><rect x="686.2" y="1027.0" width="75.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.2" y="1038.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (33 samples, 6.18%)</title><rect x="688.4" y="1011.0" width="72.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.4" y="1022.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (28 samples, 5.24%)</title><rect x="690.6" y="995.0" width="61.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="693.6" y="1006.0">Java_o..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.19%)</title><rect x="690.6" y="979.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="693.6" y="990.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="692.8" y="979.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="695.8" y="990.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.75%)</title><rect x="695.0" y="979.0" width="8.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="698.0" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.37%)</title><rect x="697.2" y="963.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="700.2" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.19%)</title><rect x="701.6" y="963.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="704.6" y="974.0"></text>
</g>
<g>
<title>jni_NewByteArray (16 samples, 3.00%)</title><rect x="703.9" y="979.0" width="35.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="706.9" y="990.0">jni..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.56%)</title><rect x="706.1" y="963.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="709.1" y="974.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.37%)</title><rect x="712.7" y="963.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="715.7" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.19%)</title><rect x="717.1" y="963.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="720.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 1.69%)</title><rect x="719.3" y="963.0" width="19.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="722.3" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 1.50%)</title><rect x="719.3" y="947.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="722.3" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 1.31%)</title><rect x="719.3" y="931.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="722.3" y="942.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.37%)</title><rect x="721.5" y="915.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.5" y="926.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (4 samples, 0.75%)</title><rect x="726.0" y="915.0" width="8.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="729.0" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="734.8" y="931.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="737.8" y="942.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="737.0" y="947.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="740.0" y="958.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="737.0" y="931.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="740.0" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="737.0" y="915.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="740.0" y="926.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 1.12%)</title><rect x="739.2" y="979.0" width="13.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="742.2" y="990.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.19%)</title><rect x="743.6" y="963.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.6" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.19%)</title><rect x="745.8" y="963.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.8" y="974.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.37%)</title><rect x="748.1" y="963.0" width="4.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="751.1" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.19%)</title><rect x="750.3" y="947.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="753.3" y="958.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.56%)</title><rect x="752.5" y="995.0" width="6.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="755.5" y="1006.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.19%)</title><rect x="759.1" y="995.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="762.1" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.proxying (50 samples, 9.36%)</title><rect x="761.3" y="1123.0" width="110.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.3" y="1134.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (49 samples, 9.18%)</title><rect x="763.5" y="1107.0" width="108.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.5" y="1118.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (49 samples, 9.18%)</title><rect x="763.5" y="1091.0" width="108.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.5" y="1102.0">one/nio/http/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.19%)</title><rect x="763.5" y="1075.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="766.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.19%)</title><rect x="763.5" y="1059.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="766.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.19%)</title><rect x="763.5" y="1043.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (14 samples, 2.62%)</title><rect x="765.7" y="1075.0" width="31.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="768.7" y="1086.0">on..</text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.19%)</title><rect x="765.7" y="1059.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="768.7" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.19%)</title><rect x="765.7" y="1043.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.7" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.19%)</title><rect x="765.7" y="1027.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="768.7" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.19%)</title><rect x="765.7" y="1011.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="768.7" y="1022.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.19%)</title><rect x="765.7" y="995.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="768.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 2.43%)</title><rect x="767.9" y="1059.0" width="28.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.9" y="1070.0">on..</text>
</g>
<g>
<title>__recv (13 samples, 2.43%)</title><rect x="767.9" y="1043.0" width="28.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="770.9" y="1054.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 2.43%)</title><rect x="767.9" y="1027.0" width="28.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="770.9" y="1038.0">en..</text>
</g>
<g>
<title>do_syscall_64 (13 samples, 2.43%)</title><rect x="767.9" y="1011.0" width="28.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="770.9" y="1022.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (13 samples, 2.43%)</title><rect x="767.9" y="995.0" width="28.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="770.9" y="1006.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (13 samples, 2.43%)</title><rect x="767.9" y="979.0" width="28.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="770.9" y="990.0">__..</text>
</g>
<g>
<title>sock_recvmsg (13 samples, 2.43%)</title><rect x="767.9" y="963.0" width="28.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="770.9" y="974.0">so..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.19%)</title><rect x="767.9" y="947.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="770.9" y="958.0"></text>
</g>
<g>
<title>inet6_recvmsg (12 samples, 2.25%)</title><rect x="770.1" y="947.0" width="26.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="773.1" y="958.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (12 samples, 2.25%)</title><rect x="770.1" y="931.0" width="26.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="773.1" y="942.0">t..</text>
</g>
<g>
<title>sk_wait_data (9 samples, 1.69%)</title><rect x="770.1" y="915.0" width="19.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="773.1" y="926.0"></text>
</g>
<g>
<title>wait_woken (9 samples, 1.69%)</title><rect x="770.1" y="899.0" width="19.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="773.1" y="910.0"></text>
</g>
<g>
<title>schedule_timeout (9 samples, 1.69%)</title><rect x="770.1" y="883.0" width="19.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="773.1" y="894.0"></text>
</g>
<g>
<title>schedule (9 samples, 1.69%)</title><rect x="770.1" y="867.0" width="19.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="773.1" y="878.0"></text>
</g>
<g>
<title>__sched_text_start (9 samples, 1.69%)</title><rect x="770.1" y="851.0" width="19.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="773.1" y="862.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 1.69%)</title><rect x="770.1" y="835.0" width="19.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="773.1" y="846.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.56%)</title><rect x="790.0" y="915.0" width="6.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="793.0" y="926.0"></text>
</g>
<g>
<title>tcp_send_ack (3 samples, 0.56%)</title><rect x="790.0" y="899.0" width="6.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="793.0" y="910.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.46 (3 samples, 0.56%)</title><rect x="790.0" y="883.0" width="6.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="793.0" y="894.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.56%)</title><rect x="790.0" y="867.0" width="6.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="793.0" y="878.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.56%)</title><rect x="790.0" y="851.0" width="6.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="793.0" y="862.0"></text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.56%)</title><rect x="790.0" y="835.0" width="6.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="793.0" y="846.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.37%)</title><rect x="792.2" y="819.0" width="4.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="795.2" y="830.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.37%)</title><rect x="792.2" y="803.0" width="4.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="795.2" y="814.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.37%)</title><rect x="792.2" y="787.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="795.2" y="798.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.37%)</title><rect x="792.2" y="771.0" width="4.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="795.2" y="782.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.37%)</title><rect x="792.2" y="755.0" width="4.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="795.2" y="766.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.19%)</title><rect x="794.5" y="739.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="797.5" y="750.0"></text>
</g>
<g>
<title>do_softirq.part.20 (1 samples, 0.19%)</title><rect x="794.5" y="723.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="797.5" y="734.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.19%)</title><rect x="794.5" y="707.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="797.5" y="718.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.19%)</title><rect x="794.5" y="691.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="797.5" y="702.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.19%)</title><rect x="794.5" y="675.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.5" y="686.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.19%)</title><rect x="794.5" y="659.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="797.5" y="670.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.19%)</title><rect x="794.5" y="643.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="797.5" y="654.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.19%)</title><rect x="794.5" y="627.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="797.5" y="638.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.19%)</title><rect x="794.5" y="611.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="797.5" y="622.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.19%)</title><rect x="794.5" y="595.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="797.5" y="606.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.19%)</title><rect x="794.5" y="579.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="797.5" y="590.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.19%)</title><rect x="794.5" y="563.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="797.5" y="574.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.19%)</title><rect x="794.5" y="547.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="797.5" y="558.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.19%)</title><rect x="794.5" y="531.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="797.5" y="542.0"></text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.19%)</title><rect x="794.5" y="515.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="797.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2 samples, 0.37%)</title><rect x="796.7" y="1075.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.19%)</title><rect x="796.7" y="1059.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.7" y="1070.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="796.7" y="1043.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="799.7" y="1054.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="796.7" y="1027.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="799.7" y="1038.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="796.7" y="1011.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="799.7" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="798.9" y="1059.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="801.9" y="1070.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="798.9" y="1043.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="801.9" y="1054.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="798.9" y="1027.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="801.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.19%)</title><rect x="801.1" y="1075.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (3 samples, 0.56%)</title><rect x="803.3" y="1075.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.3" y="1086.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.19%)</title><rect x="803.3" y="1059.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="806.3" y="1070.0"></text>
</g>
<g>
<title>__GI___setsockopt (2 samples, 0.37%)</title><rect x="805.5" y="1059.0" width="4.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="808.5" y="1070.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.37%)</title><rect x="805.5" y="1043.0" width="4.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="808.5" y="1054.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.37%)</title><rect x="805.5" y="1027.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="808.5" y="1038.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (2 samples, 0.37%)</title><rect x="805.5" y="1011.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="808.5" y="1022.0"></text>
</g>
<g>
<title>__sys_setsockopt (2 samples, 0.37%)</title><rect x="805.5" y="995.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="808.5" y="1006.0"></text>
</g>
<g>
<title>__get_user_4 (1 samples, 0.19%)</title><rect x="805.5" y="979.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="808.5" y="990.0"></text>
</g>
<g>
<title>sock_setsockopt (1 samples, 0.19%)</title><rect x="807.7" y="979.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="810.7" y="990.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.19%)</title><rect x="807.7" y="963.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="810.7" y="974.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.19%)</title><rect x="807.7" y="947.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="810.7" y="958.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.19%)</title><rect x="807.7" y="931.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="810.7" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (27 samples, 5.06%)</title><rect x="809.9" y="1075.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.9" y="1086.0">one/ni..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.19%)</title><rect x="809.9" y="1059.0" width="2.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="812.9" y="1070.0"></text>
</g>
<g>
<title>__send (26 samples, 4.87%)</title><rect x="812.1" y="1059.0" width="57.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="815.1" y="1070.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 4.68%)</title><rect x="814.3" y="1043.0" width="55.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.3" y="1054.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (25 samples, 4.68%)</title><rect x="814.3" y="1027.0" width="55.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="817.3" y="1038.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_sendto (23 samples, 4.31%)</title><rect x="814.3" y="1011.0" width="50.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="817.3" y="1022.0">__x64..</text>
</g>
<g>
<title>__sys_sendto (23 samples, 4.31%)</title><rect x="814.3" y="995.0" width="50.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="817.3" y="1006.0">__sys..</text>
</g>
<g>
<title>sock_sendmsg (23 samples, 4.31%)</title><rect x="814.3" y="979.0" width="50.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="817.3" y="990.0">sock_..</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.19%)</title><rect x="814.3" y="963.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.3" y="974.0"></text>
</g>
<g>
<title>inet6_sendmsg (22 samples, 4.12%)</title><rect x="816.6" y="963.0" width="48.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="819.6" y="974.0">inet..</text>
</g>
<g>
<title>tcp_sendmsg (22 samples, 4.12%)</title><rect x="816.6" y="947.0" width="48.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="819.6" y="958.0">tcp_..</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.19%)</title><rect x="816.6" y="931.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="819.6" y="942.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (20 samples, 3.75%)</title><rect x="818.8" y="931.0" width="44.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="821.8" y="942.0">tcp_..</text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.37%)</title><rect x="818.8" y="915.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="821.8" y="926.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.37%)</title><rect x="818.8" y="899.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="821.8" y="910.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.19%)</title><rect x="821.0" y="883.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="824.0" y="894.0"></text>
</g>
<g>
<title>tcp_push (18 samples, 3.37%)</title><rect x="823.2" y="915.0" width="39.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="826.2" y="926.0">tcp..</text>
</g>
<g>
<title>__tcp_push_pending_frames (18 samples, 3.37%)</title><rect x="823.2" y="899.0" width="39.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="826.2" y="910.0">__t..</text>
</g>
<g>
<title>tcp_write_xmit (18 samples, 3.37%)</title><rect x="823.2" y="883.0" width="39.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="826.2" y="894.0">tcp..</text>
</g>
<g>
<title>__tcp_transmit_skb (17 samples, 3.18%)</title><rect x="823.2" y="867.0" width="37.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="826.2" y="878.0">__t..</text>
</g>
<g>
<title>ip_queue_xmit (17 samples, 3.18%)</title><rect x="823.2" y="851.0" width="37.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.2" y="862.0">ip_..</text>
</g>
<g>
<title>__ip_queue_xmit (17 samples, 3.18%)</title><rect x="823.2" y="835.0" width="37.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.2" y="846.0">__i..</text>
</g>
<g>
<title>ip_local_out (15 samples, 2.81%)</title><rect x="823.2" y="819.0" width="33.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="826.2" y="830.0">ip..</text>
</g>
<g>
<title>ip_output (15 samples, 2.81%)</title><rect x="823.2" y="803.0" width="33.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="826.2" y="814.0">ip..</text>
</g>
<g>
<title>ip_finish_output (15 samples, 2.81%)</title><rect x="823.2" y="787.0" width="33.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="826.2" y="798.0">ip..</text>
</g>
<g>
<title>__ip_finish_output (15 samples, 2.81%)</title><rect x="823.2" y="771.0" width="33.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="826.2" y="782.0">__..</text>
</g>
<g>
<title>ip_finish_output2 (15 samples, 2.81%)</title><rect x="823.2" y="755.0" width="33.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="826.2" y="766.0">ip..</text>
</g>
<g>
<title>__local_bh_enable_ip (13 samples, 2.43%)</title><rect x="825.4" y="739.0" width="28.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="828.4" y="750.0">__..</text>
</g>
<g>
<title>do_softirq.part.20 (12 samples, 2.25%)</title><rect x="827.6" y="723.0" width="26.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="830.6" y="734.0">d..</text>
</g>
<g>
<title>do_softirq_own_stack (12 samples, 2.25%)</title><rect x="827.6" y="707.0" width="26.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="830.6" y="718.0">d..</text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 2.25%)</title><rect x="827.6" y="691.0" width="26.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="830.6" y="702.0">_..</text>
</g>
<g>
<title>net_rx_action (12 samples, 2.25%)</title><rect x="827.6" y="675.0" width="26.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="830.6" y="686.0">n..</text>
</g>
<g>
<title>process_backlog (12 samples, 2.25%)</title><rect x="827.6" y="659.0" width="26.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="830.6" y="670.0">p..</text>
</g>
<g>
<title>__netif_receive_skb (12 samples, 2.25%)</title><rect x="827.6" y="643.0" width="26.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="830.6" y="654.0">_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (12 samples, 2.25%)</title><rect x="827.6" y="627.0" width="26.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="830.6" y="638.0">_..</text>
</g>
<g>
<title>ip_rcv (12 samples, 2.25%)</title><rect x="827.6" y="611.0" width="26.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="830.6" y="622.0">i..</text>
</g>
<g>
<title>ip_rcv_finish (12 samples, 2.25%)</title><rect x="827.6" y="595.0" width="26.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="830.6" y="606.0">i..</text>
</g>
<g>
<title>ip_local_deliver (12 samples, 2.25%)</title><rect x="827.6" y="579.0" width="26.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="830.6" y="590.0">i..</text>
</g>
<g>
<title>ip_local_deliver_finish (12 samples, 2.25%)</title><rect x="827.6" y="563.0" width="26.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="830.6" y="574.0">i..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (12 samples, 2.25%)</title><rect x="827.6" y="547.0" width="26.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="830.6" y="558.0">i..</text>
</g>
<g>
<title>tcp_v4_rcv (12 samples, 2.25%)</title><rect x="827.6" y="531.0" width="26.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="830.6" y="542.0">t..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.19%)</title><rect x="827.6" y="515.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="830.6" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.19%)</title><rect x="829.8" y="515.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="832.8" y="526.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.19%)</title><rect x="832.0" y="515.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="835.0" y="526.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.19%)</title><rect x="832.0" y="499.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="835.0" y="510.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (9 samples, 1.69%)</title><rect x="834.2" y="515.0" width="19.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="837.2" y="526.0"></text>
</g>
<g>
<title>tcp_rcv_established (9 samples, 1.69%)</title><rect x="834.2" y="499.0" width="19.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="837.2" y="510.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.37%)</title><rect x="834.2" y="483.0" width="4.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="837.2" y="494.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.37%)</title><rect x="834.2" y="467.0" width="4.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="837.2" y="478.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.37%)</title><rect x="834.2" y="451.0" width="4.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="837.2" y="462.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.37%)</title><rect x="834.2" y="435.0" width="4.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="837.2" y="446.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.37%)</title><rect x="834.2" y="419.0" width="4.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="837.2" y="430.0"></text>
</g>
<g>
<title>tcp_data_ready (6 samples, 1.12%)</title><rect x="838.7" y="483.0" width="13.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="841.7" y="494.0"></text>
</g>
<g>
<title>sock_def_readable (6 samples, 1.12%)</title><rect x="838.7" y="467.0" width="13.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="841.7" y="478.0"></text>
</g>
<g>
<title>__wake_up_sync_key (6 samples, 1.12%)</title><rect x="838.7" y="451.0" width="13.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="841.7" y="462.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 1.12%)</title><rect x="838.7" y="435.0" width="13.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="841.7" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 1.12%)</title><rect x="838.7" y="419.0" width="13.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="841.7" y="430.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.19%)</title><rect x="851.9" y="483.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="854.9" y="494.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.19%)</title><rect x="854.1" y="739.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="857.1" y="750.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.19%)</title><rect x="854.1" y="723.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="857.1" y="734.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.19%)</title><rect x="854.1" y="707.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="857.1" y="718.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.19%)</title><rect x="854.1" y="691.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="857.1" y="702.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.37%)</title><rect x="856.3" y="819.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="859.3" y="830.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.19%)</title><rect x="860.7" y="867.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="863.7" y="878.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.19%)</title><rect x="863.0" y="931.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="866.0" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.37%)</title><rect x="865.2" y="1011.0" width="4.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="868.2" y="1022.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.37%)</title><rect x="865.2" y="995.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="868.2" y="1006.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.37%)</title><rect x="865.2" y="979.0" width="4.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="868.2" y="990.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.37%)</title><rect x="865.2" y="963.0" width="4.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="868.2" y="974.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.19%)</title><rect x="869.6" y="1075.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="872.6" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.19%)</title><rect x="869.6" y="1059.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="872.6" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.19%)</title><rect x="869.6" y="1043.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="872.6" y="1054.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (70 samples, 13.11%)</title><rect x="871.8" y="1267.0" width="154.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.8" y="1278.0">one/nio/server/Selec..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (28 samples, 5.24%)</title><rect x="871.8" y="1251.0" width="61.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.8" y="1262.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (28 samples, 5.24%)</title><rect x="871.8" y="1235.0" width="61.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.8" y="1246.0">one/ni..</text>
</g>
<g>
<title>JVM_IHashCode (3 samples, 0.56%)</title><rect x="880.6" y="1219.0" width="6.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="883.6" y="1230.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 0.56%)</title><rect x="880.6" y="1203.0" width="6.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="883.6" y="1214.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.56%)</title><rect x="880.6" y="1187.0" width="6.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="883.6" y="1198.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.56%)</title><rect x="880.6" y="1171.0" width="6.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="883.6" y="1182.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.56%)</title><rect x="880.6" y="1155.0" width="6.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="883.6" y="1166.0"></text>
</g>
<g>
<title>do_epoll_wait (3 samples, 0.56%)</title><rect x="880.6" y="1139.0" width="6.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="883.6" y="1150.0"></text>
</g>
<g>
<title>ep_poll (3 samples, 0.56%)</title><rect x="880.6" y="1123.0" width="6.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="883.6" y="1134.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 0.56%)</title><rect x="880.6" y="1107.0" width="6.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="883.6" y="1118.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.56%)</title><rect x="880.6" y="1091.0" width="6.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="883.6" y="1102.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.56%)</title><rect x="880.6" y="1075.0" width="6.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="883.6" y="1086.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.56%)</title><rect x="880.6" y="1059.0" width="6.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="883.6" y="1070.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.56%)</title><rect x="880.6" y="1043.0" width="6.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="883.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 3.93%)</title><rect x="887.3" y="1219.0" width="46.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="890.3" y="1230.0">[unk..</text>
</g>
<g>
<title>epoll_wait (21 samples, 3.93%)</title><rect x="887.3" y="1203.0" width="46.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="890.3" y="1214.0">epol..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (19 samples, 3.56%)</title><rect x="891.7" y="1187.0" width="42.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="894.7" y="1198.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (19 samples, 3.56%)</title><rect x="891.7" y="1171.0" width="42.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="894.7" y="1182.0">do_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (19 samples, 3.56%)</title><rect x="891.7" y="1155.0" width="42.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="894.7" y="1166.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (19 samples, 3.56%)</title><rect x="891.7" y="1139.0" width="42.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="894.7" y="1150.0">do_..</text>
</g>
<g>
<title>__fget_light (1 samples, 0.19%)</title><rect x="891.7" y="1123.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="894.7" y="1134.0"></text>
</g>
<g>
<title>ep_poll (18 samples, 3.37%)</title><rect x="893.9" y="1123.0" width="39.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="896.9" y="1134.0">ep_..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.37%)</title><rect x="896.1" y="1107.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="899.1" y="1118.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.37%)</title><rect x="896.1" y="1091.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="899.1" y="1102.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.37%)</title><rect x="896.1" y="1075.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="899.1" y="1086.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.19%)</title><rect x="898.3" y="1059.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="901.3" y="1070.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (15 samples, 2.81%)</title><rect x="900.5" y="1107.0" width="33.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="903.5" y="1118.0">sc..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (15 samples, 2.81%)</title><rect x="900.5" y="1091.0" width="33.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="903.5" y="1102.0">sc..</text>
</g>
<g>
<title>schedule (14 samples, 2.62%)</title><rect x="902.7" y="1075.0" width="31.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="905.7" y="1086.0">sc..</text>
</g>
<g>
<title>__sched_text_start (14 samples, 2.62%)</title><rect x="902.7" y="1059.0" width="31.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="905.7" y="1070.0">__..</text>
</g>
<g>
<title>finish_task_switch (13 samples, 2.43%)</title><rect x="904.9" y="1043.0" width="28.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="907.9" y="1054.0">fi..</text>
</g>
<g>
<title>one/nio/net/Session.process (42 samples, 7.87%)</title><rect x="933.7" y="1251.0" width="92.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="936.7" y="1262.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (42 samples, 7.87%)</title><rect x="933.7" y="1235.0" width="92.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="936.7" y="1246.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (33 samples, 6.18%)</title><rect x="933.7" y="1219.0" width="72.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="936.7" y="1230.0">one/nio/..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.19%)</title><rect x="933.7" y="1203.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="936.7" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (27 samples, 5.06%)</title><rect x="935.9" y="1203.0" width="59.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="938.9" y="1214.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (26 samples, 4.87%)</title><rect x="938.1" y="1187.0" width="57.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="941.1" y="1198.0">one/ni..</text>
</g>
<g>
<title>RequestHandler2_putValueByKey.handleRequest (24 samples, 4.49%)</title><rect x="938.1" y="1171.0" width="53.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.1" y="1182.0">Reque..</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.putValueByKey (24 samples, 4.49%)</title><rect x="938.1" y="1155.0" width="53.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.1" y="1166.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/basta123/AsyncHttpServerImpl.executeAsync (24 samples, 4.49%)</title><rect x="938.1" y="1139.0" width="53.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.1" y="1150.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 4.49%)</title><rect x="938.1" y="1123.0" width="53.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="941.1" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 4.31%)</title><rect x="940.3" y="1107.0" width="50.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="943.3" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.19%)</title><rect x="940.3" y="1091.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="943.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.19%)</title><rect x="940.3" y="1075.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.19%)</title><rect x="940.3" y="1059.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.19%)</title><rect x="940.3" y="1043.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.19%)</title><rect x="940.3" y="1027.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="943.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 3.93%)</title><rect x="942.5" y="1091.0" width="46.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.5" y="1102.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 3.93%)</title><rect x="942.5" y="1075.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.5" y="1086.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 3.93%)</title><rect x="942.5" y="1059.0" width="46.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="945.5" y="1070.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 3.93%)</title><rect x="942.5" y="1043.0" width="46.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.5" y="1054.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 3.93%)</title><rect x="942.5" y="1027.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.5" y="1038.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.37%)</title><rect x="942.5" y="1011.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="945.5" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.37%)</title><rect x="942.5" y="995.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.5" y="1006.0"></text>
</g>
<g>
<title>__pthread_cond_signal (18 samples, 3.37%)</title><rect x="946.9" y="1011.0" width="39.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="949.9" y="1022.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (18 samples, 3.37%)</title><rect x="946.9" y="995.0" width="39.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="949.9" y="1006.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (18 samples, 3.37%)</title><rect x="946.9" y="979.0" width="39.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="949.9" y="990.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (16 samples, 3.00%)</title><rect x="951.3" y="963.0" width="35.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="954.3" y="974.0">__x..</text>
</g>
<g>
<title>do_futex (15 samples, 2.81%)</title><rect x="951.3" y="947.0" width="33.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="954.3" y="958.0">do..</text>
</g>
<g>
<title>futex_wake (15 samples, 2.81%)</title><rect x="951.3" y="931.0" width="33.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="954.3" y="942.0">fu..</text>
</g>
<g>
<title>wake_up_q (15 samples, 2.81%)</title><rect x="951.3" y="915.0" width="33.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="954.3" y="926.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (15 samples, 2.81%)</title><rect x="951.3" y="899.0" width="33.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="954.3" y="910.0">tr..</text>
</g>
<g>
<title>__lock_text_start (15 samples, 2.81%)</title><rect x="951.3" y="883.0" width="33.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="954.3" y="894.0">__..</text>
</g>
<g>
<title>futex_wake (1 samples, 0.19%)</title><rect x="984.5" y="947.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="987.5" y="958.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="986.7" y="1011.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="989.7" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="988.9" y="1091.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="991.9" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="988.9" y="1075.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="991.9" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="988.9" y="1059.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="991.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.19%)</title><rect x="991.1" y="1171.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="994.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.19%)</title><rect x="991.1" y="1155.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="994.1" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.19%)</title><rect x="991.1" y="1139.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="994.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.19%)</title><rect x="991.1" y="1123.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="994.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.19%)</title><rect x="991.1" y="1107.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="994.1" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.19%)</title><rect x="991.1" y="1091.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="994.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.19%)</title><rect x="993.3" y="1171.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="996.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.19%)</title><rect x="993.3" y="1155.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.19%)</title><rect x="993.3" y="1139.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="996.3" y="1150.0"></text>
</g>
<g>
<title>RequestHandler2_putValueByKey.handleRequest (1 samples, 0.19%)</title><rect x="993.3" y="1123.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.3" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.37%)</title><rect x="995.5" y="1203.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="998.5" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.19%)</title><rect x="995.5" y="1187.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="998.5" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.19%)</title><rect x="995.5" y="1171.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="998.5" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.19%)</title><rect x="997.8" y="1187.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.8" y="1198.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.19%)</title><rect x="1000.0" y="1203.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.19%)</title><rect x="1000.0" y="1187.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1003.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.19%)</title><rect x="1000.0" y="1171.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1003.0" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.37%)</title><rect x="1002.2" y="1203.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1005.2" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.19%)</title><rect x="1004.4" y="1187.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1007.4" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 1.69%)</title><rect x="1006.6" y="1219.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.6" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 1.69%)</title><rect x="1006.6" y="1203.0" width="19.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1009.6" y="1214.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.19%)</title><rect x="1008.8" y="1187.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1011.8" y="1198.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.19%)</title><rect x="1008.8" y="1171.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.19%)</title><rect x="1011.0" y="1187.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1014.0" y="1198.0"></text>
</g>
<g>
<title>__recv (6 samples, 1.12%)</title><rect x="1013.2" y="1187.0" width="13.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1016.2" y="1198.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.94%)</title><rect x="1015.4" y="1171.0" width="11.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1018.4" y="1182.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.94%)</title><rect x="1015.4" y="1155.0" width="11.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1018.4" y="1166.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (5 samples, 0.94%)</title><rect x="1015.4" y="1139.0" width="11.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1018.4" y="1150.0"></text>
</g>
<g>
<title>__sys_recvfrom (5 samples, 0.94%)</title><rect x="1015.4" y="1123.0" width="11.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1018.4" y="1134.0"></text>
</g>
<g>
<title>sock_recvmsg (5 samples, 0.94%)</title><rect x="1015.4" y="1107.0" width="11.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1018.4" y="1118.0"></text>
</g>
<g>
<title>inet6_recvmsg (3 samples, 0.56%)</title><rect x="1015.4" y="1091.0" width="6.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1018.4" y="1102.0"></text>
</g>
<g>
<title>tcp_recvmsg (3 samples, 0.56%)</title><rect x="1015.4" y="1075.0" width="6.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1018.4" y="1086.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.19%)</title><rect x="1017.6" y="1059.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1020.6" y="1070.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.19%)</title><rect x="1017.6" y="1043.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1020.6" y="1054.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.19%)</title><rect x="1017.6" y="1027.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1020.6" y="1038.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.19%)</title><rect x="1019.9" y="1059.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1022.9" y="1070.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.19%)</title><rect x="1019.9" y="1043.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1022.9" y="1054.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.37%)</title><rect x="1022.1" y="1091.0" width="4.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1025.1" y="1102.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.37%)</title><rect x="1022.1" y="1075.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1025.1" y="1086.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.37%)</title><rect x="1022.1" y="1059.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1025.1" y="1070.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.37%)</title><rect x="1022.1" y="1043.0" width="4.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1025.1" y="1054.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.19%)</title><rect x="1024.3" y="1027.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1027.3" y="1038.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (1 samples, 0.19%)</title><rect x="1024.3" y="1011.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1027.3" y="1022.0"></text>
</g>
<g>
<title>start_thread (74 samples, 13.86%)</title><rect x="1026.5" y="1267.0" width="163.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1029.5" y="1278.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 13.86%)</title><rect x="1026.5" y="1251.0" width="163.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1029.5" y="1262.0">thread_native_entry(T..</text>
</g>
<g>
<title>Thread::call_run() (74 samples, 13.86%)</title><rect x="1026.5" y="1235.0" width="163.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.5" y="1246.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::run() (74 samples, 13.86%)</title><rect x="1026.5" y="1219.0" width="163.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.5" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 13.86%)</title><rect x="1026.5" y="1203.0" width="163.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.5" y="1214.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 13.86%)</title><rect x="1026.5" y="1187.0" width="163.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.5" y="1198.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (74 samples, 13.86%)</title><rect x="1026.5" y="1171.0" width="163.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.5" y="1182.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (74 samples, 13.86%)</title><rect x="1026.5" y="1155.0" width="163.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.5" y="1166.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 6.55%)</title><rect x="1026.5" y="1139.0" width="77.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.5" y="1150.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.19%)</title><rect x="1026.5" y="1123.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.5" y="1134.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.19%)</title><rect x="1026.5" y="1107.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.5" y="1118.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.19%)</title><rect x="1028.7" y="1123.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1031.7" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.19%)</title><rect x="1028.7" y="1107.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.7" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.19%)</title><rect x="1028.7" y="1091.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.56%)</title><rect x="1030.9" y="1123.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.56%)</title><rect x="1030.9" y="1107.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.19%)</title><rect x="1030.9" y="1091.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.9" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.19%)</title><rect x="1030.9" y="1075.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.9" y="1086.0"></text>
</g>
<g>
<title>MemBarNode::match(ProjNode const*, Matcher const*) (1 samples, 0.19%)</title><rect x="1033.1" y="1091.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.1" y="1102.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.19%)</title><rect x="1035.3" y="1091.0" width="2.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1038.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.75%)</title><rect x="1037.5" y="1123.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.75%)</title><rect x="1037.5" y="1107.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.19%)</title><rect x="1037.5" y="1091.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.5" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="1037.5" y="1075.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1040.5" y="1086.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="1037.5" y="1059.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1040.5" y="1070.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="1037.5" y="1043.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1040.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.19%)</title><rect x="1039.7" y="1091.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.7" y="1102.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.19%)</title><rect x="1039.7" y="1075.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.19%)</title><rect x="1041.9" y="1091.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.19%)</title><rect x="1044.2" y="1091.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.2" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="1044.2" y="1075.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1047.2" y="1086.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="1044.2" y="1059.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1047.2" y="1070.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="1044.2" y="1043.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1047.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 4.87%)</title><rect x="1046.4" y="1123.0" width="57.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.4" y="1134.0">PhaseC..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.19%)</title><rect x="1048.6" y="1107.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.6" y="1118.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.19%)</title><rect x="1050.8" y="1107.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.37%)</title><rect x="1053.0" y="1107.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.37%)</title><rect x="1053.0" y="1091.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.0" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.37%)</title><rect x="1053.0" y="1075.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.94%)</title><rect x="1057.4" y="1107.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.4" y="1118.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.19%)</title><rect x="1064.0" y="1091.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.19%)</title><rect x="1066.3" y="1091.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.3" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.19%)</title><rect x="1066.3" y="1075.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.3" y="1086.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="1066.3" y="1059.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1069.3" y="1070.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="1066.3" y="1043.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1069.3" y="1054.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="1066.3" y="1027.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1069.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.75%)</title><rect x="1068.5" y="1107.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.19%)</title><rect x="1070.7" y="1091.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.7" y="1102.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.19%)</title><rect x="1070.7" y="1075.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1073.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.19%)</title><rect x="1072.9" y="1091.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.19%)</title><rect x="1075.1" y="1091.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.1" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.19%)</title><rect x="1075.1" y="1075.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.56%)</title><rect x="1077.3" y="1107.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.37%)</title><rect x="1079.5" y="1091.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1082.5" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.37%)</title><rect x="1079.5" y="1075.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1082.5" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.37%)</title><rect x="1079.5" y="1059.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1082.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.75%)</title><rect x="1083.9" y="1107.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.9" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.37%)</title><rect x="1086.1" y="1091.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.1" y="1102.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.19%)</title><rect x="1090.6" y="1091.0" width="2.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1093.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.19%)</title><rect x="1092.8" y="1107.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.19%)</title><rect x="1095.0" y="1107.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.37%)</title><rect x="1097.2" y="1107.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.2" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="1099.4" y="1091.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1102.4" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="1099.4" y="1075.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1102.4" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="1099.4" y="1059.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1102.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.19%)</title><rect x="1101.6" y="1107.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.6" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 6.37%)</title><rect x="1103.8" y="1139.0" width="75.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.8" y="1150.0">Compile:..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (17 samples, 3.18%)</title><rect x="1103.8" y="1123.0" width="37.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.8" y="1134.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (17 samples, 3.18%)</title><rect x="1103.8" y="1107.0" width="37.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.8" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.19%)</title><rect x="1103.8" y="1091.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.19%)</title><rect x="1106.0" y="1091.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.12%)</title><rect x="1108.2" y="1091.0" width="13.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.94%)</title><rect x="1110.4" y="1075.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.19%)</title><rect x="1112.7" y="1059.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.56%)</title><rect x="1114.9" y="1059.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.56%)</title><rect x="1114.9" y="1043.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.19%)</title><rect x="1121.5" y="1091.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.19%)</title><rect x="1121.5" y="1075.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.56%)</title><rect x="1123.7" y="1091.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.37%)</title><rect x="1125.9" y="1075.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.19%)</title><rect x="1125.9" y="1059.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.9" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.19%)</title><rect x="1125.9" y="1043.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.19%)</title><rect x="1128.1" y="1059.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="1070.0"></text>
</g>
<g>
<title>AddLNode::Identity(PhaseGVN*) (1 samples, 0.19%)</title><rect x="1128.1" y="1043.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.1" y="1054.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.19%)</title><rect x="1128.1" y="1027.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.75%)</title><rect x="1130.3" y="1091.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.75%)</title><rect x="1130.3" y="1075.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.3" y="1086.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.19%)</title><rect x="1130.3" y="1059.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.3" y="1070.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.19%)</title><rect x="1130.3" y="1043.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.3" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1132.5" y="1059.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="1070.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1132.5" y="1043.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.5" y="1054.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.19%)</title><rect x="1132.5" y="1027.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.5" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.19%)</title><rect x="1132.5" y="1011.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.5" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1134.8" y="1059.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.19%)</title><rect x="1134.8" y="1043.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.8" y="1054.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.19%)</title><rect x="1134.8" y="1027.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.8" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.19%)</title><rect x="1137.0" y="1059.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.0" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.19%)</title><rect x="1137.0" y="1043.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.0" y="1054.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.19%)</title><rect x="1139.2" y="1091.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1142.2" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.258] (2 samples, 0.37%)</title><rect x="1141.4" y="1123.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.37%)</title><rect x="1145.8" y="1123.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.37%)</title><rect x="1145.8" y="1107.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1091.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1075.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1059.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1043.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1027.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="1011.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="995.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="1145.8" y="979.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="963.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="947.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="931.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="915.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="899.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="883.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="867.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="851.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="835.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="819.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="803.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="787.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="771.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="755.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="739.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1145.8" y="723.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1148.0" y="963.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1148.0" y="947.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.19%)</title><rect x="1148.0" y="931.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.19%)</title><rect x="1148.0" y="915.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.0" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.242] (1 samples, 0.19%)</title><rect x="1148.0" y="899.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 1.50%)</title><rect x="1150.2" y="1123.0" width="17.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.19%)</title><rect x="1150.2" y="1107.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.2" y="1118.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.19%)</title><rect x="1150.2" y="1091.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.75%)</title><rect x="1152.4" y="1107.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.75%)</title><rect x="1152.4" y="1091.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.19%)</title><rect x="1152.4" y="1075.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.56%)</title><rect x="1154.6" y="1075.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.56%)</title><rect x="1154.6" y="1059.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.37%)</title><rect x="1161.3" y="1107.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.3" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.19%)</title><rect x="1163.5" y="1091.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1166.5" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.19%)</title><rect x="1163.5" y="1075.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1166.5" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.19%)</title><rect x="1163.5" y="1059.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1166.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.19%)</title><rect x="1165.7" y="1107.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.19%)</title><rect x="1165.7" y="1091.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.7" y="1102.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.19%)</title><rect x="1165.7" y="1075.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.94%)</title><rect x="1167.9" y="1123.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.94%)</title><rect x="1167.9" y="1107.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="1118.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1167.9" y="1091.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.19%)</title><rect x="1167.9" y="1075.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.19%)</title><rect x="1167.9" y="1059.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.19%)</title><rect x="1170.1" y="1091.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.37%)</title><rect x="1172.3" y="1091.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="1102.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1176.7" y="1091.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.19%)</title><rect x="1176.7" y="1075.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.19%)</title><rect x="1176.7" y="1059.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.75%)</title><rect x="1179.0" y="1139.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.75%)</title><rect x="1179.0" y="1123.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.75%)</title><rect x="1179.0" y="1107.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.75%)</title><rect x="1179.0" y="1091.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.75%)</title><rect x="1179.0" y="1075.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.75%)</title><rect x="1179.0" y="1059.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.0" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.75%)</title><rect x="1179.0" y="1043.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.75%)</title><rect x="1179.0" y="1027.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.75%)</title><rect x="1179.0" y="1011.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.75%)</title><rect x="1179.0" y="995.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.75%)</title><rect x="1179.0" y="979.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.75%)</title><rect x="1179.0" y="963.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.75%)</title><rect x="1179.0" y="947.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.75%)</title><rect x="1179.0" y="931.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.75%)</title><rect x="1179.0" y="915.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.75%)</title><rect x="1179.0" y="899.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.75%)</title><rect x="1179.0" y="883.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.75%)</title><rect x="1179.0" y="867.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1179.0" y="851.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1179.0" y="835.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1179.0" y="819.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1179.0" y="803.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1179.0" y="787.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1179.0" y="771.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1179.0" y="755.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1179.0" y="739.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1179.0" y="723.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1179.0" y="707.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1179.0" y="691.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1179.0" y="675.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1179.0" y="659.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1179.0" y="643.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1179.0" y="627.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1179.0" y="611.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1179.0" y="595.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1179.0" y="579.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1179.0" y="563.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1179.0" y="547.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1179.0" y="531.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1179.0" y="515.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1179.0" y="499.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1179.0" y="483.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1179.0" y="467.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1179.0" y="451.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1179.0" y="435.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1179.0" y="419.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1179.0" y="403.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1179.0" y="387.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.0" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.19%)</title><rect x="1179.0" y="371.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.19%)</title><rect x="1179.0" y="355.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.19%)</title><rect x="1179.0" y="339.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.19%)</title><rect x="1179.0" y="323.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.19%)</title><rect x="1179.0" y="307.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.19%)</title><rect x="1179.0" y="291.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.19%)</title><rect x="1179.0" y="275.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.19%)</title><rect x="1179.0" y="259.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.19%)</title><rect x="1179.0" y="243.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.19%)</title><rect x="1179.0" y="227.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.19%)</title><rect x="1179.0" y="211.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.19%)</title><rect x="1179.0" y="195.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="206.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.19%)</title><rect x="1179.0" y="179.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="190.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.19%)</title><rect x="1179.0" y="163.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="174.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.19%)</title><rect x="1179.0" y="147.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="158.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.19%)</title><rect x="1179.0" y="131.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.19%)</title><rect x="1179.0" y="115.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="126.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (1 samples, 0.19%)</title><rect x="1179.0" y="99.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.56%)</title><rect x="1181.2" y="851.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.56%)</title><rect x="1181.2" y="835.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.56%)</title><rect x="1181.2" y="819.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.56%)</title><rect x="1181.2" y="803.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.56%)</title><rect x="1181.2" y="787.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.56%)</title><rect x="1181.2" y="771.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.56%)</title><rect x="1181.2" y="755.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.56%)</title><rect x="1181.2" y="739.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.56%)</title><rect x="1181.2" y="723.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.56%)</title><rect x="1181.2" y="707.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.56%)</title><rect x="1181.2" y="691.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.56%)</title><rect x="1181.2" y="675.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.56%)</title><rect x="1181.2" y="659.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.56%)</title><rect x="1181.2" y="643.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.56%)</title><rect x="1181.2" y="627.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.37%)</title><rect x="1181.2" y="611.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.37%)</title><rect x="1181.2" y="595.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.37%)</title><rect x="1181.2" y="579.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.37%)</title><rect x="1181.2" y="563.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.37%)</title><rect x="1181.2" y="547.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.37%)</title><rect x="1181.2" y="531.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.37%)</title><rect x="1181.2" y="515.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.37%)</title><rect x="1181.2" y="499.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.37%)</title><rect x="1181.2" y="483.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.37%)</title><rect x="1181.2" y="467.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.19%)</title><rect x="1181.2" y="451.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.19%)</title><rect x="1181.2" y="435.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.19%)</title><rect x="1181.2" y="419.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.19%)</title><rect x="1181.2" y="403.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.19%)</title><rect x="1181.2" y="387.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.19%)</title><rect x="1181.2" y="371.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.19%)</title><rect x="1181.2" y="355.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.19%)</title><rect x="1181.2" y="339.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.19%)</title><rect x="1181.2" y="323.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.19%)</title><rect x="1181.2" y="307.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.19%)</title><rect x="1181.2" y="291.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1183.4" y="451.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1183.4" y="435.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1183.4" y="419.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1183.4" y="403.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1183.4" y="387.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1183.4" y="371.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1183.4" y="355.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1183.4" y="339.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1183.4" y="323.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1183.4" y="307.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1183.4" y="291.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1183.4" y="275.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1183.4" y="259.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1183.4" y="243.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1183.4" y="227.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1183.4" y="211.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1183.4" y="195.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.19%)</title><rect x="1183.4" y="179.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.19%)</title><rect x="1183.4" y="163.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.19%)</title><rect x="1183.4" y="147.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.19%)</title><rect x="1183.4" y="131.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.19%)</title><rect x="1183.4" y="115.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.19%)</title><rect x="1183.4" y="99.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.19%)</title><rect x="1183.4" y="83.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.19%)</title><rect x="1183.4" y="67.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.19%)</title><rect x="1183.4" y="51.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="62.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.19%)</title><rect x="1183.4" y="35.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.19%)</title><rect x="1185.6" y="611.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.6" y="622.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.19%)</title><rect x="1185.6" y="595.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="606.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.19%)</title><rect x="1185.6" y="579.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.6" y="590.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.19%)</title><rect x="1187.8" y="1139.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="1150.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.19%)</title><rect x="1187.8" y="1123.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="1134.0"></text>
</g>
</g>
</svg>
