<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (239 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (2 samples, 0.84%)</title><rect x="10.0" y="883.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (2 samples, 0.84%)</title><rect x="10.0" y="867.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ref/FinalReference.&lt;init&gt; (1 samples, 0.42%)</title><rect x="14.9" y="851.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.9" y="862.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.42%)</title><rect x="14.9" y="835.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (237 samples, 99.16%)</title><rect x="19.9" y="883.0" width="1170.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (30 samples, 12.55%)</title><rect x="24.8" y="867.0" width="148.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.8" y="878.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.42%)</title><rect x="24.8" y="851.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.42%)</title><rect x="24.8" y="835.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (29 samples, 12.13%)</title><rect x="29.7" y="851.0" width="143.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.7" y="862.0">one/nio/net/Native..</text>
</g>
<g>
<title>[unknown] (28 samples, 11.72%)</title><rect x="34.7" y="835.0" width="138.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="37.7" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1 samples, 0.42%)</title><rect x="34.7" y="819.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="37.7" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.42%)</title><rect x="34.7" y="803.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="37.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.42%)</title><rect x="34.7" y="787.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="37.7" y="798.0"></text>
</g>
<g>
<title>epoll_wait (27 samples, 11.30%)</title><rect x="39.6" y="819.0" width="133.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="42.6" y="830.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 10.46%)</title><rect x="49.5" y="803.0" width="123.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="52.5" y="814.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (25 samples, 10.46%)</title><rect x="49.5" y="787.0" width="123.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.5" y="798.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (25 samples, 10.46%)</title><rect x="49.5" y="771.0" width="123.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="52.5" y="782.0">__x64_sys_epoll..</text>
</g>
<g>
<title>do_epoll_wait (25 samples, 10.46%)</title><rect x="49.5" y="755.0" width="123.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="52.5" y="766.0">do_epoll_wait</text>
</g>
<g>
<title>__fdget (1 samples, 0.42%)</title><rect x="49.5" y="739.0" width="4.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="52.5" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.42%)</title><rect x="49.5" y="723.0" width="4.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="52.5" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.42%)</title><rect x="49.5" y="707.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="52.5" y="718.0"></text>
</g>
<g>
<title>ep_poll (24 samples, 10.04%)</title><rect x="54.4" y="739.0" width="118.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="57.4" y="750.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (2 samples, 0.84%)</title><rect x="54.4" y="723.0" width="9.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="57.4" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.84%)</title><rect x="54.4" y="707.0" width="9.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.4" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (2 samples, 0.84%)</title><rect x="54.4" y="691.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="57.4" y="702.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.84%)</title><rect x="54.4" y="675.0" width="9.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="57.4" y="686.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (22 samples, 9.21%)</title><rect x="64.3" y="723.0" width="108.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="67.3" y="734.0">schedule_hrti..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (22 samples, 9.21%)</title><rect x="64.3" y="707.0" width="108.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="67.3" y="718.0">schedule_hrti..</text>
</g>
<g>
<title>schedule (22 samples, 9.21%)</title><rect x="64.3" y="691.0" width="108.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="67.3" y="702.0">schedule</text>
</g>
<g>
<title>__sched_text_start (22 samples, 9.21%)</title><rect x="64.3" y="675.0" width="108.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="67.3" y="686.0">__sched_text_..</text>
</g>
<g>
<title>finish_task_switch (22 samples, 9.21%)</title><rect x="64.3" y="659.0" width="108.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="67.3" y="670.0">finish_task_s..</text>
</g>
<g>
<title>one/nio/net/Session.process (206 samples, 86.19%)</title><rect x="172.9" y="867.0" width="1017.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (206 samples, 86.19%)</title><rect x="172.9" y="851.0" width="1017.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (199 samples, 83.26%)</title><rect x="182.8" y="835.0" width="982.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.8" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (198 samples, 82.85%)</title><rect x="182.8" y="819.0" width="977.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.8" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (198 samples, 82.85%)</title><rect x="182.8" y="803.0" width="977.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.8" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_getValueByKey.handleRequest (198 samples, 82.85%)</title><rect x="182.8" y="787.0" width="977.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.8" y="798.0">RequestHandler1_getValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (54 samples, 22.59%)</title><rect x="182.8" y="771.0" width="266.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.8" y="782.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (54 samples, 22.59%)</title><rect x="182.8" y="755.0" width="266.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.8" y="766.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/net/Session.write (54 samples, 22.59%)</title><rect x="182.8" y="739.0" width="266.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.8" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (54 samples, 22.59%)</title><rect x="182.8" y="723.0" width="266.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.8" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (54 samples, 22.59%)</title><rect x="182.8" y="707.0" width="266.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.8" y="718.0">one/nio/net/Session$ArrayQueueItem.w..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (54 samples, 22.59%)</title><rect x="182.8" y="691.0" width="266.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.8" y="702.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>__libc_send (53 samples, 22.18%)</title><rect x="187.7" y="675.0" width="261.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="190.7" y="686.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (53 samples, 22.18%)</title><rect x="187.7" y="659.0" width="261.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="190.7" y="670.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (53 samples, 22.18%)</title><rect x="187.7" y="643.0" width="261.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="190.7" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (47 samples, 19.67%)</title><rect x="187.7" y="627.0" width="232.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="190.7" y="638.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (47 samples, 19.67%)</title><rect x="187.7" y="611.0" width="232.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="190.7" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (46 samples, 19.25%)</title><rect x="187.7" y="595.0" width="227.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="190.7" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (46 samples, 19.25%)</title><rect x="187.7" y="579.0" width="227.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="190.7" y="590.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (46 samples, 19.25%)</title><rect x="187.7" y="563.0" width="227.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="190.7" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (46 samples, 19.25%)</title><rect x="187.7" y="547.0" width="227.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="190.7" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.42%)</title><rect x="187.7" y="531.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="190.7" y="542.0"></text>
</g>
<g>
<title>tcp_push (45 samples, 18.83%)</title><rect x="192.7" y="531.0" width="222.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="195.7" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (45 samples, 18.83%)</title><rect x="192.7" y="515.0" width="222.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="195.7" y="526.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (45 samples, 18.83%)</title><rect x="192.7" y="499.0" width="222.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="195.7" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (44 samples, 18.41%)</title><rect x="192.7" y="483.0" width="217.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="195.7" y="494.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (43 samples, 17.99%)</title><rect x="197.6" y="467.0" width="212.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.6" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (43 samples, 17.99%)</title><rect x="197.6" y="451.0" width="212.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="200.6" y="462.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (43 samples, 17.99%)</title><rect x="197.6" y="435.0" width="212.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="200.6" y="446.0">ip_local_out</text>
</g>
<g>
<title>ip_output (43 samples, 17.99%)</title><rect x="197.6" y="419.0" width="212.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="200.6" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (43 samples, 17.99%)</title><rect x="197.6" y="403.0" width="212.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.6" y="414.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.42%)</title><rect x="197.6" y="387.0" width="5.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="200.6" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (42 samples, 17.57%)</title><rect x="202.6" y="387.0" width="207.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="205.6" y="398.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (42 samples, 17.57%)</title><rect x="202.6" y="371.0" width="207.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="205.6" y="382.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (42 samples, 17.57%)</title><rect x="202.6" y="355.0" width="207.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="205.6" y="366.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.20 (42 samples, 17.57%)</title><rect x="202.6" y="339.0" width="207.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="205.6" y="350.0">do_softirq.part.20</text>
</g>
<g>
<title>do_softirq_own_stack (42 samples, 17.57%)</title><rect x="202.6" y="323.0" width="207.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="205.6" y="334.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (42 samples, 17.57%)</title><rect x="202.6" y="307.0" width="207.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="205.6" y="318.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (42 samples, 17.57%)</title><rect x="202.6" y="291.0" width="207.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="205.6" y="302.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (42 samples, 17.57%)</title><rect x="202.6" y="275.0" width="207.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="205.6" y="286.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (42 samples, 17.57%)</title><rect x="202.6" y="259.0" width="207.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="205.6" y="270.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_one_core (42 samples, 17.57%)</title><rect x="202.6" y="243.0" width="207.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="205.6" y="254.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>ip_rcv (42 samples, 17.57%)</title><rect x="202.6" y="227.0" width="207.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="205.6" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (42 samples, 17.57%)</title><rect x="202.6" y="211.0" width="207.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="205.6" y="222.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (42 samples, 17.57%)</title><rect x="202.6" y="195.0" width="207.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="205.6" y="206.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (42 samples, 17.57%)</title><rect x="202.6" y="179.0" width="207.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="205.6" y="190.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (42 samples, 17.57%)</title><rect x="202.6" y="163.0" width="207.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="205.6" y="174.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>tcp_v4_rcv (42 samples, 17.57%)</title><rect x="202.6" y="147.0" width="207.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="205.6" y="158.0">tcp_v4_rcv</text>
</g>
<g>
<title>tcp_v4_do_rcv (42 samples, 17.57%)</title><rect x="202.6" y="131.0" width="207.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="205.6" y="142.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (42 samples, 17.57%)</title><rect x="202.6" y="115.0" width="207.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="205.6" y="126.0">tcp_rcv_established</text>
</g>
<g>
<title>tcp_data_ready (42 samples, 17.57%)</title><rect x="202.6" y="99.0" width="207.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="205.6" y="110.0">tcp_data_ready</text>
</g>
<g>
<title>sock_def_readable (42 samples, 17.57%)</title><rect x="202.6" y="83.0" width="207.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="205.6" y="94.0">sock_def_readable</text>
</g>
<g>
<title>__wake_up_sync_key (42 samples, 17.57%)</title><rect x="202.6" y="67.0" width="207.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="205.6" y="78.0">__wake_up_sync_key</text>
</g>
<g>
<title>__wake_up_common_lock (42 samples, 17.57%)</title><rect x="202.6" y="51.0" width="207.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="205.6" y="62.0">__wake_up_common_lock</text>
</g>
<g>
<title>__lock_text_start (42 samples, 17.57%)</title><rect x="202.6" y="35.0" width="207.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="205.6" y="46.0">__lock_text_start</text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.42%)</title><rect x="409.9" y="483.0" width="5.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="412.9" y="494.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.42%)</title><rect x="414.9" y="595.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.9" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.42%)</title><rect x="414.9" y="579.0" width="4.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="417.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.42%)</title><rect x="414.9" y="563.0" width="4.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="417.9" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.42%)</title><rect x="414.9" y="547.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.9" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 2.51%)</title><rect x="419.8" y="627.0" width="29.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="422.8" y="638.0">ex..</text>
</g>
<g>
<title>schedule (6 samples, 2.51%)</title><rect x="419.8" y="611.0" width="29.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="422.8" y="622.0">sc..</text>
</g>
<g>
<title>__sched_text_start (6 samples, 2.51%)</title><rect x="419.8" y="595.0" width="29.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="422.8" y="606.0">__..</text>
</g>
<g>
<title>finish_task_switch (6 samples, 2.51%)</title><rect x="419.8" y="579.0" width="29.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="422.8" y="590.0">fi..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.42%)</title><rect x="449.4" y="771.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.42%)</title><rect x="449.4" y="755.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.42%)</title><rect x="449.4" y="739.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.42%)</title><rect x="449.4" y="723.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey (143 samples, 59.83%)</title><rect x="454.4" y="771.0" width="706.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.4" y="782.0">ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (142 samples, 59.41%)</title><rect x="454.4" y="755.0" width="701.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="457.4" y="766.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.iterator (137 samples, 57.32%)</title><rect x="454.4" y="739.0" width="676.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.4" y="750.0">ru/mail/polis/dao/basta123/MyDAORocksDB.iterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (20 samples, 8.37%)</title><rect x="454.4" y="723.0" width="98.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.4" y="734.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (12 samples, 5.02%)</title><rect x="454.4" y="707.0" width="59.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="457.4" y="718.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (11 samples, 4.60%)</title><rect x="454.4" y="691.0" width="54.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="457.4" y="702.0">Java_..</text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (10 samples, 4.18%)</title><rect x="459.3" y="675.0" width="49.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="462.3" y="686.0">rocks..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.42%)</title><rect x="459.3" y="659.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="462.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (9 samples, 3.77%)</title><rect x="464.2" y="659.0" width="44.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="467.2" y="670.0">rock..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Init(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (1 samples, 0.42%)</title><rect x="464.2" y="643.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="467.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 1.26%)</title><rect x="469.2" y="643.0" width="14.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="472.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.42%)</title><rect x="474.1" y="627.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="477.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.42%)</title><rect x="474.1" y="611.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="477.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.42%)</title><rect x="479.0" y="627.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.42%)</title><rect x="484.0" y="643.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="487.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (2 samples, 0.84%)</title><rect x="488.9" y="643.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::MergeIteratorBuilder(rocksdb::InternalKeyComparator const*, rocksdb::Arena*, bool) (1 samples, 0.42%)</title><rect x="488.9" y="627.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="491.9" y="638.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (1 samples, 0.42%)</title><rect x="493.8" y="627.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="496.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (1 samples, 0.42%)</title><rect x="498.8" y="643.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::ForwardRangeDelIterator::ForwardRangeDelIterator(rocksdb::InternalKeyComparator const*) (1 samples, 0.42%)</title><rect x="498.8" y="627.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::AddIterators(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::MergeIteratorBuilder*, rocksdb::RangeDelAggregator*) (1 samples, 0.42%)</title><rect x="503.7" y="643.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.7" y="654.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.42%)</title><rect x="508.7" y="691.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="511.7" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (8 samples, 3.35%)</title><rect x="513.6" y="707.0" width="39.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="516.6" y="718.0">org..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (8 samples, 3.35%)</title><rect x="513.6" y="691.0" width="39.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="516.6" y="702.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (8 samples, 3.35%)</title><rect x="513.6" y="675.0" width="39.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.6" y="686.0">org..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (7 samples, 2.93%)</title><rect x="518.5" y="659.0" width="34.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="521.5" y="670.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (6 samples, 2.51%)</title><rect x="518.5" y="643.0" width="29.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="521.5" y="654.0">or..</text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 2.51%)</title><rect x="518.5" y="627.0" width="29.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.5" y="638.0">ja..</text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (6 samples, 2.51%)</title><rect x="518.5" y="611.0" width="29.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.5" y="622.0">Op..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.42%)</title><rect x="518.5" y="595.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="521.5" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::method_with_idnum(int) (1 samples, 0.42%)</title><rect x="523.5" y="595.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="526.5" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (4 samples, 1.67%)</title><rect x="528.4" y="595.0" width="19.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="531.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::method_with_idnum(int) (2 samples, 0.84%)</title><rect x="533.3" y="579.0" width="9.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="536.3" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="543.2" y="579.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="546.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.42%)</title><rect x="543.2" y="563.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.2" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (1 samples, 0.42%)</title><rect x="548.2" y="643.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt; (106 samples, 44.35%)</title><rect x="553.1" y="723.0" width="523.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="556.1" y="734.0">ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (106 samples, 44.35%)</title><rect x="553.1" y="707.0" width="523.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.1" y="718.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (106 samples, 44.35%)</title><rect x="553.1" y="691.0" width="523.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="556.1" y="702.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (73 samples, 30.54%)</title><rect x="553.1" y="675.0" width="360.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="556.1" y="686.0">Java_org_rocksdb_RocksIterator_seek0</text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (73 samples, 30.54%)</title><rect x="553.1" y="659.0" width="360.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="556.1" y="670.0">rocksdb::DBIter::Seek(rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (72 samples, 30.13%)</title><rect x="558.0" y="643.0" width="355.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="561.0" y="654.0">rocksdb::MemTableIterator::Seek(rocksdb::Slice c..</text>
</g>
<g>
<title>/tmp/librocksdbjni18314356534234574645.so (72 samples, 30.13%)</title><rect x="558.0" y="627.0" width="355.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="561.0" y="638.0">/tmp/librocksdbjni18314356534234574645.so</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (71 samples, 29.71%)</title><rect x="558.0" y="611.0" width="350.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="561.0" y="622.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::Ke..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.84%)</title><rect x="572.8" y="595.0" width="9.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="575.8" y="606.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="582.7" y="595.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="585.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (65 samples, 27.20%)</title><rect x="587.7" y="595.0" width="320.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.7" y="606.0">rocksdb::MemTable::KeyComparator::operator(..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.84%)</title><rect x="587.7" y="579.0" width="9.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="590.7" y="590.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.42%)</title><rect x="597.5" y="579.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="600.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (59 samples, 24.69%)</title><rect x="602.5" y="579.0" width="291.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="605.5" y="590.0">rocksdb::BaseComparatorJniCallback::Com..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (17 samples, 7.11%)</title><rect x="612.3" y="563.0" width="84.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="615.3" y="574.0">JNIEnv_::..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.42%)</title><rect x="612.3" y="547.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="615.3" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (16 samples, 6.69%)</title><rect x="617.3" y="547.0" width="79.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="620.3" y="558.0">jni_CallI..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.42%)</title><rect x="622.2" y="531.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="625.2" y="542.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.42%)</title><rect x="627.2" y="531.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="630.2" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.42%)</title><rect x="632.1" y="531.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="635.1" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="637.0" y="531.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.0" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (11 samples, 4.60%)</title><rect x="642.0" y="531.0" width="54.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="645.0" y="542.0">jni_i..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.84%)</title><rect x="651.8" y="515.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="654.8" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.42%)</title><rect x="661.7" y="515.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="664.7" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 2.51%)</title><rect x="666.7" y="515.0" width="29.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="669.7" y="526.0">Ja..</text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.42%)</title><rect x="681.5" y="499.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="684.5" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.42%)</title><rect x="686.4" y="499.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="689.4" y="510.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.42%)</title><rect x="691.3" y="499.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="694.3" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (30 samples, 12.55%)</title><rect x="696.3" y="563.0" width="148.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="699.3" y="574.0">JNIEnv_::CallVoidMe..</text>
</g>
<g>
<title>jni_CallVoidMethodV (29 samples, 12.13%)</title><rect x="701.2" y="547.0" width="143.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="704.2" y="558.0">jni_CallVoidMethodV</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.42%)</title><rect x="706.2" y="531.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="709.2" y="542.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.42%)</title><rect x="711.1" y="531.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.1" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.42%)</title><rect x="716.0" y="531.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="719.0" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="721.0" y="531.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="724.0" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (24 samples, 10.04%)</title><rect x="725.9" y="531.0" width="118.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="728.9" y="542.0">jni_invoke_non..</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.42%)</title><rect x="755.5" y="515.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="758.5" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.84%)</title><rect x="760.5" y="515.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.5" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (11 samples, 4.60%)</title><rect x="770.3" y="515.0" width="54.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="773.3" y="526.0">JavaC..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.42%)</title><rect x="775.3" y="499.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="778.3" y="510.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.42%)</title><rect x="780.2" y="499.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.2" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.42%)</title><rect x="785.1" y="499.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.1" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 1.26%)</title><rect x="790.1" y="499.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="793.1" y="510.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.84%)</title><rect x="804.9" y="499.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="807.9" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.84%)</title><rect x="814.8" y="499.0" width="9.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="817.8" y="510.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.42%)</title><rect x="819.7" y="483.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="822.7" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.42%)</title><rect x="824.6" y="515.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="827.6" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.42%)</title><rect x="829.6" y="515.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.6" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.84%)</title><rect x="834.5" y="515.0" width="9.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="837.5" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.84%)</title><rect x="844.4" y="563.0" width="9.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="847.4" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.42%)</title><rect x="844.4" y="547.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.4" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="849.3" y="547.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="852.3" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.42%)</title><rect x="854.3" y="563.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="857.3" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.42%)</title><rect x="859.2" y="563.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="862.2" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.42%)</title><rect x="864.1" y="563.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="867.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (5 samples, 2.09%)</title><rect x="869.1" y="563.0" width="24.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.1" y="574.0">r..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 1.26%)</title><rect x="879.0" y="547.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.84%)</title><rect x="893.8" y="579.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.42%)</title><rect x="903.6" y="579.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="908.6" y="611.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.6" y="622.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.84%)</title><rect x="913.5" y="675.0" width="9.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.5" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (4 samples, 1.67%)</title><rect x="923.4" y="675.0" width="19.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (27 samples, 11.30%)</title><rect x="943.1" y="675.0" width="133.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="946.1" y="686.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (27 samples, 11.30%)</title><rect x="943.1" y="659.0" width="133.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.1" y="670.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.42%)</title><rect x="943.1" y="643.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="946.1" y="654.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.42%)</title><rect x="943.1" y="627.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="946.1" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (26 samples, 10.88%)</title><rect x="948.1" y="643.0" width="128.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="951.1" y="654.0">org/rocksdb/Abst..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (1 samples, 0.42%)</title><rect x="948.1" y="627.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.1" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (25 samples, 10.46%)</title><rect x="953.0" y="627.0" width="123.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.0" y="638.0">org/rocksdb/Sli..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (25 samples, 10.46%)</title><rect x="953.0" y="611.0" width="123.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.0" y="622.0">org/rocksdb/Sli..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (25 samples, 10.46%)</title><rect x="953.0" y="595.0" width="123.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="956.0" y="606.0">Java_org_rocksd..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.42%)</title><rect x="953.0" y="579.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.0" y="590.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.42%)</title><rect x="957.9" y="579.0" width="5.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="960.9" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 1.26%)</title><rect x="962.9" y="579.0" width="14.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="965.9" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.84%)</title><rect x="962.9" y="563.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="965.9" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="972.8" y="563.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.8" y="574.0"></text>
</g>
<g>
<title>jni_NewByteArray (14 samples, 5.86%)</title><rect x="977.7" y="579.0" width="69.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="980.7" y="590.0">jni_New..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.42%)</title><rect x="987.6" y="563.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.42%)</title><rect x="992.5" y="563.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.5" y="574.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.42%)</title><rect x="997.4" y="563.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.4" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.42%)</title><rect x="1002.4" y="563.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.4" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 3.35%)</title><rect x="1007.3" y="563.0" width="39.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.3" y="574.0">Typ..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 3.35%)</title><rect x="1007.3" y="547.0" width="39.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.3" y="558.0">Col..</text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 2.93%)</title><rect x="1007.3" y="531.0" width="34.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.3" y="542.0">Me..</text>
</g>
<g>
<title>__memset_avx2_unaligned (4 samples, 1.67%)</title><rect x="1017.2" y="515.0" width="19.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1020.2" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.42%)</title><rect x="1036.9" y="515.0" width="5.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1039.9" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.42%)</title><rect x="1041.9" y="531.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.9" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 2.51%)</title><rect x="1046.8" y="579.0" width="29.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1049.8" y="590.0">jn..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.84%)</title><rect x="1061.6" y="563.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.6" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.42%)</title><rect x="1071.5" y="563.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1074.5" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.42%)</title><rect x="1071.5" y="547.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.close (11 samples, 4.60%)</title><rect x="1076.4" y="723.0" width="54.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.4" y="734.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (11 samples, 4.60%)</title><rect x="1076.4" y="707.0" width="54.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.4" y="718.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (11 samples, 4.60%)</title><rect x="1076.4" y="691.0" width="54.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1079.4" y="702.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (11 samples, 4.60%)</title><rect x="1076.4" y="675.0" width="54.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1079.4" y="686.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_disposeInternal (1 samples, 0.42%)</title><rect x="1076.4" y="659.0" width="5.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1079.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (10 samples, 4.18%)</title><rect x="1081.4" y="659.0" width="49.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.4" y="670.0">rocks..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (8 samples, 3.35%)</title><rect x="1091.3" y="643.0" width="39.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.3" y="654.0">roc..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.84%)</title><rect x="1091.3" y="627.0" width="9.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1094.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::Arena::~Arena() (1 samples, 0.42%)</title><rect x="1101.1" y="627.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (4 samples, 1.67%)</title><rect x="1106.1" y="627.0" width="19.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (2 samples, 0.84%)</title><rect x="1115.9" y="611.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.9" y="622.0"></text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (1 samples, 0.42%)</title><rect x="1115.9" y="595.0" width="5.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1118.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.42%)</title><rect x="1120.9" y="595.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::SuperVersion::Unref() (1 samples, 0.42%)</title><rect x="1120.9" y="579.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.9" y="590.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::TruncatedRangeDelIterator*, rocksdb::TruncatedRangeDelIterator*, std::_Identity&lt;rocksdb::TruncatedRangeDelIterator*&gt;, rocksdb::SeqMaxComparator, std::allocator&lt;rocksdb::TruncatedRangeDelIterator*&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;rocksdb::TruncatedRangeDelIterator*&gt;*) (1 samples, 0.42%)</title><rect x="1125.8" y="627.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (5 samples, 2.09%)</title><rect x="1130.8" y="739.0" width="24.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.8" y="750.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (5 samples, 2.09%)</title><rect x="1130.8" y="723.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1133.8" y="734.0">r..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (3 samples, 1.26%)</title><rect x="1130.8" y="707.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1133.8" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (3 samples, 1.26%)</title><rect x="1130.8" y="691.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1133.8" y="702.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.42%)</title><rect x="1130.8" y="675.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1133.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (1 samples, 0.42%)</title><rect x="1135.7" y="675.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (1 samples, 0.42%)</title><rect x="1135.7" y="659.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.42%)</title><rect x="1135.7" y="643.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.42%)</title><rect x="1135.7" y="627.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.42%)</title><rect x="1135.7" y="611.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1138.7" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.42%)</title><rect x="1135.7" y="595.0" width="4.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1138.7" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.42%)</title><rect x="1135.7" y="579.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.42%)</title><rect x="1135.7" y="563.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (1 samples, 0.42%)</title><rect x="1140.6" y="675.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1143.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (1 samples, 0.42%)</title><rect x="1140.6" y="659.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1143.6" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (1 samples, 0.42%)</title><rect x="1140.6" y="643.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.6" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.42%)</title><rect x="1140.6" y="627.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.6" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.42%)</title><rect x="1140.6" y="611.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1143.6" y="622.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (1 samples, 0.42%)</title><rect x="1140.6" y="595.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1143.6" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.42%)</title><rect x="1140.6" y="579.0" width="5.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1143.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.42%)</title><rect x="1140.6" y="563.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.6" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value (1 samples, 0.42%)</title><rect x="1145.6" y="707.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1148.6" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (1 samples, 0.42%)</title><rect x="1145.6" y="691.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1148.6" y="702.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_value0 (1 samples, 0.42%)</title><rect x="1145.6" y="675.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1148.6" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.42%)</title><rect x="1145.6" y="659.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1148.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.42%)</title><rect x="1150.5" y="707.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1153.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.42%)</title><rect x="1150.5" y="691.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.42%)</title><rect x="1150.5" y="675.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.42%)</title><rect x="1150.5" y="659.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.5" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.value0 (1 samples, 0.42%)</title><rect x="1150.5" y="643.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.42%)</title><rect x="1155.4" y="755.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1158.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.42%)</title><rect x="1155.4" y="739.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1158.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.42%)</title><rect x="1155.4" y="723.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1158.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.42%)</title><rect x="1160.4" y="819.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1163.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.42%)</title><rect x="1160.4" y="803.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1163.4" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 2.09%)</title><rect x="1165.3" y="835.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1168.3" y="846.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (5 samples, 2.09%)</title><rect x="1165.3" y="819.0" width="24.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1168.3" y="830.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 1.26%)</title><rect x="1165.3" y="803.0" width="14.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1168.3" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.42%)</title><rect x="1165.3" y="787.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.84%)</title><rect x="1170.3" y="787.0" width="9.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1173.3" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.84%)</title><rect x="1170.3" y="771.0" width="9.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1173.3" y="782.0"></text>
</g>
<g>
<title>__GI___recv (2 samples, 0.84%)</title><rect x="1180.1" y="803.0" width="9.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1183.1" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.84%)</title><rect x="1180.1" y="787.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1183.1" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.84%)</title><rect x="1180.1" y="771.0" width="9.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1183.1" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.84%)</title><rect x="1180.1" y="755.0" width="9.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1183.1" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (2 samples, 0.84%)</title><rect x="1180.1" y="739.0" width="9.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1183.1" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (2 samples, 0.84%)</title><rect x="1180.1" y="723.0" width="9.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1183.1" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.42%)</title><rect x="1180.1" y="707.0" width="5.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1183.1" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.42%)</title><rect x="1180.1" y="691.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.42%)</title><rect x="1180.1" y="675.0" width="5.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1183.1" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.42%)</title><rect x="1180.1" y="659.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.42%)</title><rect x="1180.1" y="643.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1183.1" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.42%)</title><rect x="1180.1" y="627.0" width="5.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1183.1" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.42%)</title><rect x="1180.1" y="611.0" width="5.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1183.1" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.42%)</title><rect x="1185.1" y="707.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1188.1" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.42%)</title><rect x="1185.1" y="691.0" width="4.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1188.1" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.42%)</title><rect x="1185.1" y="675.0" width="4.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1188.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.42%)</title><rect x="1185.1" y="659.0" width="4.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1188.1" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.4 (1 samples, 0.42%)</title><rect x="1185.1" y="643.0" width="4.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1188.1" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.42%)</title><rect x="1185.1" y="627.0" width="4.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1188.1" y="638.0"></text>
</g>
</g>
</svg>
