<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (733 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 1.09%)</title><rect x="10.0" y="883.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (8 samples, 1.09%)</title><rect x="10.0" y="867.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (8 samples, 1.09%)</title><rect x="10.0" y="851.0" width="12.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.55%)</title><rect x="10.0" y="835.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.14%)</title><rect x="10.0" y="819.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.27%)</title><rect x="11.6" y="819.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.6" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.27%)</title><rect x="11.6" y="803.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="14.6" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.27%)</title><rect x="11.6" y="787.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="14.6" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.27%)</title><rect x="11.6" y="771.0" width="3.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="14.6" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.14%)</title><rect x="14.8" y="819.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="17.8" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="16.4" y="835.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="19.4" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="16.4" y="819.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="19.4" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="16.4" y="803.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="19.4" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="16.4" y="787.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="19.4" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.14%)</title><rect x="18.0" y="835.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.0" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.27%)</title><rect x="19.7" y="835.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="22.7" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.27%)</title><rect x="19.7" y="819.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="22.7" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.27%)</title><rect x="19.7" y="803.0" width="3.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="22.7" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (7 samples, 0.95%)</title><rect x="22.9" y="883.0" width="11.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.9" y="894.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2 samples, 0.27%)</title><rect x="22.9" y="867.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.9" y="878.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.27%)</title><rect x="22.9" y="851.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.27%)</title><rect x="22.9" y="835.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="25.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.27%)</title><rect x="22.9" y="819.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.27%)</title><rect x="22.9" y="803.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="25.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.27%)</title><rect x="22.9" y="787.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.27%)</title><rect x="22.9" y="771.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.27%)</title><rect x="22.9" y="755.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.27%)</title><rect x="22.9" y="739.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="25.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.27%)</title><rect x="22.9" y="723.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.27%)</title><rect x="22.9" y="707.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.27%)</title><rect x="22.9" y="691.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.27%)</title><rect x="22.9" y="675.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.9" y="686.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.27%)</title><rect x="22.9" y="659.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.9" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (2 samples, 0.27%)</title><rect x="22.9" y="643.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="25.9" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (2 samples, 0.27%)</title><rect x="22.9" y="627.0" width="3.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="25.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.27%)</title><rect x="22.9" y="611.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="25.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.27%)</title><rect x="22.9" y="595.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="25.9" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.27%)</title><rect x="22.9" y="579.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.9" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.27%)</title><rect x="22.9" y="563.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.9" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.27%)</title><rect x="22.9" y="547.0" width="3.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.9" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.27%)</title><rect x="22.9" y="531.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="25.9" y="542.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.27%)</title><rect x="22.9" y="515.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="25.9" y="526.0"></text>
</g>
<g>
<title>call_stub (5 samples, 0.68%)</title><rect x="26.1" y="867.0" width="8.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="29.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 1.77%)</title><rect x="34.1" y="883.0" width="21.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="37.1" y="894.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.14%)</title><rect x="34.1" y="867.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="37.1" y="878.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (12 samples, 1.64%)</title><rect x="35.8" y="867.0" width="19.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="38.8" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.64%)</title><rect x="35.8" y="851.0" width="19.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="38.8" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.64%)</title><rect x="35.8" y="835.0" width="19.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="38.8" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 1.50%)</title><rect x="37.4" y="819.0" width="17.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="40.4" y="830.0"></text>
</g>
<g>
<title>do_futex (11 samples, 1.50%)</title><rect x="37.4" y="803.0" width="17.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="40.4" y="814.0"></text>
</g>
<g>
<title>futex_wait (11 samples, 1.50%)</title><rect x="37.4" y="787.0" width="17.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="40.4" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (10 samples, 1.36%)</title><rect x="37.4" y="771.0" width="16.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="40.4" y="782.0"></text>
</g>
<g>
<title>schedule (10 samples, 1.36%)</title><rect x="37.4" y="755.0" width="16.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="40.4" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (10 samples, 1.36%)</title><rect x="37.4" y="739.0" width="16.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="40.4" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (10 samples, 1.36%)</title><rect x="37.4" y="723.0" width="16.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="40.4" y="734.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.14%)</title><rect x="53.5" y="771.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="56.5" y="782.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.14%)</title><rect x="53.5" y="755.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="56.5" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (69 samples, 9.41%)</title><rect x="55.1" y="883.0" width="111.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="58.1" y="894.0">[unknown_Java]</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (26 samples, 3.55%)</title><rect x="55.1" y="867.0" width="41.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="58.1" y="878.0">Jav..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (26 samples, 3.55%)</title><rect x="55.1" y="851.0" width="41.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.1" y="862.0">roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 3.55%)</title><rect x="55.1" y="835.0" width="41.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="58.1" y="846.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 3.55%)</title><rect x="55.1" y="819.0" width="41.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="58.1" y="830.0">roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 3.55%)</title><rect x="55.1" y="803.0" width="41.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="58.1" y="814.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (26 samples, 3.55%)</title><rect x="55.1" y="787.0" width="41.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="58.1" y="798.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (26 samples, 3.55%)</title><rect x="55.1" y="771.0" width="41.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="58.1" y="782.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (26 samples, 3.55%)</title><rect x="55.1" y="755.0" width="41.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="58.1" y="766.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (26 samples, 3.55%)</title><rect x="55.1" y="739.0" width="41.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="58.1" y="750.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (26 samples, 3.55%)</title><rect x="55.1" y="723.0" width="41.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="58.1" y="734.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 3.55%)</title><rect x="55.1" y="707.0" width="41.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.1" y="718.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (26 samples, 3.55%)</title><rect x="55.1" y="691.0" width="41.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="58.1" y="702.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (26 samples, 3.55%)</title><rect x="55.1" y="675.0" width="41.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.1" y="686.0">roc..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (26 samples, 3.55%)</title><rect x="55.1" y="659.0" width="41.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="58.1" y="670.0">boo..</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (26 samples, 3.55%)</title><rect x="55.1" y="643.0" width="41.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="58.1" y="654.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (26 samples, 3.55%)</title><rect x="55.1" y="627.0" width="41.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="58.1" y="638.0">/tm..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 3.55%)</title><rect x="55.1" y="611.0" width="41.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.1" y="622.0">roc..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (26 samples, 3.55%)</title><rect x="55.1" y="595.0" width="41.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.1" y="606.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (13 samples, 1.77%)</title><rect x="55.1" y="579.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="58.1" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (13 samples, 1.77%)</title><rect x="55.1" y="563.0" width="20.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="58.1" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (13 samples, 1.77%)</title><rect x="55.1" y="547.0" width="20.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="58.1" y="558.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.27%)</title><rect x="55.1" y="531.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="58.1" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (11 samples, 1.50%)</title><rect x="58.3" y="531.0" width="17.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="61.3" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.41%)</title><rect x="59.9" y="515.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="62.9" y="526.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.27%)</title><rect x="64.7" y="515.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="67.7" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (5 samples, 0.68%)</title><rect x="68.0" y="515.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="71.0" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (13 samples, 1.77%)</title><rect x="76.0" y="579.0" width="20.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="79.0" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (13 samples, 1.77%)</title><rect x="76.0" y="563.0" width="20.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="79.0" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (13 samples, 1.77%)</title><rect x="76.0" y="547.0" width="20.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="79.0" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (13 samples, 1.77%)</title><rect x="76.0" y="531.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="79.0" y="542.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.41%)</title><rect x="88.9" y="515.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="91.9" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.27%)</title><rect x="93.7" y="515.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="96.7" y="526.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.14%)</title><rect x="95.3" y="499.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="98.3" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 5.73%)</title><rect x="96.9" y="867.0" width="67.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="99.9" y="878.0">__pthre..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (41 samples, 5.59%)</title><rect x="98.5" y="851.0" width="66.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="101.5" y="862.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (41 samples, 5.59%)</title><rect x="98.5" y="835.0" width="66.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="101.5" y="846.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_futex (40 samples, 5.46%)</title><rect x="98.5" y="819.0" width="64.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="101.5" y="830.0">__x64_s..</text>
</g>
<g>
<title>do_futex (40 samples, 5.46%)</title><rect x="98.5" y="803.0" width="64.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="101.5" y="814.0">do_futex</text>
</g>
<g>
<title>futex_wake (40 samples, 5.46%)</title><rect x="98.5" y="787.0" width="64.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="101.5" y="798.0">futex_w..</text>
</g>
<g>
<title>get_futex_key (1 samples, 0.14%)</title><rect x="105.0" y="771.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="108.0" y="782.0"></text>
</g>
<g>
<title>wake_up_q (35 samples, 4.77%)</title><rect x="106.6" y="771.0" width="56.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="109.6" y="782.0">wake_u..</text>
</g>
<g>
<title>try_to_wake_up (35 samples, 4.77%)</title><rect x="106.6" y="755.0" width="56.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="109.6" y="766.0">try_to..</text>
</g>
<g>
<title>__lock_text_start (35 samples, 4.77%)</title><rect x="106.6" y="739.0" width="56.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="109.6" y="750.0">__lock..</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="162.9" y="819.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="165.9" y="830.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.14%)</title><rect x="162.9" y="803.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="165.9" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.14%)</title><rect x="162.9" y="787.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="165.9" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.14%)</title><rect x="162.9" y="771.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="165.9" y="782.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.14%)</title><rect x="164.5" y="867.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="167.5" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.41%)</title><rect x="166.2" y="883.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="169.2" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.27%)</title><rect x="166.2" y="867.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="169.2" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.27%)</title><rect x="166.2" y="851.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="169.2" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.27%)</title><rect x="166.2" y="835.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="169.2" y="846.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.27%)</title><rect x="166.2" y="819.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.2" y="830.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.27%)</title><rect x="166.2" y="803.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.2" y="814.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.14%)</title><rect x="166.2" y="787.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="169.2" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.14%)</title><rect x="166.2" y="771.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="169.2" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.14%)</title><rect x="166.2" y="755.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="169.2" y="766.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.14%)</title><rect x="167.8" y="787.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="170.8" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="169.4" y="867.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="172.4" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="169.4" y="851.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="172.4" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="169.4" y="835.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="172.4" y="846.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (633 samples, 86.36%)</title><rect x="171.0" y="883.0" width="1019.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (12 samples, 1.64%)</title><rect x="172.6" y="867.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (12 samples, 1.64%)</title><rect x="172.6" y="851.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.6" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.14%)</title><rect x="172.6" y="835.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="175.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 1.50%)</title><rect x="174.2" y="835.0" width="17.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="177.2" y="846.0"></text>
</g>
<g>
<title>epoll_wait (11 samples, 1.50%)</title><rect x="174.2" y="819.0" width="17.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="177.2" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 1.50%)</title><rect x="174.2" y="803.0" width="17.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="177.2" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 1.50%)</title><rect x="174.2" y="787.0" width="17.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="177.2" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (11 samples, 1.50%)</title><rect x="174.2" y="771.0" width="17.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="177.2" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (11 samples, 1.50%)</title><rect x="174.2" y="755.0" width="17.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="177.2" y="766.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.27%)</title><rect x="174.2" y="739.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="177.2" y="750.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.27%)</title><rect x="174.2" y="723.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="177.2" y="734.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.27%)</title><rect x="174.2" y="707.0" width="3.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="177.2" y="718.0"></text>
</g>
<g>
<title>ep_poll (9 samples, 1.23%)</title><rect x="177.4" y="739.0" width="14.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="180.4" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (8 samples, 1.09%)</title><rect x="179.0" y="723.0" width="12.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="182.0" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (8 samples, 1.09%)</title><rect x="179.0" y="707.0" width="12.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="182.0" y="718.0"></text>
</g>
<g>
<title>schedule (8 samples, 1.09%)</title><rect x="179.0" y="691.0" width="12.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="182.0" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (8 samples, 1.09%)</title><rect x="179.0" y="675.0" width="12.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="182.0" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 1.09%)</title><rect x="179.0" y="659.0" width="12.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="182.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (620 samples, 84.58%)</title><rect x="191.9" y="867.0" width="998.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.9" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (620 samples, 84.58%)</title><rect x="191.9" y="851.0" width="998.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (605 samples, 82.54%)</title><rect x="191.9" y="835.0" width="974.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.9" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.14%)</title><rect x="191.9" y="819.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="194.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (601 samples, 81.99%)</title><rect x="193.5" y="819.0" width="967.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.5" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (601 samples, 81.99%)</title><rect x="193.5" y="803.0" width="967.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.5" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_putValueByKey.handleRequest (600 samples, 81.86%)</title><rect x="193.5" y="787.0" width="965.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.5" y="798.0">RequestHandler3_putValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (62 samples, 8.46%)</title><rect x="193.5" y="771.0" width="99.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.5" y="782.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (62 samples, 8.46%)</title><rect x="193.5" y="755.0" width="99.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.5" y="766.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.14%)</title><rect x="193.5" y="739.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.14%)</title><rect x="193.5" y="723.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.14%)</title><rect x="193.5" y="707.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.14%)</title><rect x="193.5" y="691.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 8.32%)</title><rect x="195.1" y="739.0" width="98.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.1" y="750.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 8.32%)</title><rect x="195.1" y="723.0" width="98.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.1" y="734.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (61 samples, 8.32%)</title><rect x="195.1" y="707.0" width="98.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.1" y="718.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (61 samples, 8.32%)</title><rect x="195.1" y="691.0" width="98.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.1" y="702.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.14%)</title><rect x="195.1" y="675.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="198.1" y="686.0"></text>
</g>
<g>
<title>__send (60 samples, 8.19%)</title><rect x="196.7" y="675.0" width="96.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="199.7" y="686.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (59 samples, 8.05%)</title><rect x="198.3" y="659.0" width="95.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="201.3" y="670.0">entry_SYSCA..</text>
</g>
<g>
<title>do_syscall_64 (59 samples, 8.05%)</title><rect x="198.3" y="643.0" width="95.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="201.3" y="654.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (56 samples, 7.64%)</title><rect x="200.0" y="627.0" width="90.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="203.0" y="638.0">__x64_sys_..</text>
</g>
<g>
<title>__sys_sendto (56 samples, 7.64%)</title><rect x="200.0" y="611.0" width="90.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="203.0" y="622.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (55 samples, 7.50%)</title><rect x="201.6" y="595.0" width="88.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="204.6" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (53 samples, 7.23%)</title><rect x="204.8" y="579.0" width="85.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="207.8" y="590.0">inet6_send..</text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.14%)</title><rect x="204.8" y="563.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="207.8" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg (52 samples, 7.09%)</title><rect x="206.4" y="563.0" width="83.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="209.4" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (52 samples, 7.09%)</title><rect x="206.4" y="547.0" width="83.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="209.4" y="558.0">tcp_sendm..</text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.14%)</title><rect x="206.4" y="531.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="209.4" y="542.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.14%)</title><rect x="206.4" y="515.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="209.4" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.14%)</title><rect x="208.0" y="531.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="211.0" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.14%)</title><rect x="208.0" y="515.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="211.0" y="526.0"></text>
</g>
<g>
<title>tcp_push (50 samples, 6.82%)</title><rect x="209.6" y="531.0" width="80.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="212.6" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (50 samples, 6.82%)</title><rect x="209.6" y="515.0" width="80.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="212.6" y="526.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (50 samples, 6.82%)</title><rect x="209.6" y="499.0" width="80.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="212.6" y="510.0">tcp_write..</text>
</g>
<g>
<title>__tcp_transmit_skb (49 samples, 6.68%)</title><rect x="209.6" y="483.0" width="78.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="212.6" y="494.0">__tcp_tra..</text>
</g>
<g>
<title>ip_queue_xmit (49 samples, 6.68%)</title><rect x="209.6" y="467.0" width="78.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="212.6" y="478.0">ip_queue_..</text>
</g>
<g>
<title>__ip_queue_xmit (49 samples, 6.68%)</title><rect x="209.6" y="451.0" width="78.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="212.6" y="462.0">__ip_queu..</text>
</g>
<g>
<title>ip_local_out (49 samples, 6.68%)</title><rect x="209.6" y="435.0" width="78.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="212.6" y="446.0">ip_local_..</text>
</g>
<g>
<title>ip_output (49 samples, 6.68%)</title><rect x="209.6" y="419.0" width="78.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="212.6" y="430.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (49 samples, 6.68%)</title><rect x="209.6" y="403.0" width="78.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="212.6" y="414.0">ip_finish..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.14%)</title><rect x="209.6" y="387.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="212.6" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (48 samples, 6.55%)</title><rect x="211.2" y="387.0" width="77.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="214.2" y="398.0">__ip_fini..</text>
</g>
<g>
<title>ip_finish_output2 (48 samples, 6.55%)</title><rect x="211.2" y="371.0" width="77.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="214.2" y="382.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (47 samples, 6.41%)</title><rect x="211.2" y="355.0" width="75.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="214.2" y="366.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.20 (46 samples, 6.28%)</title><rect x="212.8" y="339.0" width="74.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="215.8" y="350.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (46 samples, 6.28%)</title><rect x="212.8" y="323.0" width="74.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="215.8" y="334.0">do_softi..</text>
</g>
<g>
<title>__softirqentry_text_start (46 samples, 6.28%)</title><rect x="212.8" y="307.0" width="74.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="215.8" y="318.0">__softir..</text>
</g>
<g>
<title>net_rx_action (45 samples, 6.14%)</title><rect x="214.4" y="291.0" width="72.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="217.4" y="302.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (44 samples, 6.00%)</title><rect x="216.1" y="275.0" width="70.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="219.1" y="286.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (44 samples, 6.00%)</title><rect x="216.1" y="259.0" width="70.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="219.1" y="270.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (44 samples, 6.00%)</title><rect x="216.1" y="243.0" width="70.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="219.1" y="254.0">__netif_..</text>
</g>
<g>
<title>ip_rcv (44 samples, 6.00%)</title><rect x="216.1" y="227.0" width="70.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="219.1" y="238.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (44 samples, 6.00%)</title><rect x="216.1" y="211.0" width="70.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="219.1" y="222.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (44 samples, 6.00%)</title><rect x="216.1" y="195.0" width="70.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="219.1" y="206.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (44 samples, 6.00%)</title><rect x="216.1" y="179.0" width="70.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="219.1" y="190.0">ip_local..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (43 samples, 5.87%)</title><rect x="216.1" y="163.0" width="69.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="219.1" y="174.0">ip_prot..</text>
</g>
<g>
<title>tcp_v4_rcv (43 samples, 5.87%)</title><rect x="216.1" y="147.0" width="69.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="219.1" y="158.0">tcp_v4_..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.14%)</title><rect x="217.7" y="131.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="220.7" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.14%)</title><rect x="217.7" y="115.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="220.7" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (41 samples, 5.59%)</title><rect x="219.3" y="131.0" width="66.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="222.3" y="142.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_rcv_established (41 samples, 5.59%)</title><rect x="219.3" y="115.0" width="66.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="222.3" y="126.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.27%)</title><rect x="219.3" y="99.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="222.3" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.27%)</title><rect x="219.3" y="83.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="222.3" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.27%)</title><rect x="219.3" y="67.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="222.3" y="78.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.27%)</title><rect x="219.3" y="51.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="222.3" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.27%)</title><rect x="219.3" y="35.0" width="3.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="222.3" y="46.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.41%)</title><rect x="222.5" y="99.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="225.5" y="110.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.27%)</title><rect x="224.1" y="83.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="227.1" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.14%)</title><rect x="225.7" y="67.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="228.7" y="78.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.14%)</title><rect x="225.7" y="51.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="228.7" y="62.0"></text>
</g>
<g>
<title>tcp_data_ready (33 samples, 4.50%)</title><rect x="227.3" y="99.0" width="53.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="230.3" y="110.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (33 samples, 4.50%)</title><rect x="227.3" y="83.0" width="53.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="230.3" y="94.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (33 samples, 4.50%)</title><rect x="227.3" y="67.0" width="53.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="230.3" y="78.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (33 samples, 4.50%)</title><rect x="227.3" y="51.0" width="53.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="230.3" y="62.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (33 samples, 4.50%)</title><rect x="227.3" y="35.0" width="53.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="230.3" y="46.0">__loc..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.14%)</title><rect x="280.5" y="99.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="283.5" y="110.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.14%)</title><rect x="282.1" y="99.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="285.1" y="110.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.14%)</title><rect x="283.7" y="99.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="286.7" y="110.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.14%)</title><rect x="285.3" y="163.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="288.3" y="174.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.14%)</title><rect x="286.9" y="355.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="289.9" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.14%)</title><rect x="286.9" y="339.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="289.9" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.14%)</title><rect x="286.9" y="323.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="289.9" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.14%)</title><rect x="286.9" y="307.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="289.9" y="318.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.14%)</title><rect x="288.5" y="483.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="291.5" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.27%)</title><rect x="290.1" y="627.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="293.1" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.27%)</title><rect x="290.1" y="611.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="293.1" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.27%)</title><rect x="290.1" y="595.0" width="3.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="293.1" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.27%)</title><rect x="290.1" y="579.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="293.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.27%)</title><rect x="293.3" y="771.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.14%)</title><rect x="293.3" y="755.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.14%)</title><rect x="293.3" y="739.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.14%)</title><rect x="294.9" y="755.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.14%)</title><rect x="294.9" y="739.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.14%)</title><rect x="294.9" y="723.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey (536 samples, 73.12%)</title><rect x="296.5" y="771.0" width="862.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.5" y="782.0">ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.upsert (536 samples, 73.12%)</title><rect x="296.5" y="755.0" width="862.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.5" y="766.0">ru/mail/polis/dao/basta123/MyDAORocksDB.upsert</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.68%)</title><rect x="299.8" y="739.0" width="8.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="302.8" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.68%)</title><rect x="299.8" y="723.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="302.8" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.27%)</title><rect x="301.4" y="707.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="304.4" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.14%)</title><rect x="301.4" y="691.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="304.4" y="702.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.14%)</title><rect x="303.0" y="691.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="306.0" y="702.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (2 samples, 0.27%)</title><rect x="304.6" y="707.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="307.6" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.14%)</title><rect x="306.2" y="691.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="309.2" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (529 samples, 72.17%)</title><rect x="307.8" y="739.0" width="851.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.8" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (526 samples, 71.76%)</title><rect x="307.8" y="723.0" width="846.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.8" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (6 samples, 0.82%)</title><rect x="307.8" y="707.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.8" y="718.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (327 samples, 44.61%)</title><rect x="317.5" y="707.0" width="526.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="320.5" y="718.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.14%)</title><rect x="317.5" y="691.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="320.5" y="702.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.14%)</title><rect x="319.1" y="691.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="322.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.14%)</title><rect x="320.7" y="691.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="323.7" y="702.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (324 samples, 44.20%)</title><rect x="322.3" y="691.0" width="521.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="325.3" y="702.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;,..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.14%)</title><rect x="322.3" y="675.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="325.3" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="322.3" y="659.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="325.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="322.3" y="643.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="325.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="322.3" y="627.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="325.3" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.14%)</title><rect x="323.9" y="675.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="326.9" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="323.9" y="659.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="326.9" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="323.9" y="643.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="326.9" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="323.9" y="627.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="326.9" y="638.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (1 samples, 0.14%)</title><rect x="325.5" y="675.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="328.5" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.27%)</title><rect x="327.1" y="675.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="330.1" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.27%)</title><rect x="327.1" y="659.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.1" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.27%)</title><rect x="327.1" y="643.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="330.1" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.27%)</title><rect x="327.1" y="627.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.27%)</title><rect x="327.1" y="611.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="330.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.27%)</title><rect x="327.1" y="595.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="330.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (318 samples, 43.38%)</title><rect x="330.4" y="675.0" width="511.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="333.4" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (316 samples, 43.11%)</title><rect x="332.0" y="659.0" width="508.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="335.0" y="670.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFami..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (316 samples, 43.11%)</title><rect x="332.0" y="643.0" width="508.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="335.0" y="654.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHa..</text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (1 samples, 0.14%)</title><rect x="333.6" y="627.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="336.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.14%)</title><rect x="335.2" y="627.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="338.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (306 samples, 41.75%)</title><rect x="336.8" y="627.0" width="492.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.8" y="638.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteB..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="336.8" y="611.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="339.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (302 samples, 41.20%)</title><rect x="338.4" y="611.0" width="486.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="341.4" y="622.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::W..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.14%)</title><rect x="348.1" y="595.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="351.1" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="348.1" y="579.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="351.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="348.1" y="563.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="351.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="348.1" y="547.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="351.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.27%)</title><rect x="349.7" y="595.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="352.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.14%)</title><rect x="352.9" y="595.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="355.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (18 samples, 2.46%)</title><rect x="354.5" y="595.0" width="29.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="357.5" y="606.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.27%)</title><rect x="356.1" y="579.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (13 samples, 1.77%)</title><rect x="359.3" y="579.0" width="21.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (13 samples, 1.77%)</title><rect x="359.3" y="563.0" width="21.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="362.3" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (1 samples, 0.14%)</title><rect x="360.9" y="547.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="363.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (5 samples, 0.68%)</title><rect x="362.6" y="547.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="365.6" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="364.2" y="531.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="367.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.14%)</title><rect x="365.8" y="531.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="368.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.14%)</title><rect x="367.4" y="531.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="370.4" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="367.4" y="515.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="370.4" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="367.4" y="499.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="370.4" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="367.4" y="483.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="370.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.14%)</title><rect x="369.0" y="531.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.14%)</title><rect x="370.6" y="547.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.6" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="370.6" y="531.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="373.6" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="370.6" y="515.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="373.6" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="370.6" y="499.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="373.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.14%)</title><rect x="372.2" y="547.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (4 samples, 0.55%)</title><rect x="373.8" y="547.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="376.8" y="558.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (2 samples, 0.27%)</title><rect x="373.8" y="531.0" width="3.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="376.8" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="377.0" y="531.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="380.0" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="377.0" y="515.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="380.0" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="377.0" y="499.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="380.0" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="377.0" y="483.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="380.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned long, unsigned long) (1 samples, 0.14%)</title><rect x="378.6" y="531.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.14%)</title><rect x="380.3" y="579.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="383.3" y="590.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.14%)</title><rect x="381.9" y="579.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="384.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.27%)</title><rect x="383.5" y="595.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="386.5" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.14%)</title><rect x="385.1" y="579.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="388.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.14%)</title><rect x="386.7" y="595.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="389.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (268 samples, 36.56%)</title><rect x="388.3" y="595.0" width="431.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="391.3" y="606.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThrea..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (265 samples, 36.15%)</title><rect x="391.5" y="579.0" width="426.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="394.5" y="590.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (265 samples, 36.15%)</title><rect x="391.5" y="563.0" width="426.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.5" y="574.0">rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch c..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (265 samples, 36.15%)</title><rect x="391.5" y="547.0" width="426.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="394.5" y="558.0">rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Sl..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (265 samples, 36.15%)</title><rect x="391.5" y="531.0" width="426.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="394.5" y="542.0">rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (1 samples, 0.14%)</title><rect x="394.7" y="515.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="397.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.14%)</title><rect x="396.4" y="515.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="399.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (261 samples, 35.61%)</title><rect x="398.0" y="515.0" width="420.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="401.0" y="526.0">rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, ..</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (6 samples, 0.82%)</title><rect x="399.6" y="499.0" width="9.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="402.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.14%)</title><rect x="402.8" y="483.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="405.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) [clone .plt] (1 samples, 0.14%)</title><rect x="404.4" y="483.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="407.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.14%)</title><rect x="406.0" y="483.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="409.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.14%)</title><rect x="407.6" y="483.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="410.6" y="494.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (254 samples, 34.65%)</title><rect x="409.2" y="499.0" width="408.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="412.2" y="510.0">bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyCo..</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (245 samples, 33.42%)</title><rect x="409.2" y="483.0" width="394.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="412.2" y="494.0">/tmp/librocksdbjni17888444267565770661.so</text>
</g>
<g>
<title>/tmp/librocksdbjni17888444267565770661.so (198 samples, 27.01%)</title><rect x="418.9" y="467.0" width="318.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="421.9" y="478.0">/tmp/librocksdbjni17888444267565770661.so</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.41%)</title><rect x="418.9" y="451.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="421.9" y="462.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.27%)</title><rect x="423.7" y="451.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="426.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (193 samples, 26.33%)</title><rect x="426.9" y="451.0" width="310.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="429.9" y="462.0">rocksdb::MemTable::KeyComparator::operator..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.55%)</title><rect x="430.2" y="435.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.2" y="446.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.41%)</title><rect x="436.6" y="435.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.6" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.82%)</title><rect x="441.4" y="435.0" width="9.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="444.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (173 samples, 23.60%)</title><rect x="451.1" y="435.0" width="278.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.1" y="446.0">rocksdb::BaseComparatorJniCallback::C..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (46 samples, 6.28%)</title><rect x="454.3" y="419.0" width="74.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="457.3" y="430.0">JNIEnv_:..</text>
</g>
<g>
<title>jni_CallIntMethodV (45 samples, 6.14%)</title><rect x="455.9" y="403.0" width="72.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="458.9" y="414.0">jni_Call..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.14%)</title><rect x="465.6" y="387.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="468.6" y="398.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.14%)</title><rect x="467.2" y="387.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="470.2" y="398.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.14%)</title><rect x="468.8" y="387.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="471.8" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.27%)</title><rect x="470.4" y="387.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="473.4" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.41%)</title><rect x="473.6" y="387.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="476.6" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (31 samples, 4.23%)</title><rect x="478.5" y="387.0" width="49.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="481.5" y="398.0">jni_i..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.14%)</title><rect x="483.3" y="371.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="486.3" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.14%)</title><rect x="484.9" y="371.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="487.9" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (6 samples, 0.82%)</title><rect x="486.5" y="371.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="489.5" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples, 2.05%)</title><rect x="496.2" y="371.0" width="24.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="499.2" y="382.0">J..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.14%)</title><rect x="502.6" y="355.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="505.6" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.14%)</title><rect x="504.2" y="355.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="507.2" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.55%)</title><rect x="505.8" y="355.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="508.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.27%)</title><rect x="512.3" y="355.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="515.3" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.27%)</title><rect x="515.5" y="355.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="518.5" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.14%)</title><rect x="518.7" y="355.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="521.7" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.41%)</title><rect x="520.3" y="371.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="523.3" y="382.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.14%)</title><rect x="525.1" y="371.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="528.1" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.14%)</title><rect x="526.8" y="371.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="529.8" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (92 samples, 12.55%)</title><rect x="528.4" y="419.0" width="148.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.4" y="430.0">JNIEnv_::CallVoidMe..</text>
</g>
<g>
<title>jni_CallVoidMethodV (90 samples, 12.28%)</title><rect x="531.6" y="403.0" width="144.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="534.6" y="414.0">jni_CallVoidMethodV</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.14%)</title><rect x="538.0" y="387.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="541.0" y="398.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.27%)</title><rect x="539.6" y="387.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="542.6" y="398.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.41%)</title><rect x="542.9" y="387.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="545.9" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.27%)</title><rect x="547.7" y="387.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="550.7" y="398.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.14%)</title><rect x="550.9" y="387.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="553.9" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.27%)</title><rect x="552.5" y="387.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="555.5" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.27%)</title><rect x="555.7" y="387.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="558.7" y="398.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (72 samples, 9.82%)</title><rect x="558.9" y="387.0" width="116.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="561.9" y="398.0">jni_invoke_non..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.14%)</title><rect x="578.3" y="371.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="581.3" y="382.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (17 samples, 2.32%)</title><rect x="579.9" y="371.0" width="27.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="582.9" y="382.0">J..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="605.6" y="355.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="608.6" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="605.6" y="339.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="608.6" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="605.6" y="323.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="608.6" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (28 samples, 3.82%)</title><rect x="607.2" y="371.0" width="45.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="610.2" y="382.0">Java..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.27%)</title><rect x="618.5" y="355.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="621.5" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.14%)</title><rect x="621.7" y="355.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.7" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (12 samples, 1.64%)</title><rect x="623.3" y="355.0" width="19.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="626.3" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.41%)</title><rect x="637.8" y="339.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.14%)</title><rect x="642.7" y="355.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="645.7" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.68%)</title><rect x="644.3" y="355.0" width="8.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="647.3" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.27%)</title><rect x="652.3" y="371.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="655.3" y="382.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (4 samples, 0.55%)</title><rect x="655.5" y="371.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.5" y="382.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (6 samples, 0.82%)</title><rect x="662.0" y="371.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="665.0" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.27%)</title><rect x="671.6" y="371.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="674.6" y="382.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.14%)</title><rect x="674.9" y="387.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="677.9" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.14%)</title><rect x="676.5" y="419.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="679.5" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.14%)</title><rect x="678.1" y="419.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="681.1" y="430.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (5 samples, 0.68%)</title><rect x="679.7" y="419.0" width="8.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="682.7" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 1.77%)</title><rect x="687.7" y="419.0" width="21.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="690.7" y="430.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.27%)</title><rect x="689.3" y="403.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="692.3" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.68%)</title><rect x="692.6" y="403.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="695.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.68%)</title><rect x="700.6" y="403.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="703.6" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.27%)</title><rect x="708.7" y="419.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="711.7" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.41%)</title><rect x="711.9" y="419.0" width="4.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="714.9" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.14%)</title><rect x="716.7" y="419.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="719.7" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.14%)</title><rect x="718.3" y="419.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="721.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.82%)</title><rect x="719.9" y="419.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="722.9" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.14%)</title><rect x="719.9" y="403.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="722.9" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="721.5" y="403.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="724.5" y="414.0"></text>
</g>
<g>
<title>jni_GetEnv (4 samples, 0.55%)</title><rect x="723.2" y="403.0" width="6.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="726.2" y="414.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (2 samples, 0.27%)</title><rect x="726.4" y="387.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="729.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.14%)</title><rect x="729.6" y="435.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="732.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.27%)</title><rect x="731.2" y="435.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="734.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.27%)</title><rect x="734.4" y="435.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="737.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (41 samples, 5.59%)</title><rect x="737.6" y="467.0" width="66.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="740.6" y="478.0">rocksdb..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.14%)</title><rect x="739.2" y="451.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="742.2" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.14%)</title><rect x="740.9" y="451.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="743.9" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.14%)</title><rect x="742.5" y="451.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="745.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (36 samples, 4.91%)</title><rect x="744.1" y="451.0" width="57.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="747.1" y="462.0">rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (8 samples, 1.09%)</title><rect x="744.1" y="435.0" width="12.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.1" y="446.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (8 samples, 1.09%)</title><rect x="744.1" y="419.0" width="12.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="747.1" y="430.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.14%)</title><rect x="750.5" y="403.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.5" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.41%)</title><rect x="752.1" y="403.0" width="4.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.1" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.41%)</title><rect x="752.1" y="387.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.1" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.14%)</title><rect x="755.3" y="371.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="758.3" y="382.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (22 samples, 3.00%)</title><rect x="757.0" y="435.0" width="35.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.0" y="446.0">JNI..</text>
</g>
<g>
<title>jni_CallVoidMethodV (22 samples, 3.00%)</title><rect x="757.0" y="419.0" width="35.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="760.0" y="430.0">jni..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.14%)</title><rect x="758.6" y="403.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.6" y="414.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.14%)</title><rect x="760.2" y="403.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.2" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.14%)</title><rect x="761.8" y="403.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="764.8" y="414.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.14%)</title><rect x="763.4" y="403.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="766.4" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.14%)</title><rect x="765.0" y="403.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.0" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (16 samples, 2.18%)</title><rect x="766.6" y="403.0" width="25.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="769.6" y="414.0">j..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.14%)</title><rect x="774.7" y="387.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.7" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.41%)</title><rect x="776.3" y="387.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.3" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.14%)</title><rect x="781.1" y="387.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.1" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.68%)</title><rect x="782.7" y="387.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="785.7" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.27%)</title><rect x="784.3" y="371.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="787.3" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.14%)</title><rect x="785.9" y="355.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.9" y="366.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.14%)</title><rect x="787.5" y="371.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="790.5" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.14%)</title><rect x="789.2" y="371.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.2" y="382.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.14%)</title><rect x="790.8" y="387.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="793.8" y="398.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.14%)</title><rect x="792.4" y="435.0" width="1.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="795.4" y="446.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.27%)</title><rect x="794.0" y="435.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="797.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.41%)</title><rect x="797.2" y="435.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.2" y="446.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.14%)</title><rect x="798.8" y="419.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="801.8" y="430.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.14%)</title><rect x="800.4" y="419.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="803.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() [clone .plt] (1 samples, 0.14%)</title><rect x="802.0" y="451.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (8 samples, 1.09%)</title><rect x="803.6" y="483.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 0.95%)</title><rect x="803.6" y="467.0" width="11.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.6" y="478.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.55%)</title><rect x="803.6" y="451.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.6" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.55%)</title><rect x="803.6" y="435.0" width="6.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="806.6" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.55%)</title><rect x="803.6" y="419.0" width="6.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="806.6" y="430.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.14%)</title><rect x="805.3" y="403.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.3" y="414.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="805.3" y="387.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="808.3" y="398.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="805.3" y="371.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="808.3" y="382.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="805.3" y="355.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="808.3" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.27%)</title><rect x="806.9" y="403.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="809.9" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.14%)</title><rect x="806.9" y="387.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.14%)</title><rect x="808.5" y="387.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="811.5" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.14%)</title><rect x="810.1" y="451.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="813.1" y="462.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.14%)</title><rect x="810.1" y="435.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="813.1" y="446.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.14%)</title><rect x="810.1" y="419.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="813.1" y="430.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.14%)</title><rect x="810.1" y="403.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.1" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.14%)</title><rect x="811.7" y="451.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="814.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.14%)</title><rect x="813.3" y="451.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.3" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.14%)</title><rect x="813.3" y="435.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.14%)</title><rect x="814.9" y="467.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="817.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.14%)</title><rect x="816.5" y="483.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.14%)</title><rect x="818.1" y="579.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.14%)</title><rect x="819.7" y="595.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.7" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="819.7" y="579.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="822.7" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="819.7" y="563.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="822.7" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="819.7" y="547.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="822.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.27%)</title><rect x="821.4" y="595.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.4" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="823.0" y="579.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="826.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="823.0" y="563.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="823.0" y="547.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="826.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (2 samples, 0.27%)</title><rect x="824.6" y="611.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.6" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="826.2" y="595.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="829.2" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="826.2" y="579.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="829.2" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="826.2" y="563.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="829.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.14%)</title><rect x="827.8" y="611.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.14%)</title><rect x="829.4" y="627.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="832.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.27%)</title><rect x="831.0" y="627.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="834.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.14%)</title><rect x="831.0" y="611.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.14%)</title><rect x="832.6" y="611.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="835.6" y="622.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.14%)</title><rect x="832.6" y="595.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.6" y="606.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (3 samples, 0.41%)</title><rect x="834.2" y="627.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.2" y="638.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.14%)</title><rect x="839.1" y="627.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="842.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="840.7" y="659.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="843.7" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="840.7" y="643.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="843.7" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="840.7" y="627.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="843.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.14%)</title><rect x="842.3" y="675.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.3" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="842.3" y="659.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="845.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="842.3" y="643.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="845.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="842.3" y="627.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="845.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 6.14%)</title><rect x="843.9" y="707.0" width="72.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="846.9" y="718.0">[unknown]</text>
</g>
<g>
<title>__libc_write (44 samples, 6.00%)</title><rect x="843.9" y="691.0" width="70.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="846.9" y="702.0">__libc_w..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (42 samples, 5.73%)</title><rect x="847.1" y="675.0" width="67.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="850.1" y="686.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (42 samples, 5.73%)</title><rect x="847.1" y="659.0" width="67.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="850.1" y="670.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_write (41 samples, 5.59%)</title><rect x="848.7" y="643.0" width="66.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="851.7" y="654.0">__x64_s..</text>
</g>
<g>
<title>ksys_write (41 samples, 5.59%)</title><rect x="848.7" y="627.0" width="66.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="851.7" y="638.0">ksys_wr..</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.41%)</title><rect x="851.9" y="611.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="854.9" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.41%)</title><rect x="851.9" y="595.0" width="4.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="854.9" y="606.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.14%)</title><rect x="855.2" y="579.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="858.2" y="590.0"></text>
</g>
<g>
<title>fput (1 samples, 0.14%)</title><rect x="856.8" y="611.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="859.8" y="622.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.14%)</title><rect x="856.8" y="595.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="859.8" y="606.0"></text>
</g>
<g>
<title>vfs_write (35 samples, 4.77%)</title><rect x="858.4" y="611.0" width="56.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="861.4" y="622.0">vfs_wr..</text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.27%)</title><rect x="861.6" y="595.0" width="3.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="864.6" y="606.0"></text>
</g>
<g>
<title>__vfs_write (29 samples, 3.96%)</title><rect x="864.8" y="595.0" width="46.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="867.8" y="606.0">__vf..</text>
</g>
<g>
<title>new_sync_write (29 samples, 3.96%)</title><rect x="864.8" y="579.0" width="46.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="867.8" y="590.0">new_..</text>
</g>
<g>
<title>ext4_file_write_iter (28 samples, 3.82%)</title><rect x="864.8" y="563.0" width="45.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="867.8" y="574.0">ext4..</text>
</g>
<g>
<title>__generic_file_write_iter (26 samples, 3.55%)</title><rect x="866.4" y="547.0" width="41.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="869.4" y="558.0">__g..</text>
</g>
<g>
<title>file_update_time (1 samples, 0.14%)</title><rect x="866.4" y="531.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="869.4" y="542.0"></text>
</g>
<g>
<title>generic_update_time (1 samples, 0.14%)</title><rect x="866.4" y="515.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="869.4" y="526.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.14%)</title><rect x="866.4" y="499.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="869.4" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.14%)</title><rect x="866.4" y="483.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="869.4" y="494.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.14%)</title><rect x="866.4" y="467.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="869.4" y="478.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.14%)</title><rect x="866.4" y="451.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="869.4" y="462.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.14%)</title><rect x="866.4" y="435.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="869.4" y="446.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.14%)</title><rect x="866.4" y="419.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="869.4" y="430.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.14%)</title><rect x="866.4" y="403.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="869.4" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (25 samples, 3.41%)</title><rect x="868.0" y="531.0" width="40.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="871.0" y="542.0">gen..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.14%)</title><rect x="868.0" y="515.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="871.0" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_begin (12 samples, 1.64%)</title><rect x="869.6" y="515.0" width="19.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="872.6" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (7 samples, 0.95%)</title><rect x="869.6" y="499.0" width="11.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="872.6" y="510.0"></text>
</g>
<g>
<title>jbd2__journal_start (7 samples, 0.95%)</title><rect x="869.6" y="483.0" width="11.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="872.6" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.14%)</title><rect x="871.3" y="467.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="874.3" y="478.0"></text>
</g>
<g>
<title>start_this_handle (5 samples, 0.68%)</title><rect x="872.9" y="467.0" width="8.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="875.9" y="478.0"></text>
</g>
<g>
<title>add_transaction_credits (3 samples, 0.41%)</title><rect x="876.1" y="451.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="879.1" y="462.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (5 samples, 0.68%)</title><rect x="880.9" y="499.0" width="8.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="883.9" y="510.0"></text>
</g>
<g>
<title>pagecache_get_page (5 samples, 0.68%)</title><rect x="880.9" y="483.0" width="8.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="883.9" y="494.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (1 samples, 0.14%)</title><rect x="880.9" y="467.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="883.9" y="478.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (1 samples, 0.14%)</title><rect x="880.9" y="451.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="883.9" y="462.0"></text>
</g>
<g>
<title>find_get_entry (4 samples, 0.55%)</title><rect x="882.5" y="467.0" width="6.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="885.5" y="478.0"></text>
</g>
<g>
<title>xas_load (3 samples, 0.41%)</title><rect x="884.1" y="451.0" width="4.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="887.1" y="462.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.14%)</title><rect x="887.4" y="435.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="890.4" y="446.0"></text>
</g>
<g>
<title>ext4_da_write_end (11 samples, 1.50%)</title><rect x="889.0" y="515.0" width="17.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="892.0" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_stop (3 samples, 0.41%)</title><rect x="889.0" y="499.0" width="4.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="892.0" y="510.0"></text>
</g>
<g>
<title>jbd2_journal_stop (3 samples, 0.41%)</title><rect x="889.0" y="483.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="892.0" y="494.0"></text>
</g>
<g>
<title>__wake_up (2 samples, 0.27%)</title><rect x="889.0" y="467.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="892.0" y="478.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.27%)</title><rect x="889.0" y="451.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="892.0" y="462.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.27%)</title><rect x="889.0" y="435.0" width="3.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="892.0" y="446.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.14%)</title><rect x="892.2" y="467.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="895.2" y="478.0"></text>
</g>
<g>
<title>generic_write_end (8 samples, 1.09%)</title><rect x="893.8" y="499.0" width="12.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="896.8" y="510.0"></text>
</g>
<g>
<title>__mark_inode_dirty (5 samples, 0.68%)</title><rect x="895.4" y="483.0" width="8.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="898.4" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (5 samples, 0.68%)</title><rect x="895.4" y="467.0" width="8.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="898.4" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (5 samples, 0.68%)</title><rect x="895.4" y="451.0" width="8.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="898.4" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (5 samples, 0.68%)</title><rect x="895.4" y="435.0" width="8.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="898.4" y="446.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.14%)</title><rect x="895.4" y="419.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="898.4" y="430.0"></text>
</g>
<g>
<title>ext4_do_update_inode (4 samples, 0.55%)</title><rect x="897.0" y="419.0" width="6.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="900.0" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (3 samples, 0.41%)</title><rect x="898.6" y="403.0" width="4.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="901.6" y="414.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.14%)</title><rect x="900.2" y="387.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="903.2" y="398.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.62 (1 samples, 0.14%)</title><rect x="901.8" y="387.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="904.8" y="398.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.14%)</title><rect x="901.8" y="371.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="904.8" y="382.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (1 samples, 0.14%)</title><rect x="901.8" y="355.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="904.8" y="366.0"></text>
</g>
<g>
<title>block_write_end (2 samples, 0.27%)</title><rect x="903.5" y="483.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="906.5" y="494.0"></text>
</g>
<g>
<title>__block_commit_write.isra.41 (1 samples, 0.14%)</title><rect x="903.5" y="467.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="906.5" y="478.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.14%)</title><rect x="905.1" y="467.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="908.1" y="478.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.14%)</title><rect x="906.7" y="515.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="909.7" y="526.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.14%)</title><rect x="908.3" y="547.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="911.3" y="558.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.14%)</title><rect x="908.3" y="531.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="911.3" y="542.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.14%)</title><rect x="909.9" y="563.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="912.9" y="574.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.27%)</title><rect x="911.5" y="595.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="914.5" y="606.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.27%)</title><rect x="911.5" y="579.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="914.5" y="590.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.27%)</title><rect x="911.5" y="563.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="914.5" y="574.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.27%)</title><rect x="911.5" y="547.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="914.5" y="558.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.14%)</title><rect x="914.7" y="691.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.7" y="702.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.27%)</title><rect x="916.3" y="707.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="919.3" y="718.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="919.5" y="707.0" width="1.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="922.5" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (14 samples, 1.91%)</title><rect x="921.2" y="707.0" width="22.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="924.2" y="718.0">o..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (129 samples, 17.60%)</title><rect x="943.7" y="707.0" width="207.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="946.7" y="718.0">ru/mail/polis/dao/basta123/..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (126 samples, 17.19%)</title><rect x="948.5" y="691.0" width="202.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="951.5" y="702.0">ru/mail/polis/dao/basta123..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.41%)</title><rect x="948.5" y="675.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (3 samples, 0.41%)</title><rect x="948.5" y="659.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="951.5" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (123 samples, 16.78%)</title><rect x="953.4" y="675.0" width="198.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.4" y="686.0">org/rocksdb/AbstractSlice...</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.41%)</title><rect x="953.4" y="659.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.4" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (120 samples, 16.37%)</title><rect x="958.2" y="659.0" width="193.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="961.2" y="670.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (120 samples, 16.37%)</title><rect x="958.2" y="643.0" width="193.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="961.2" y="654.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (109 samples, 14.87%)</title><rect x="967.8" y="627.0" width="175.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="970.8" y="638.0">Java_org_rocksdb_Slice_..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.14%)</title><rect x="969.5" y="611.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.5" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.14%)</title><rect x="971.1" y="611.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.1" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.14%)</title><rect x="972.7" y="611.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.7" y="622.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (3 samples, 0.41%)</title><rect x="974.3" y="611.0" width="4.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="977.3" y="622.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.41%)</title><rect x="979.1" y="611.0" width="4.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="982.1" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.95%)</title><rect x="983.9" y="611.0" width="11.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="986.9" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.14%)</title><rect x="987.2" y="595.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.55%)</title><rect x="988.8" y="595.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="991.8" y="606.0"></text>
</g>
<g>
<title>jni_NewByteArray (70 samples, 9.55%)</title><rect x="995.2" y="611.0" width="112.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="998.2" y="622.0">jni_NewByteArray</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (7 samples, 0.95%)</title><rect x="1004.9" y="595.0" width="11.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.82%)</title><rect x="1016.1" y="595.0" width="9.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.1" y="606.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.41%)</title><rect x="1025.8" y="595.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1028.8" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.41%)</title><rect x="1030.6" y="595.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.68%)</title><rect x="1035.5" y="595.0" width="8.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.5" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (40 samples, 5.46%)</title><rect x="1043.5" y="595.0" width="64.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.5" y="606.0">TypeArr..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (36 samples, 4.91%)</title><rect x="1045.1" y="579.0" width="58.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.1" y="590.0">Collec..</text>
</g>
<g>
<title>MemAllocator::allocate() const (29 samples, 3.96%)</title><rect x="1046.7" y="563.0" width="46.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.7" y="574.0">MemA..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.14%)</title><rect x="1051.6" y="547.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.6" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.41%)</title><rect x="1053.2" y="547.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.2" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (21 samples, 2.86%)</title><rect x="1058.0" y="547.0" width="33.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1061.0" y="558.0">__..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1091.8" y="547.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1094.8" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1091.8" y="531.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1094.8" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1091.8" y="515.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1094.8" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.55%)</title><rect x="1093.4" y="563.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1096.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.27%)</title><rect x="1099.8" y="563.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1102.8" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.27%)</title><rect x="1103.1" y="579.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.1" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1106.3" y="579.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1109.3" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1106.3" y="563.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1109.3" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1106.3" y="547.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1109.3" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (21 samples, 2.86%)</title><rect x="1107.9" y="611.0" width="33.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1110.9" y="622.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.55%)</title><rect x="1114.3" y="595.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.3" y="606.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.41%)</title><rect x="1120.8" y="595.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (8 samples, 1.09%)</title><rect x="1125.6" y="595.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.6" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.27%)</title><rect x="1138.5" y="595.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1141.5" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.14%)</title><rect x="1140.1" y="579.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="590.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.14%)</title><rect x="1141.7" y="611.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.7" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.27%)</title><rect x="1143.3" y="627.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1146.3" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.14%)</title><rect x="1146.5" y="627.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1149.5" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.27%)</title><rect x="1148.1" y="627.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1151.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1149.8" y="611.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1152.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1149.8" y="595.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1152.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1149.8" y="579.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1152.8" y="590.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (2 samples, 0.27%)</title><rect x="1151.4" y="707.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.41%)</title><rect x="1154.6" y="723.0" width="4.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1157.6" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.41%)</title><rect x="1154.6" y="707.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1157.6" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.41%)</title><rect x="1154.6" y="691.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1157.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.handleDefault (1 samples, 0.14%)</title><rect x="1159.4" y="787.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1162.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.14%)</title><rect x="1159.4" y="771.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1162.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.14%)</title><rect x="1159.4" y="755.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1162.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.14%)</title><rect x="1159.4" y="739.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.14%)</title><rect x="1159.4" y="723.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1162.4" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1159.4" y="707.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1159.4" y="691.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1162.4" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1159.4" y="675.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1162.4" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.27%)</title><rect x="1161.0" y="819.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.27%)</title><rect x="1161.0" y="803.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1162.6" y="787.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1162.6" y="771.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1162.6" y="755.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.14%)</title><rect x="1164.2" y="819.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1167.2" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (15 samples, 2.05%)</title><rect x="1165.9" y="835.0" width="24.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1168.9" y="846.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (12 samples, 1.64%)</title><rect x="1167.5" y="819.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1170.5" y="830.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.68%)</title><rect x="1170.7" y="803.0" width="8.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.14%)</title><rect x="1170.7" y="787.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.14%)</title><rect x="1172.3" y="787.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.14%)</title><rect x="1173.9" y="787.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.27%)</title><rect x="1175.5" y="787.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.14%)</title><rect x="1175.5" y="771.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.14%)</title><rect x="1177.1" y="771.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.14%)</title><rect x="1177.1" y="755.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.14%)</title><rect x="1177.1" y="739.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.14%)</title><rect x="1177.1" y="723.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>__recv (5 samples, 0.68%)</title><rect x="1178.7" y="803.0" width="8.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.55%)</title><rect x="1180.3" y="787.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.55%)</title><rect x="1180.3" y="771.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.14%)</title><rect x="1183.6" y="755.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (1 samples, 0.14%)</title><rect x="1185.2" y="755.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (1 samples, 0.14%)</title><rect x="1185.2" y="739.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (1 samples, 0.14%)</title><rect x="1185.2" y="723.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.14%)</title><rect x="1185.2" y="707.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.27%)</title><rect x="1186.8" y="819.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
</g>
</svg>
