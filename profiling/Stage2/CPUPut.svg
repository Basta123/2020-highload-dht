<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (501 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.40%)</title><rect x="10.0" y="915.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.40%)</title><rect x="10.0" y="899.0" width="4.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 3.59%)</title><rect x="14.7" y="915.0" width="42.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.7" y="926.0">[unk..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (16 samples, 3.19%)</title><rect x="14.7" y="899.0" width="37.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.7" y="910.0">Jav..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (16 samples, 3.19%)</title><rect x="14.7" y="883.0" width="37.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.7" y="894.0">roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 3.19%)</title><rect x="14.7" y="867.0" width="37.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.7" y="878.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 3.19%)</title><rect x="14.7" y="851.0" width="37.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.7" y="862.0">roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (16 samples, 3.19%)</title><rect x="14.7" y="835.0" width="37.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.7" y="846.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (16 samples, 3.19%)</title><rect x="14.7" y="819.0" width="37.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.7" y="830.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (16 samples, 3.19%)</title><rect x="14.7" y="803.0" width="37.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.7" y="814.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (6 samples, 1.20%)</title><rect x="14.7" y="787.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (6 samples, 1.20%)</title><rect x="14.7" y="771.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 1.20%)</title><rect x="14.7" y="755.0" width="14.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 1.20%)</title><rect x="14.7" y="739.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (6 samples, 1.20%)</title><rect x="14.7" y="723.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 1.20%)</title><rect x="14.7" y="707.0" width="14.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.7" y="718.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (6 samples, 1.20%)</title><rect x="14.7" y="691.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.7" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (6 samples, 1.20%)</title><rect x="14.7" y="675.0" width="14.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="17.7" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (5 samples, 1.00%)</title><rect x="14.7" y="659.0" width="11.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 1.00%)</title><rect x="14.7" y="643.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 1.00%)</title><rect x="14.7" y="627.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.7" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.40%)</title><rect x="14.7" y="611.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.7" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.40%)</title><rect x="14.7" y="595.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.7" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.40%)</title><rect x="14.7" y="579.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="17.7" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.40%)</title><rect x="14.7" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.7" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.20%)</title><rect x="17.1" y="547.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.1" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.60%)</title><rect x="19.4" y="611.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="22.4" y="622.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.60%)</title><rect x="19.4" y="595.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.4" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.60%)</title><rect x="19.4" y="579.0" width="7.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="22.4" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.20%)</title><rect x="19.4" y="563.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="22.4" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.40%)</title><rect x="21.8" y="563.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.8" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.20%)</title><rect x="24.1" y="547.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.20%)</title><rect x="26.5" y="659.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.20%)</title><rect x="26.5" y="643.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="29.5" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="26.5" y="627.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.5" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.20%)</title><rect x="26.5" y="611.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="29.5" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.20%)</title><rect x="26.5" y="595.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="29.5" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="26.5" y="579.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="29.5" y="590.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="26.5" y="563.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.5" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.20%)</title><rect x="26.5" y="547.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (10 samples, 2.00%)</title><rect x="28.8" y="787.0" width="23.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.8" y="798.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (10 samples, 2.00%)</title><rect x="28.8" y="771.0" width="23.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.8" y="782.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 2.00%)</title><rect x="28.8" y="755.0" width="23.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="31.8" y="766.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 2.00%)</title><rect x="28.8" y="739.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.8" y="750.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (10 samples, 2.00%)</title><rect x="28.8" y="723.0" width="23.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.8" y="734.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 2.00%)</title><rect x="28.8" y="707.0" width="23.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="31.8" y="718.0">r..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (10 samples, 2.00%)</title><rect x="28.8" y="691.0" width="23.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.8" y="702.0">r..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (10 samples, 2.00%)</title><rect x="28.8" y="675.0" width="23.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.8" y="686.0">b..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (10 samples, 2.00%)</title><rect x="28.8" y="659.0" width="23.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="31.8" y="670.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (10 samples, 2.00%)</title><rect x="28.8" y="643.0" width="23.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="31.8" y="654.0">/..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 2.00%)</title><rect x="28.8" y="627.0" width="23.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="31.8" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (10 samples, 2.00%)</title><rect x="28.8" y="611.0" width="23.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.8" y="622.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.80%)</title><rect x="28.8" y="595.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.8" y="606.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.80%)</title><rect x="28.8" y="579.0" width="9.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="31.8" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (4 samples, 0.80%)</title><rect x="28.8" y="563.0" width="9.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="31.8" y="574.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.40%)</title><rect x="28.8" y="547.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="31.8" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.40%)</title><rect x="33.6" y="547.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="36.6" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.20%)</title><rect x="35.9" y="531.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="38.9" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.20%)</title><rect x="38.3" y="595.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.3" y="606.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 1.20%)</title><rect x="38.3" y="579.0" width="14.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="41.3" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 1.20%)</title><rect x="38.3" y="563.0" width="14.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="41.3" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.20%)</title><rect x="38.3" y="547.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="41.3" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 1.00%)</title><rect x="40.6" y="547.0" width="11.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="43.6" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.40%)</title><rect x="45.3" y="531.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="48.3" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="50.0" y="531.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="53.0" y="542.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.20%)</title><rect x="50.0" y="515.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="53.0" y="526.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.40%)</title><rect x="52.4" y="899.0" width="4.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="55.4" y="910.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (481 samples, 96.01%)</title><rect x="57.1" y="915.0" width="1132.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.1" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (26 samples, 5.19%)</title><rect x="57.1" y="899.0" width="61.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.1" y="910.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (26 samples, 5.19%)</title><rect x="57.1" y="883.0" width="61.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.1" y="894.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.20%)</title><rect x="57.1" y="867.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="60.1" y="878.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="57.1" y="851.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="60.1" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="57.1" y="835.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="60.1" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="57.1" y="819.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="60.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 4.99%)</title><rect x="59.5" y="867.0" width="58.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="62.5" y="878.0">[unkno..</text>
</g>
<g>
<title>epoll_wait (25 samples, 4.99%)</title><rect x="59.5" y="851.0" width="58.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="62.5" y="862.0">epoll_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 4.59%)</title><rect x="64.2" y="835.0" width="54.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="67.2" y="846.0">entry..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.20%)</title><rect x="64.2" y="819.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="67.2" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (22 samples, 4.39%)</title><rect x="66.5" y="819.0" width="51.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="69.5" y="830.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (22 samples, 4.39%)</title><rect x="66.5" y="803.0" width="51.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="69.5" y="814.0">__x64..</text>
</g>
<g>
<title>do_epoll_wait (22 samples, 4.39%)</title><rect x="66.5" y="787.0" width="51.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="69.5" y="798.0">do_ep..</text>
</g>
<g>
<title>ep_poll (22 samples, 4.39%)</title><rect x="66.5" y="771.0" width="51.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="69.5" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.20%)</title><rect x="66.5" y="755.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="69.5" y="766.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.20%)</title><rect x="66.5" y="739.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="69.5" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (21 samples, 4.19%)</title><rect x="68.9" y="755.0" width="49.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.9" y="766.0">sched..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (21 samples, 4.19%)</title><rect x="68.9" y="739.0" width="49.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="71.9" y="750.0">sched..</text>
</g>
<g>
<title>schedule (21 samples, 4.19%)</title><rect x="68.9" y="723.0" width="49.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="71.9" y="734.0">sched..</text>
</g>
<g>
<title>__sched_text_start (21 samples, 4.19%)</title><rect x="68.9" y="707.0" width="49.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="71.9" y="718.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (21 samples, 4.19%)</title><rect x="68.9" y="691.0" width="49.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.9" y="702.0">finis..</text>
</g>
<g>
<title>one/nio/net/Session.process (455 samples, 90.82%)</title><rect x="118.3" y="899.0" width="1071.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.3" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (455 samples, 90.82%)</title><rect x="118.3" y="883.0" width="1071.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.3" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (447 samples, 89.22%)</title><rect x="118.3" y="867.0" width="1052.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.3" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (442 samples, 88.22%)</title><rect x="118.3" y="851.0" width="1041.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.3" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (442 samples, 88.22%)</title><rect x="118.3" y="835.0" width="1041.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.3" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler4_putValueByKey.handleRequest (442 samples, 88.22%)</title><rect x="118.3" y="819.0" width="1041.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.3" y="830.0">RequestHandler4_putValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (48 samples, 9.58%)</title><rect x="118.3" y="803.0" width="113.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.3" y="814.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (47 samples, 9.38%)</title><rect x="120.7" y="787.0" width="110.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.7" y="798.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.20%)</title><rect x="120.7" y="771.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.20%)</title><rect x="120.7" y="755.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.20%)</title><rect x="120.7" y="739.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.20%)</title><rect x="120.7" y="723.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.7" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="120.7" y="707.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="123.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="120.7" y="691.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="123.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="120.7" y="675.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="123.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 9.18%)</title><rect x="123.1" y="771.0" width="108.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.1" y="782.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 9.18%)</title><rect x="123.1" y="755.0" width="108.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.1" y="766.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (46 samples, 9.18%)</title><rect x="123.1" y="739.0" width="108.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.1" y="750.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (46 samples, 9.18%)</title><rect x="123.1" y="723.0" width="108.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.1" y="734.0">one/nio/net/N..</text>
</g>
<g>
<title>__send (46 samples, 9.18%)</title><rect x="123.1" y="707.0" width="108.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="126.1" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (45 samples, 8.98%)</title><rect x="125.4" y="691.0" width="106.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="128.4" y="702.0">entry_SYSCALL..</text>
</g>
<g>
<title>do_syscall_64 (45 samples, 8.98%)</title><rect x="125.4" y="675.0" width="106.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="128.4" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (42 samples, 8.38%)</title><rect x="125.4" y="659.0" width="98.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="128.4" y="670.0">__x64_sys_se..</text>
</g>
<g>
<title>__sys_sendto (42 samples, 8.38%)</title><rect x="125.4" y="643.0" width="98.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="128.4" y="654.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.20%)</title><rect x="125.4" y="627.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="128.4" y="638.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.20%)</title><rect x="125.4" y="611.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="128.4" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (41 samples, 8.18%)</title><rect x="127.8" y="627.0" width="96.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="130.8" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (40 samples, 7.98%)</title><rect x="130.1" y="611.0" width="94.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="133.1" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (39 samples, 7.78%)</title><rect x="132.5" y="595.0" width="91.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="135.5" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.20%)</title><rect x="132.5" y="579.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="135.5" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (38 samples, 7.58%)</title><rect x="134.8" y="579.0" width="89.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="137.8" y="590.0">tcp_sendms..</text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.20%)</title><rect x="134.8" y="563.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="137.8" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.20%)</title><rect x="134.8" y="547.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="137.8" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.60%)</title><rect x="137.2" y="563.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="140.2" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.60%)</title><rect x="137.2" y="547.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="140.2" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.40%)</title><rect x="137.2" y="531.0" width="4.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="140.2" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.20%)</title><rect x="137.2" y="515.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="140.2" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.20%)</title><rect x="137.2" y="499.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="140.2" y="510.0"></text>
</g>
<g>
<title>memset (1 samples, 0.20%)</title><rect x="139.5" y="515.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="142.5" y="526.0"></text>
</g>
<g>
<title>memset (1 samples, 0.20%)</title><rect x="141.9" y="531.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="144.9" y="542.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.20%)</title><rect x="144.3" y="563.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="147.3" y="574.0"></text>
</g>
<g>
<title>tcp_push (33 samples, 6.59%)</title><rect x="146.6" y="563.0" width="77.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="149.6" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (33 samples, 6.59%)</title><rect x="146.6" y="547.0" width="77.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="149.6" y="558.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (33 samples, 6.59%)</title><rect x="146.6" y="531.0" width="77.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="149.6" y="542.0">tcp_write..</text>
</g>
<g>
<title>__tcp_transmit_skb (30 samples, 5.99%)</title><rect x="151.3" y="515.0" width="70.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="154.3" y="526.0">__tcp_tr..</text>
</g>
<g>
<title>ip_queue_xmit (30 samples, 5.99%)</title><rect x="151.3" y="499.0" width="70.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.3" y="510.0">ip_queue..</text>
</g>
<g>
<title>__ip_queue_xmit (30 samples, 5.99%)</title><rect x="151.3" y="483.0" width="70.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="154.3" y="494.0">__ip_que..</text>
</g>
<g>
<title>ip_local_out (29 samples, 5.79%)</title><rect x="151.3" y="467.0" width="68.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.3" y="478.0">ip_loca..</text>
</g>
<g>
<title>ip_output (28 samples, 5.59%)</title><rect x="151.3" y="451.0" width="66.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="154.3" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (28 samples, 5.59%)</title><rect x="151.3" y="435.0" width="66.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="154.3" y="446.0">ip_fini..</text>
</g>
<g>
<title>__ip_finish_output (28 samples, 5.59%)</title><rect x="151.3" y="419.0" width="66.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="154.3" y="430.0">__ip_fi..</text>
</g>
<g>
<title>ip_finish_output2 (28 samples, 5.59%)</title><rect x="151.3" y="403.0" width="66.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="154.3" y="414.0">ip_fini..</text>
</g>
<g>
<title>__local_bh_enable_ip (27 samples, 5.39%)</title><rect x="151.3" y="387.0" width="63.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.3" y="398.0">__local..</text>
</g>
<g>
<title>do_softirq.part.20 (27 samples, 5.39%)</title><rect x="151.3" y="371.0" width="63.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="154.3" y="382.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (27 samples, 5.39%)</title><rect x="151.3" y="355.0" width="63.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="154.3" y="366.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (27 samples, 5.39%)</title><rect x="151.3" y="339.0" width="63.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.3" y="350.0">__softi..</text>
</g>
<g>
<title>net_rx_action (27 samples, 5.39%)</title><rect x="151.3" y="323.0" width="63.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="154.3" y="334.0">net_rx_..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.20%)</title><rect x="151.3" y="307.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="154.3" y="318.0"></text>
</g>
<g>
<title>process_backlog (26 samples, 5.19%)</title><rect x="153.7" y="307.0" width="61.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="156.7" y="318.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (26 samples, 5.19%)</title><rect x="153.7" y="291.0" width="61.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="156.7" y="302.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (26 samples, 5.19%)</title><rect x="153.7" y="275.0" width="61.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="156.7" y="286.0">__neti..</text>
</g>
<g>
<title>ip_rcv (25 samples, 4.99%)</title><rect x="153.7" y="259.0" width="58.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="156.7" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (25 samples, 4.99%)</title><rect x="153.7" y="243.0" width="58.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="156.7" y="254.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (25 samples, 4.99%)</title><rect x="153.7" y="227.0" width="58.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="156.7" y="238.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (25 samples, 4.99%)</title><rect x="153.7" y="211.0" width="58.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="156.7" y="222.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (25 samples, 4.99%)</title><rect x="153.7" y="195.0" width="58.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="156.7" y="206.0">ip_pro..</text>
</g>
<g>
<title>tcp_v4_rcv (25 samples, 4.99%)</title><rect x="153.7" y="179.0" width="58.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="156.7" y="190.0">tcp_v4..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.20%)</title><rect x="153.7" y="163.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="156.7" y="174.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.20%)</title><rect x="156.0" y="163.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="159.0" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.20%)</title><rect x="158.4" y="163.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="161.4" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (22 samples, 4.39%)</title><rect x="160.7" y="163.0" width="51.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="163.7" y="174.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (22 samples, 4.39%)</title><rect x="160.7" y="147.0" width="51.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="163.7" y="158.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.20%)</title><rect x="160.7" y="131.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="163.7" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.20%)</title><rect x="160.7" y="115.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="163.7" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.20%)</title><rect x="160.7" y="99.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="163.7" y="110.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.20%)</title><rect x="163.1" y="131.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="166.1" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.20%)</title><rect x="163.1" y="115.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="166.1" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.20%)</title><rect x="163.1" y="99.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="166.1" y="110.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.20%)</title><rect x="163.1" y="83.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="166.1" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.20%)</title><rect x="163.1" y="67.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="166.1" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.20%)</title><rect x="163.1" y="51.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="166.1" y="62.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.20%)</title><rect x="163.1" y="35.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="166.1" y="46.0"></text>
</g>
<g>
<title>tcp_data_ready (18 samples, 3.59%)</title><rect x="165.4" y="131.0" width="42.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="168.4" y="142.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (18 samples, 3.59%)</title><rect x="165.4" y="115.0" width="42.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="168.4" y="126.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (18 samples, 3.59%)</title><rect x="165.4" y="99.0" width="42.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="168.4" y="110.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (18 samples, 3.59%)</title><rect x="165.4" y="83.0" width="42.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="168.4" y="94.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (18 samples, 3.59%)</title><rect x="165.4" y="67.0" width="42.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="168.4" y="78.0">__lo..</text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.20%)</title><rect x="207.8" y="131.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="210.8" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.20%)</title><rect x="210.2" y="131.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="213.2" y="142.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.20%)</title><rect x="212.6" y="259.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="215.6" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.20%)</title><rect x="214.9" y="387.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="217.9" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.20%)</title><rect x="214.9" y="371.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="217.9" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.20%)</title><rect x="214.9" y="355.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="217.9" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.20%)</title><rect x="214.9" y="339.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="217.9" y="350.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.20%)</title><rect x="214.9" y="323.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="217.9" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.20%)</title><rect x="214.9" y="307.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="217.9" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.20%)</title><rect x="214.9" y="291.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="217.9" y="302.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.20%)</title><rect x="217.3" y="451.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="220.3" y="462.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.20%)</title><rect x="219.6" y="467.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="222.6" y="478.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.20%)</title><rect x="222.0" y="515.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="225.0" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.20%)</title><rect x="222.0" y="499.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="225.0" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.20%)</title><rect x="222.0" y="483.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="225.0" y="494.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.20%)</title><rect x="222.0" y="467.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="225.0" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.20%)</title><rect x="222.0" y="451.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="225.0" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.60%)</title><rect x="224.3" y="659.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="227.3" y="670.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.60%)</title><rect x="224.3" y="643.0" width="7.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="227.3" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.60%)</title><rect x="224.3" y="627.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="227.3" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.60%)</title><rect x="224.3" y="611.0" width="7.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="227.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.40%)</title><rect x="231.4" y="803.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.20%)</title><rect x="231.4" y="787.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.20%)</title><rect x="231.4" y="771.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.20%)</title><rect x="231.4" y="755.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.20%)</title><rect x="233.8" y="787.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey (392 samples, 78.24%)</title><rect x="236.1" y="803.0" width="923.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.1" y="814.0">ru/mail/polis/service/basta123/MyHttpServerImpl.putValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.upsert (392 samples, 78.24%)</title><rect x="236.1" y="787.0" width="923.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.1" y="798.0">ru/mail/polis/dao/basta123/MyDAORocksDB.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (392 samples, 78.24%)</title><rect x="236.1" y="771.0" width="923.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.1" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (391 samples, 78.04%)</title><rect x="236.1" y="755.0" width="920.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.1" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.60%)</title><rect x="236.1" y="739.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.1" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (249 samples, 49.70%)</title><rect x="243.2" y="739.0" width="586.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="246.2" y="750.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__libc_free (1 samples, 0.20%)</title><rect x="245.5" y="723.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="248.5" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.40%)</title><rect x="247.9" y="723.0" width="4.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="250.9" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="250.2" y="707.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="253.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="250.2" y="691.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="253.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="250.2" y="675.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="253.2" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.20%)</title><rect x="252.6" y="723.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="255.6" y="734.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.40%)</title><rect x="255.0" y="723.0" width="4.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="258.0" y="734.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (242 samples, 48.30%)</title><rect x="259.7" y="723.0" width="569.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="262.7" y="734.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (240 samples, 47.90%)</title><rect x="259.7" y="707.0" width="565.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.7" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (240 samples, 47.90%)</title><rect x="259.7" y="691.0" width="565.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="262.7" y="702.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (240 samples, 47.90%)</title><rect x="259.7" y="675.0" width="565.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="262.7" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, r..</text>
</g>
<g>
<title>__libc_free (2 samples, 0.40%)</title><rect x="259.7" y="659.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="262.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.40%)</title><rect x="264.4" y="659.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="267.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (232 samples, 46.31%)</title><rect x="269.1" y="659.0" width="546.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="272.1" y="670.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (228 samples, 45.51%)</title><rect x="269.1" y="643.0" width="537.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="272.1" y="654.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBat..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.20%)</title><rect x="276.1" y="627.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="279.1" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="276.1" y="611.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="279.1" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="276.1" y="595.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="279.1" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="276.1" y="579.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="279.1" y="590.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.20%)</title><rect x="276.1" y="563.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="279.1" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.20%)</title><rect x="276.1" y="547.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="279.1" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.20%)</title><rect x="276.1" y="531.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="279.1" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.40%)</title><rect x="278.5" y="627.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="281.5" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.20%)</title><rect x="283.2" y="627.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="286.2" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="283.2" y="611.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="286.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="283.2" y="595.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="286.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="283.2" y="579.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="286.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.20%)</title><rect x="285.6" y="627.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (5 samples, 1.00%)</title><rect x="287.9" y="627.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="290.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (5 samples, 1.00%)</title><rect x="287.9" y="611.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="290.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 1.00%)</title><rect x="287.9" y="595.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="290.9" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.20%)</title><rect x="287.9" y="579.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="290.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="287.9" y="563.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="290.9" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="287.9" y="547.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="290.9" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="287.9" y="531.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="290.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.20%)</title><rect x="290.3" y="579.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="293.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.20%)</title><rect x="290.3" y="563.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="293.3" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.20%)</title><rect x="290.3" y="547.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="293.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.20%)</title><rect x="292.6" y="579.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="295.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="292.6" y="563.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="295.6" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="292.6" y="547.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="295.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="292.6" y="531.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="295.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.40%)</title><rect x="295.0" y="579.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="298.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.20%)</title><rect x="297.3" y="563.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.3" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="297.3" y="547.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="300.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="297.3" y="531.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="300.3" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="297.3" y="515.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="300.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (58 samples, 11.58%)</title><rect x="299.7" y="627.0" width="136.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="302.7" y="638.0">rocksdb::WriteBat..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (58 samples, 11.58%)</title><rect x="299.7" y="611.0" width="136.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.7" y="622.0">rocksdb::WriteBat..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (58 samples, 11.58%)</title><rect x="299.7" y="595.0" width="136.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="302.7" y="606.0">rocksdb::WriteBat..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (58 samples, 11.58%)</title><rect x="299.7" y="579.0" width="136.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="302.7" y="590.0">rocksdb::MemTable..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.20%)</title><rect x="299.7" y="563.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="302.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (57 samples, 11.38%)</title><rect x="302.1" y="563.0" width="134.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="305.1" y="574.0">rocksdb::MemTable..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (56 samples, 11.18%)</title><rect x="302.1" y="547.0" width="131.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="305.1" y="558.0">rocksdb::MemTabl..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (55 samples, 10.98%)</title><rect x="302.1" y="531.0" width="129.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.1" y="542.0">bool rocksdb::In..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (52 samples, 10.38%)</title><rect x="302.1" y="515.0" width="122.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="305.1" y="526.0">/tmp/librocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (40 samples, 7.98%)</title><rect x="311.5" y="499.0" width="94.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="314.5" y="510.0">/tmp/libroc..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (40 samples, 7.98%)</title><rect x="311.5" y="483.0" width="94.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="314.5" y="494.0">rocksdb::Me..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.60%)</title><rect x="311.5" y="467.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="314.5" y="478.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="316.2" y="451.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="319.2" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="316.2" y="435.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="319.2" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="316.2" y="419.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="319.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (37 samples, 7.39%)</title><rect x="318.5" y="467.0" width="87.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.5" y="478.0">rocksdb::B..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (14 samples, 2.79%)</title><rect x="318.5" y="451.0" width="33.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="321.5" y="462.0">JN..</text>
</g>
<g>
<title>jni_CallIntMethodV (14 samples, 2.79%)</title><rect x="318.5" y="435.0" width="33.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="321.5" y="446.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.20%)</title><rect x="320.9" y="419.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="323.9" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.40%)</title><rect x="323.3" y="419.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="326.3" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="328.0" y="419.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="331.0" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 1.80%)</title><rect x="330.3" y="419.0" width="21.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="333.3" y="430.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.20%)</title><rect x="335.0" y="403.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="338.0" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.80%)</title><rect x="337.4" y="403.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="340.4" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.20%)</title><rect x="339.7" y="387.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="342.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.20%)</title><rect x="342.1" y="387.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="345.1" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.20%)</title><rect x="344.5" y="387.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="347.5" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.20%)</title><rect x="346.8" y="403.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="349.8" y="414.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.20%)</title><rect x="349.2" y="403.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="352.2" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (15 samples, 2.99%)</title><rect x="351.5" y="451.0" width="35.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="354.5" y="462.0">JNI..</text>
</g>
<g>
<title>jni_CallVoidMethodV (15 samples, 2.99%)</title><rect x="351.5" y="435.0" width="35.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="354.5" y="446.0">jni..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.40%)</title><rect x="351.5" y="419.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="354.5" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="356.2" y="419.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="359.2" y="430.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.20%)</title><rect x="358.6" y="419.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.6" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="360.9" y="419.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="363.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.20%)</title><rect x="363.3" y="419.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="366.3" y="430.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (9 samples, 1.80%)</title><rect x="365.6" y="419.0" width="21.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="368.6" y="430.0">j..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.20%)</title><rect x="368.0" y="403.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="371.0" y="414.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.40%)</title><rect x="370.4" y="403.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="373.4" y="414.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="372.7" y="387.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="375.7" y="398.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="372.7" y="371.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="375.7" y="382.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="372.7" y="355.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="375.7" y="366.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.60%)</title><rect x="375.1" y="403.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.1" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.20%)</title><rect x="377.4" y="387.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.4" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.20%)</title><rect x="379.8" y="387.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="382.8" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.20%)</title><rect x="382.1" y="403.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="385.1" y="414.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="384.5" y="403.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="387.5" y="414.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="384.5" y="387.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="387.5" y="398.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="384.5" y="371.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.5" y="382.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.20%)</title><rect x="386.8" y="451.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="389.8" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.40%)</title><rect x="389.2" y="451.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="392.2" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.40%)</title><rect x="389.2" y="435.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.2" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.20%)</title><rect x="393.9" y="451.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="396.9" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="393.9" y="435.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="396.9" y="446.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="393.9" y="419.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="396.9" y="430.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="393.9" y="403.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="396.9" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.40%)</title><rect x="396.3" y="451.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="399.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.40%)</title><rect x="401.0" y="451.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="404.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.20%)</title><rect x="401.0" y="435.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="404.0" y="446.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.20%)</title><rect x="403.3" y="435.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="406.3" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="403.3" y="419.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="406.3" y="430.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="403.3" y="403.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="406.3" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="403.3" y="387.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="406.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 1.60%)</title><rect x="405.7" y="499.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="408.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 1.40%)</title><rect x="405.7" y="483.0" width="16.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="408.7" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="405.7" y="467.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="408.7" y="478.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.20%)</title><rect x="405.7" y="451.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="408.7" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.20%)</title><rect x="405.7" y="435.0" width="2.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="408.7" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="405.7" y="419.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="408.7" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.20%)</title><rect x="405.7" y="403.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="408.7" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (6 samples, 1.20%)</title><rect x="408.0" y="467.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="411.0" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (6 samples, 1.20%)</title><rect x="408.0" y="451.0" width="14.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="411.0" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.60%)</title><rect x="412.8" y="435.0" width="7.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="415.8" y="446.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.20%)</title><rect x="415.1" y="419.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="418.1" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="417.5" y="419.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="420.5" y="430.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.20%)</title><rect x="417.5" y="403.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="420.5" y="414.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.20%)</title><rect x="419.8" y="435.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="422.8" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="419.8" y="419.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="422.8" y="430.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="419.8" y="403.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="422.8" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="419.8" y="387.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="422.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.20%)</title><rect x="422.2" y="483.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="425.2" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.20%)</title><rect x="424.5" y="515.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="427.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.40%)</title><rect x="426.9" y="515.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="429.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.40%)</title><rect x="426.9" y="499.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="429.9" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="426.9" y="483.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="429.9" y="494.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.20%)</title><rect x="426.9" y="467.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="429.9" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.20%)</title><rect x="426.9" y="451.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="429.9" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="426.9" y="435.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="429.9" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.20%)</title><rect x="426.9" y="419.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="429.9" y="430.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="429.2" y="483.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="432.2" y="494.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.20%)</title><rect x="429.2" y="467.0" width="2.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="432.2" y="478.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.20%)</title><rect x="429.2" y="451.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="432.2" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="429.2" y="435.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="432.2" y="446.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="429.2" y="419.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="432.2" y="430.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="429.2" y="403.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="432.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.20%)</title><rect x="431.6" y="531.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="434.6" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="431.6" y="515.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="434.6" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="431.6" y="499.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="434.6" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="431.6" y="483.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="434.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.20%)</title><rect x="434.0" y="547.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="437.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (119 samples, 23.75%)</title><rect x="436.3" y="627.0" width="280.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="439.3" y="638.0">rocksdb::WriteBatchInternal::InsertInt..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (119 samples, 23.75%)</title><rect x="436.3" y="611.0" width="280.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="439.3" y="622.0">rocksdb::WriteBatch::Iterate(rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (119 samples, 23.75%)</title><rect x="436.3" y="595.0" width="280.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="439.3" y="606.0">rocksdb::WriteBatchInternal::Iterate(r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (119 samples, 23.75%)</title><rect x="436.3" y="579.0" width="280.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="439.3" y="590.0">rocksdb::MemTableInserter::PutCF(unsig..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.20%)</title><rect x="436.3" y="563.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="439.3" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="436.3" y="547.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="439.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="436.3" y="531.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="439.3" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="436.3" y="515.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="439.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.20%)</title><rect x="438.7" y="563.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (117 samples, 23.35%)</title><rect x="441.0" y="563.0" width="275.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="444.0" y="574.0">rocksdb::MemTableInserter::PutCFImpl(..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.20%)</title><rect x="443.4" y="547.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="446.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.20%)</title><rect x="445.7" y="547.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="448.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.20%)</title><rect x="448.1" y="547.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="451.1" y="558.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.20%)</title><rect x="448.1" y="531.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="451.1" y="542.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.20%)</title><rect x="448.1" y="515.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="451.1" y="526.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.20%)</title><rect x="448.1" y="499.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="451.1" y="510.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.20%)</title><rect x="448.1" y="483.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="451.1" y="494.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.20%)</title><rect x="448.1" y="467.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="451.1" y="478.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.20%)</title><rect x="448.1" y="451.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="451.1" y="462.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.20%)</title><rect x="448.1" y="435.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="451.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (113 samples, 22.55%)</title><rect x="450.4" y="547.0" width="266.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="453.4" y="558.0">rocksdb::MemTable::Add(unsigned long..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (112 samples, 22.36%)</title><rect x="452.8" y="531.0" width="263.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="455.8" y="542.0">rocksdb::InlineSkipList&lt;rocksdb::Me..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (112 samples, 22.36%)</title><rect x="452.8" y="515.0" width="263.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="455.8" y="526.0">bool rocksdb::InlineSkipList&lt;rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (103 samples, 20.56%)</title><rect x="452.8" y="499.0" width="242.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="455.8" y="510.0">/tmp/librocksdbjni63337728495875..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (96 samples, 19.16%)</title><rect x="469.3" y="483.0" width="226.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="472.3" y="494.0">/tmp/librocksdbjni633377284958..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (96 samples, 19.16%)</title><rect x="469.3" y="467.0" width="226.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="472.3" y="478.0">rocksdb::MemTable::KeyComparat..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="469.3" y="451.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="472.3" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.20%)</title><rect x="471.6" y="451.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="474.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (89 samples, 17.76%)</title><rect x="474.0" y="451.0" width="209.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="477.0" y="462.0">rocksdb::BaseComparatorJniC..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (22 samples, 4.39%)</title><rect x="481.1" y="435.0" width="51.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="484.1" y="446.0">JNIEn..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="481.1" y="419.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="484.1" y="430.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (21 samples, 4.19%)</title><rect x="483.4" y="419.0" width="49.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="486.4" y="430.0">jni_C..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.40%)</title><rect x="485.8" y="403.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="488.8" y="414.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.20%)</title><rect x="490.5" y="403.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.5" y="414.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.40%)</title><rect x="492.8" y="403.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="495.8" y="414.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.20%)</title><rect x="497.5" y="403.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="500.5" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.60%)</title><rect x="499.9" y="403.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="502.9" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (11 samples, 2.20%)</title><rect x="507.0" y="403.0" width="25.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="510.0" y="414.0">j..</text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.40%)</title><rect x="514.0" y="387.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="517.0" y="398.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="518.7" y="387.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="521.7" y="398.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.60%)</title><rect x="521.1" y="387.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="524.1" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.20%)</title><rect x="523.5" y="371.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="526.5" y="382.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="525.8" y="371.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="528.8" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.20%)</title><rect x="525.8" y="355.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="528.8" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.20%)</title><rect x="528.2" y="387.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="531.2" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.20%)</title><rect x="530.5" y="387.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.5" y="398.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (35 samples, 6.99%)</title><rect x="532.9" y="435.0" width="82.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="535.9" y="446.0">JNIEnv_::..</text>
</g>
<g>
<title>jni_CallVoidMethodV (35 samples, 6.99%)</title><rect x="532.9" y="419.0" width="82.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="535.9" y="430.0">jni_CallV..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.20%)</title><rect x="542.3" y="403.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="545.3" y="414.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.20%)</title><rect x="544.7" y="403.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.7" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="547.0" y="403.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="550.0" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="549.4" y="403.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="552.4" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.40%)</title><rect x="551.7" y="403.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="554.7" y="414.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (24 samples, 4.79%)</title><rect x="556.4" y="403.0" width="56.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="559.4" y="414.0">jni_in..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.20%)</title><rect x="556.4" y="387.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.4" y="398.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (9 samples, 1.80%)</title><rect x="558.8" y="387.0" width="21.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="561.8" y="398.0">J..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="577.6" y="371.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="580.6" y="382.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="577.6" y="355.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="580.6" y="366.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="577.6" y="339.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="580.6" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (12 samples, 2.40%)</title><rect x="580.0" y="387.0" width="28.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="583.0" y="398.0">Ja..</text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="591.8" y="371.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.8" y="382.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.20%)</title><rect x="594.1" y="371.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.1" y="382.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="594.1" y="355.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="597.1" y="366.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="594.1" y="339.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="597.1" y="350.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="594.1" y="323.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="597.1" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.20%)</title><rect x="596.5" y="371.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="599.5" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.80%)</title><rect x="598.8" y="371.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.8" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.20%)</title><rect x="605.9" y="355.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="608.9" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.20%)</title><rect x="608.2" y="387.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="611.2" y="398.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.20%)</title><rect x="610.6" y="387.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.6" y="398.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="613.0" y="403.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="616.0" y="414.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.20%)</title><rect x="615.3" y="435.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="618.3" y="446.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="615.3" y="419.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="618.3" y="430.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="615.3" y="403.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="618.3" y="414.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.20%)</title><rect x="615.3" y="387.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="618.3" y="398.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.20%)</title><rect x="615.3" y="371.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="618.3" y="382.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.20%)</title><rect x="615.3" y="355.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="618.3" y="366.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.20%)</title><rect x="615.3" y="339.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="618.3" y="350.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.20%)</title><rect x="615.3" y="323.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="618.3" y="334.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.20%)</title><rect x="615.3" y="307.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="618.3" y="318.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.20%)</title><rect x="615.3" y="291.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="618.3" y="302.0"></text>
</g>
<g>
<title>__lll_unlock_wake (15 samples, 2.99%)</title><rect x="617.7" y="435.0" width="35.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="620.7" y="446.0">__l..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 2.79%)</title><rect x="620.0" y="419.0" width="33.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="623.0" y="430.0">en..</text>
</g>
<g>
<title>do_syscall_64 (14 samples, 2.79%)</title><rect x="620.0" y="403.0" width="33.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="623.0" y="414.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (14 samples, 2.79%)</title><rect x="620.0" y="387.0" width="33.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="623.0" y="398.0">__..</text>
</g>
<g>
<title>do_futex (14 samples, 2.79%)</title><rect x="620.0" y="371.0" width="33.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="623.0" y="382.0">do..</text>
</g>
<g>
<title>futex_wake (14 samples, 2.79%)</title><rect x="620.0" y="355.0" width="33.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="623.0" y="366.0">fu..</text>
</g>
<g>
<title>wake_up_q (13 samples, 2.59%)</title><rect x="622.4" y="339.0" width="30.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="625.4" y="350.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (13 samples, 2.59%)</title><rect x="622.4" y="323.0" width="30.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="625.4" y="334.0">tr..</text>
</g>
<g>
<title>__lock_text_start (13 samples, 2.59%)</title><rect x="622.4" y="307.0" width="30.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="625.4" y="318.0">__..</text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.80%)</title><rect x="653.0" y="435.0" width="9.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="656.0" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.40%)</title><rect x="653.0" y="419.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="656.0" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.40%)</title><rect x="657.7" y="419.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.7" y="430.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.20%)</title><rect x="662.4" y="435.0" width="2.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="665.4" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.40%)</title><rect x="664.8" y="435.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="667.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (5 samples, 1.00%)</title><rect x="669.5" y="435.0" width="11.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.40%)</title><rect x="669.5" y="419.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="672.5" y="430.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.40%)</title><rect x="674.2" y="419.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="677.2" y="430.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.20%)</title><rect x="678.9" y="419.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="681.9" y="430.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="678.9" y="403.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="681.9" y="414.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="678.9" y="387.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="681.9" y="398.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="678.9" y="371.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="681.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.20%)</title><rect x="681.3" y="435.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="684.3" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="681.3" y="419.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="684.3" y="430.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="681.3" y="403.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="684.3" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="681.3" y="387.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="684.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.20%)</title><rect x="683.6" y="451.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="686.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.40%)</title><rect x="686.0" y="451.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.0" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="688.3" y="435.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="691.3" y="446.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="688.3" y="419.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="691.3" y="430.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="688.3" y="403.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="691.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.40%)</title><rect x="690.7" y="451.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="693.7" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.40%)</title><rect x="695.4" y="499.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="698.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (7 samples, 1.40%)</title><rect x="700.1" y="499.0" width="16.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 1.00%)</title><rect x="700.1" y="483.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="703.1" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.60%)</title><rect x="700.1" y="467.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.1" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="700.1" y="451.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.1" y="462.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.40%)</title><rect x="702.5" y="451.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="705.5" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.40%)</title><rect x="702.5" y="435.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="705.5" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.40%)</title><rect x="702.5" y="419.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="705.5" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.20%)</title><rect x="702.5" y="403.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="705.5" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.20%)</title><rect x="704.8" y="403.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.8" y="414.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.20%)</title><rect x="707.2" y="467.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="710.2" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.20%)</title><rect x="707.2" y="451.0" width="2.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="710.2" y="462.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.20%)</title><rect x="707.2" y="435.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="710.2" y="446.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.20%)</title><rect x="707.2" y="419.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="710.2" y="430.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.20%)</title><rect x="707.2" y="403.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="710.2" y="414.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.20%)</title><rect x="709.5" y="467.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="712.5" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="709.5" y="451.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="712.5" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="709.5" y="435.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="712.5" y="446.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.20%)</title><rect x="709.5" y="419.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="712.5" y="430.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.20%)</title><rect x="709.5" y="403.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="712.5" y="414.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.20%)</title><rect x="709.5" y="387.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="712.5" y="398.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.20%)</title><rect x="709.5" y="371.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="712.5" y="382.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.20%)</title><rect x="709.5" y="355.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="712.5" y="366.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.20%)</title><rect x="709.5" y="339.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="712.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.20%)</title><rect x="711.9" y="483.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="714.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.20%)</title><rect x="714.2" y="483.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="717.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (28 samples, 5.59%)</title><rect x="716.6" y="627.0" width="65.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.6" y="638.0">rocksdb..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="780.2" y="611.0" width="2.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="783.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="780.2" y="595.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="783.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="780.2" y="579.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="783.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (7 samples, 1.40%)</title><rect x="782.5" y="627.0" width="16.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (7 samples, 1.40%)</title><rect x="782.5" y="611.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="785.5" y="622.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.20%)</title><rect x="796.7" y="595.0" width="2.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="799.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.20%)</title><rect x="799.0" y="627.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.0" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.20%)</title><rect x="799.0" y="611.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="802.0" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="799.0" y="595.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="802.0" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="799.0" y="579.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="802.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="799.0" y="563.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="802.0" y="574.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.20%)</title><rect x="799.0" y="547.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="802.0" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.20%)</title><rect x="799.0" y="531.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="802.0" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.20%)</title><rect x="799.0" y="515.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="802.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.20%)</title><rect x="801.4" y="627.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="804.4" y="638.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.20%)</title><rect x="803.7" y="627.0" width="2.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="806.7" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="803.7" y="611.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="806.7" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="803.7" y="595.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="806.7" y="606.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.9 (1 samples, 0.20%)</title><rect x="803.7" y="579.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="806.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (1 samples, 0.20%)</title><rect x="806.1" y="643.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="809.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.40%)</title><rect x="808.4" y="643.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="811.4" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.40%)</title><rect x="808.4" y="627.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="811.4" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.40%)</title><rect x="808.4" y="611.0" width="4.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="811.4" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.40%)</title><rect x="808.4" y="595.0" width="4.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="811.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.20%)</title><rect x="813.2" y="643.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="816.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.20%)</title><rect x="815.5" y="659.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="818.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.20%)</title><rect x="817.9" y="659.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.40%)</title><rect x="820.2" y="659.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (1 samples, 0.20%)</title><rect x="820.2" y="643.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="823.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.20%)</title><rect x="822.6" y="643.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.40%)</title><rect x="824.9" y="707.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 5.19%)</title><rect x="829.6" y="739.0" width="61.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="832.6" y="750.0">[unkno..</text>
</g>
<g>
<title>__libc_write (12 samples, 2.40%)</title><rect x="829.6" y="723.0" width="28.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="832.6" y="734.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 2.20%)</title><rect x="832.0" y="707.0" width="25.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="835.0" y="718.0">e..</text>
</g>
<g>
<title>do_syscall_64 (11 samples, 2.20%)</title><rect x="832.0" y="691.0" width="25.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="835.0" y="702.0">d..</text>
</g>
<g>
<title>__x64_sys_write (11 samples, 2.20%)</title><rect x="832.0" y="675.0" width="25.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="835.0" y="686.0">_..</text>
</g>
<g>
<title>__f_unlock_pos (1 samples, 0.20%)</title><rect x="832.0" y="659.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="835.0" y="670.0"></text>
</g>
<g>
<title>ksys_write (10 samples, 2.00%)</title><rect x="834.4" y="659.0" width="23.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="837.4" y="670.0">k..</text>
</g>
<g>
<title>vfs_write (10 samples, 2.00%)</title><rect x="834.4" y="643.0" width="23.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="837.4" y="654.0">v..</text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.20%)</title><rect x="836.7" y="627.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="839.7" y="638.0"></text>
</g>
<g>
<title>__vfs_write (8 samples, 1.60%)</title><rect x="839.1" y="627.0" width="18.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="842.1" y="638.0"></text>
</g>
<g>
<title>new_sync_write (8 samples, 1.60%)</title><rect x="839.1" y="611.0" width="18.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="842.1" y="622.0"></text>
</g>
<g>
<title>__generic_file_write_iter (1 samples, 0.20%)</title><rect x="839.1" y="595.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="842.1" y="606.0"></text>
</g>
<g>
<title>ext4_file_write_iter (7 samples, 1.40%)</title><rect x="841.4" y="595.0" width="16.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="844.4" y="606.0"></text>
</g>
<g>
<title>__generic_file_write_iter (6 samples, 1.20%)</title><rect x="843.8" y="579.0" width="14.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="846.8" y="590.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 1.00%)</title><rect x="846.1" y="563.0" width="11.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="849.1" y="574.0"></text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.20%)</title><rect x="846.1" y="547.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="849.1" y="558.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.20%)</title><rect x="846.1" y="531.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="849.1" y="542.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.20%)</title><rect x="846.1" y="515.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="849.1" y="526.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.20%)</title><rect x="846.1" y="499.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="849.1" y="510.0"></text>
</g>
<g>
<title>ext4_da_write_end (3 samples, 0.60%)</title><rect x="848.5" y="547.0" width="7.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="851.5" y="558.0"></text>
</g>
<g>
<title>generic_write_end (3 samples, 0.60%)</title><rect x="848.5" y="531.0" width="7.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="851.5" y="542.0"></text>
</g>
<g>
<title>__mark_inode_dirty (3 samples, 0.60%)</title><rect x="848.5" y="515.0" width="7.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="851.5" y="526.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.20%)</title><rect x="848.5" y="499.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="851.5" y="510.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.40%)</title><rect x="850.8" y="499.0" width="4.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="853.8" y="510.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.20%)</title><rect x="850.8" y="483.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="853.8" y="494.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.20%)</title><rect x="850.8" y="467.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="853.8" y="478.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.20%)</title><rect x="850.8" y="451.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="853.8" y="462.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.20%)</title><rect x="850.8" y="435.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="853.8" y="446.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.20%)</title><rect x="853.2" y="483.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="856.2" y="494.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.20%)</title><rect x="853.2" y="467.0" width="2.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="856.2" y="478.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.20%)</title><rect x="853.2" y="451.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="856.2" y="462.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.20%)</title><rect x="853.2" y="435.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="856.2" y="446.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.20%)</title><rect x="855.5" y="547.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="858.5" y="558.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.20%)</title><rect x="857.9" y="723.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="860.9" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.20%)</title><rect x="857.9" y="707.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="860.9" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.20%)</title><rect x="857.9" y="691.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="860.9" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.20%)</title><rect x="857.9" y="675.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="860.9" y="686.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.20%)</title><rect x="857.9" y="659.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="860.9" y="670.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.20%)</title><rect x="857.9" y="643.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="860.9" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.20%)</title><rect x="857.9" y="627.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="860.9" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.20%)</title><rect x="857.9" y="611.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="860.9" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.20%)</title><rect x="857.9" y="595.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="860.9" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.20%)</title><rect x="857.9" y="579.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="860.9" y="590.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (12 samples, 2.40%)</title><rect x="860.3" y="723.0" width="28.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="863.3" y="734.0">pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 2.40%)</title><rect x="860.3" y="707.0" width="28.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="863.3" y="718.0">en..</text>
</g>
<g>
<title>do_syscall_64 (12 samples, 2.40%)</title><rect x="860.3" y="691.0" width="28.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="863.3" y="702.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 2.00%)</title><rect x="865.0" y="675.0" width="23.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="868.0" y="686.0">_..</text>
</g>
<g>
<title>do_futex (10 samples, 2.00%)</title><rect x="865.0" y="659.0" width="23.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="868.0" y="670.0">d..</text>
</g>
<g>
<title>futex_wait (10 samples, 2.00%)</title><rect x="865.0" y="643.0" width="23.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="868.0" y="654.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (8 samples, 1.60%)</title><rect x="865.0" y="627.0" width="18.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="868.0" y="638.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.20%)</title><rect x="865.0" y="611.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="868.0" y="622.0"></text>
</g>
<g>
<title>schedule (7 samples, 1.40%)</title><rect x="867.3" y="611.0" width="16.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="870.3" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 1.40%)</title><rect x="867.3" y="595.0" width="16.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="870.3" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 1.40%)</title><rect x="867.3" y="579.0" width="16.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="870.3" y="590.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.40%)</title><rect x="883.8" y="627.0" width="4.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="886.8" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.20%)</title><rect x="886.2" y="611.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="889.2" y="622.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.20%)</title><rect x="888.5" y="723.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.5" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (20 samples, 3.99%)</title><rect x="890.9" y="739.0" width="47.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="893.9" y="750.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 3.99%)</title><rect x="890.9" y="723.0" width="47.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="893.9" y="734.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (20 samples, 3.99%)</title><rect x="890.9" y="707.0" width="47.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="893.9" y="718.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (20 samples, 3.99%)</title><rect x="890.9" y="691.0" width="47.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="893.9" y="702.0">__x6..</text>
</g>
<g>
<title>do_futex (20 samples, 3.99%)</title><rect x="890.9" y="675.0" width="47.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="893.9" y="686.0">do_f..</text>
</g>
<g>
<title>futex_wake (20 samples, 3.99%)</title><rect x="890.9" y="659.0" width="47.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="893.9" y="670.0">fute..</text>
</g>
<g>
<title>wake_up_q (19 samples, 3.79%)</title><rect x="893.2" y="643.0" width="44.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="896.2" y="654.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (19 samples, 3.79%)</title><rect x="893.2" y="627.0" width="44.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="896.2" y="638.0">try_..</text>
</g>
<g>
<title>__lock_text_start (19 samples, 3.79%)</title><rect x="893.2" y="611.0" width="44.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="896.2" y="622.0">__lo..</text>
</g>
<g>
<title>call_stub (2 samples, 0.40%)</title><rect x="938.0" y="739.0" width="4.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="941.0" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (9 samples, 1.80%)</title><rect x="942.7" y="739.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.7" y="750.0">o..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (82 samples, 16.37%)</title><rect x="963.9" y="739.0" width="193.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.9" y="750.0">ru/mail/polis/dao/basta12..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (78 samples, 15.57%)</title><rect x="971.0" y="723.0" width="183.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.0" y="734.0">ru/mail/polis/dao/basta1..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.40%)</title><rect x="971.0" y="707.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (2 samples, 0.40%)</title><rect x="971.0" y="691.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.0" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (76 samples, 15.17%)</title><rect x="975.7" y="707.0" width="179.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.7" y="718.0">org/rocksdb/AbstractSli..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (6 samples, 1.20%)</title><rect x="975.7" y="691.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.7" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="987.4" y="675.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="990.4" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="987.4" y="659.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="990.4" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="987.4" y="643.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="990.4" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (70 samples, 13.97%)</title><rect x="989.8" y="691.0" width="164.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="992.8" y="702.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (67 samples, 13.37%)</title><rect x="996.9" y="675.0" width="157.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.9" y="686.0">org/rocksdb/Slice.da..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (64 samples, 12.77%)</title><rect x="1001.6" y="659.0" width="150.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1004.6" y="670.0">Java_org_rocksdb_Sl..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.20%)</title><rect x="1003.9" y="643.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.9" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.20%)</title><rect x="1006.3" y="643.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.3" y="654.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.20%)</title><rect x="1008.6" y="643.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.6" y="654.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.40%)</title><rect x="1011.0" y="643.0" width="4.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1014.0" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.40%)</title><rect x="1015.7" y="643.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1018.7" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="1015.7" y="627.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.7" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.20%)</title><rect x="1018.1" y="627.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.1" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (46 samples, 9.18%)</title><rect x="1020.4" y="643.0" width="108.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1023.4" y="654.0">jni_NewByteAr..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.40%)</title><rect x="1020.4" y="627.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1023.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.60%)</title><rect x="1025.1" y="627.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.1" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.60%)</title><rect x="1032.2" y="627.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.2" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="1039.3" y="627.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.3" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.60%)</title><rect x="1041.6" y="627.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.6" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (34 samples, 6.79%)</title><rect x="1048.7" y="627.0" width="80.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.7" y="638.0">TypeArray..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (28 samples, 5.59%)</title><rect x="1058.1" y="611.0" width="66.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.1" y="622.0">Collect..</text>
</g>
<g>
<title>MemAllocator::allocate() const (20 samples, 3.99%)</title><rect x="1060.5" y="595.0" width="47.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.5" y="606.0">MemA..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.20%)</title><rect x="1069.9" y="579.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.9" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.80%)</title><rect x="1072.2" y="579.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.2" y="590.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (11 samples, 2.20%)</title><rect x="1081.7" y="579.0" width="25.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1084.7" y="590.0">_..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="1105.2" y="563.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1108.2" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="1105.2" y="547.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1108.2" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="1105.2" y="531.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1108.2" y="542.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.80%)</title><rect x="1107.6" y="595.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.6" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.60%)</title><rect x="1117.0" y="595.0" width="7.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1120.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.20%)</title><rect x="1124.1" y="611.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.1" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="1126.4" y="611.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1129.4" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="1126.4" y="595.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1129.4" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="1126.4" y="579.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1129.4" y="590.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 2.00%)</title><rect x="1128.8" y="643.0" width="23.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1131.8" y="654.0">j..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.20%)</title><rect x="1142.9" y="627.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.9" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.20%)</title><rect x="1145.2" y="627.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.40%)</title><rect x="1147.6" y="627.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.6" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.20%)</title><rect x="1152.3" y="659.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="1154.7" y="723.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1157.7" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="1154.7" y="707.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="1154.7" y="691.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1157.7" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.20%)</title><rect x="1157.0" y="755.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1160.0" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.20%)</title><rect x="1157.0" y="739.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1160.0" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.20%)</title><rect x="1157.0" y="723.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1160.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.40%)</title><rect x="1159.4" y="851.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1162.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.40%)</title><rect x="1159.4" y="835.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1162.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.40%)</title><rect x="1159.4" y="819.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1162.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.60%)</title><rect x="1164.1" y="851.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1167.1" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (8 samples, 1.60%)</title><rect x="1171.2" y="867.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (8 samples, 1.60%)</title><rect x="1171.2" y="851.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (1 samples, 0.20%)</title><rect x="1171.2" y="835.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.20%)</title><rect x="1171.2" y="819.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>__recv (7 samples, 1.40%)</title><rect x="1173.5" y="835.0" width="16.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1176.5" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.60%)</title><rect x="1182.9" y="819.0" width="7.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.60%)</title><rect x="1182.9" y="803.0" width="7.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.60%)</title><rect x="1182.9" y="787.0" width="7.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 0.60%)</title><rect x="1182.9" y="771.0" width="7.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (2 samples, 0.40%)</title><rect x="1182.9" y="755.0" width="4.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (2 samples, 0.40%)</title><rect x="1182.9" y="739.0" width="4.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.40%)</title><rect x="1182.9" y="723.0" width="4.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.20%)</title><rect x="1182.9" y="707.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.20%)</title><rect x="1185.3" y="707.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.20%)</title><rect x="1185.3" y="691.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.20%)</title><rect x="1185.3" y="675.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.20%)</title><rect x="1185.3" y="659.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1188.3" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.20%)</title><rect x="1185.3" y="643.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1188.3" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.20%)</title><rect x="1187.6" y="755.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1190.6" y="766.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.20%)</title><rect x="1187.6" y="739.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1190.6" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.20%)</title><rect x="1187.6" y="723.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1190.6" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.20%)</title><rect x="1187.6" y="707.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1190.6" y="718.0"></text>
</g>
</g>
</svg>
