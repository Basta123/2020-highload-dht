<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (946 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.95%)</title><rect x="11.2" y="883.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (9 samples, 0.95%)</title><rect x="11.2" y="867.0" width="11.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="11.2" y="851.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (8 samples, 0.85%)</title><rect x="12.5" y="851.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.5" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="12.5" y="835.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.5" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="12.5" y="819.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="15.5" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="12.5" y="803.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="15.5" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="12.5" y="787.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="15.5" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.63%)</title><rect x="13.7" y="835.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.7" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="15.0" y="819.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="18.0" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.11%)</title><rect x="16.2" y="819.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="16.2" y="803.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="16.2" y="787.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="16.2" y="771.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (3 samples, 0.32%)</title><rect x="17.5" y="819.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.5" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="21.2" y="835.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.2" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="21.2" y="819.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="24.2" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="21.2" y="803.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="24.2" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="21.2" y="787.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="24.2" y="798.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.11%)</title><rect x="22.5" y="883.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="25.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="22.5" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.11%)</title><rect x="22.5" y="851.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.5" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.11%)</title><rect x="22.5" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.5" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="22.5" y="819.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="25.5" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.11%)</title><rect x="22.5" y="803.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 2.33%)</title><rect x="23.7" y="883.0" width="27.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="26.7" y="894.0">[..</text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (22 samples, 2.33%)</title><rect x="23.7" y="867.0" width="27.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="26.7" y="878.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 2.11%)</title><rect x="25.0" y="851.0" width="24.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="28.0" y="862.0">e..</text>
</g>
<g>
<title>do_syscall_64 (20 samples, 2.11%)</title><rect x="25.0" y="835.0" width="24.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="28.0" y="846.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (19 samples, 2.01%)</title><rect x="26.2" y="819.0" width="23.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="29.2" y="830.0">_..</text>
</g>
<g>
<title>do_futex (19 samples, 2.01%)</title><rect x="26.2" y="803.0" width="23.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="29.2" y="814.0">d..</text>
</g>
<g>
<title>futex_wait (19 samples, 2.01%)</title><rect x="26.2" y="787.0" width="23.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="29.2" y="798.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (19 samples, 2.01%)</title><rect x="26.2" y="771.0" width="23.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="29.2" y="782.0">f..</text>
</g>
<g>
<title>schedule (18 samples, 1.90%)</title><rect x="27.5" y="755.0" width="22.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="30.5" y="766.0">s..</text>
</g>
<g>
<title>__sched_text_start (18 samples, 1.90%)</title><rect x="27.5" y="739.0" width="22.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="30.5" y="750.0">_..</text>
</g>
<g>
<title>finish_task_switch (18 samples, 1.90%)</title><rect x="27.5" y="723.0" width="22.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="30.5" y="734.0">f..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="49.9" y="851.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="52.9" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="49.9" y="835.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.9" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="49.9" y="819.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="52.9" y="830.0"></text>
</g>
<g>
<title>[unknown_Java] (86 samples, 9.09%)</title><rect x="51.2" y="883.0" width="107.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="54.2" y="894.0">[unknown_Java]</text>
</g>
<g>
<title>__pthread_cond_signal (86 samples, 9.09%)</title><rect x="51.2" y="867.0" width="107.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="54.2" y="878.0">__pthread_con..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (86 samples, 9.09%)</title><rect x="51.2" y="851.0" width="107.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="54.2" y="862.0">entry_SYSCALL..</text>
</g>
<g>
<title>do_syscall_64 (86 samples, 9.09%)</title><rect x="51.2" y="835.0" width="107.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="54.2" y="846.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_futex (84 samples, 8.88%)</title><rect x="51.2" y="819.0" width="104.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="54.2" y="830.0">__x64_sys_fu..</text>
</g>
<g>
<title>do_futex (84 samples, 8.88%)</title><rect x="51.2" y="803.0" width="104.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="54.2" y="814.0">do_futex</text>
</g>
<g>
<title>futex_wake (84 samples, 8.88%)</title><rect x="51.2" y="787.0" width="104.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="54.2" y="798.0">futex_wake</text>
</g>
<g>
<title>wake_up_q (84 samples, 8.88%)</title><rect x="51.2" y="771.0" width="104.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="54.2" y="782.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (84 samples, 8.88%)</title><rect x="51.2" y="755.0" width="104.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="54.2" y="766.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (84 samples, 8.88%)</title><rect x="51.2" y="739.0" width="104.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="54.2" y="750.0">__lock_text_..</text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.21%)</title><rect x="155.9" y="819.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="158.9" y="830.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.21%)</title><rect x="155.9" y="803.0" width="2.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="158.9" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.21%)</title><rect x="155.9" y="787.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="158.9" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.21%)</title><rect x="155.9" y="771.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="158.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.register (4 samples, 0.42%)</title><rect x="158.4" y="883.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ref/Finalizer.&lt;init&gt; (3 samples, 0.32%)</title><rect x="159.7" y="867.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.7" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (821 samples, 86.79%)</title><rect x="163.4" y="883.0" width="1024.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.4" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.11%)</title><rect x="164.7" y="867.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (6 samples, 0.63%)</title><rect x="165.9" y="867.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (6 samples, 0.63%)</title><rect x="165.9" y="851.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.53%)</title><rect x="165.9" y="835.0" width="6.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="168.9" y="846.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.53%)</title><rect x="165.9" y="819.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="168.9" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.53%)</title><rect x="165.9" y="803.0" width="6.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="168.9" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.53%)</title><rect x="165.9" y="787.0" width="6.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="168.9" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (4 samples, 0.42%)</title><rect x="167.2" y="771.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.2" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (4 samples, 0.42%)</title><rect x="167.2" y="755.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.2" y="766.0"></text>
</g>
<g>
<title>ep_poll (3 samples, 0.32%)</title><rect x="167.2" y="739.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="170.2" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.20 (1 samples, 0.11%)</title><rect x="167.2" y="723.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="170.2" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.11%)</title><rect x="167.2" y="707.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="170.2" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.11%)</title><rect x="167.2" y="691.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="170.2" y="702.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.11%)</title><rect x="167.2" y="675.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="170.2" y="686.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.21%)</title><rect x="168.4" y="723.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="171.4" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.21%)</title><rect x="168.4" y="707.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="171.4" y="718.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.21%)</title><rect x="168.4" y="691.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="171.4" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.21%)</title><rect x="168.4" y="675.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="171.4" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.21%)</title><rect x="168.4" y="659.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="171.4" y="670.0"></text>
</g>
<g>
<title>fput (1 samples, 0.11%)</title><rect x="170.9" y="739.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="173.9" y="750.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.11%)</title><rect x="170.9" y="723.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="173.9" y="734.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.11%)</title><rect x="172.2" y="835.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="175.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (813 samples, 85.94%)</title><rect x="173.4" y="867.0" width="1014.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.4" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (813 samples, 85.94%)</title><rect x="173.4" y="851.0" width="1014.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.4" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (797 samples, 84.25%)</title><rect x="173.4" y="835.0" width="994.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.4" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (791 samples, 83.62%)</title><rect x="177.1" y="819.0" width="986.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.1" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (791 samples, 83.62%)</title><rect x="177.1" y="803.0" width="986.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.1" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler3_getValueByKey.handleRequest (790 samples, 83.51%)</title><rect x="177.1" y="787.0" width="985.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.1" y="798.0">RequestHandler3_getValueByKey.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (56 samples, 5.92%)</title><rect x="178.4" y="771.0" width="69.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.4" y="782.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (55 samples, 5.81%)</title><rect x="179.6" y="755.0" width="68.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.6" y="766.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 5.81%)</title><rect x="179.6" y="739.0" width="68.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.6" y="750.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 5.81%)</title><rect x="179.6" y="723.0" width="68.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.6" y="734.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (55 samples, 5.81%)</title><rect x="179.6" y="707.0" width="68.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.6" y="718.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (55 samples, 5.81%)</title><rect x="179.6" y="691.0" width="68.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.6" y="702.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.11%)</title><rect x="179.6" y="675.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="182.6" y="686.0"></text>
</g>
<g>
<title>__send (54 samples, 5.71%)</title><rect x="180.9" y="675.0" width="67.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="183.9" y="686.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (54 samples, 5.71%)</title><rect x="180.9" y="659.0" width="67.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="183.9" y="670.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (54 samples, 5.71%)</title><rect x="180.9" y="643.0" width="67.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="183.9" y="654.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_sendto (50 samples, 5.29%)</title><rect x="180.9" y="627.0" width="62.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="183.9" y="638.0">__x64_..</text>
</g>
<g>
<title>__sys_sendto (49 samples, 5.18%)</title><rect x="180.9" y="611.0" width="61.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="183.9" y="622.0">__sys_..</text>
</g>
<g>
<title>sock_sendmsg (48 samples, 5.07%)</title><rect x="180.9" y="595.0" width="59.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="183.9" y="606.0">sock_s..</text>
</g>
<g>
<title>inet6_sendmsg (48 samples, 5.07%)</title><rect x="180.9" y="579.0" width="59.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="183.9" y="590.0">inet6_..</text>
</g>
<g>
<title>tcp_sendmsg (48 samples, 5.07%)</title><rect x="180.9" y="563.0" width="59.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="183.9" y="574.0">tcp_se..</text>
</g>
<g>
<title>tcp_push (1 samples, 0.11%)</title><rect x="180.9" y="547.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="183.9" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (47 samples, 4.97%)</title><rect x="182.1" y="547.0" width="58.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="185.1" y="558.0">tcp_se..</text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.11%)</title><rect x="184.6" y="531.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="187.6" y="542.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.11%)</title><rect x="184.6" y="515.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="187.6" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.21%)</title><rect x="185.9" y="531.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="188.9" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.21%)</title><rect x="185.9" y="515.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="188.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.62 (2 samples, 0.21%)</title><rect x="185.9" y="499.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="188.9" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.21%)</title><rect x="185.9" y="483.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="188.9" y="494.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.11%)</title><rect x="187.1" y="467.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="190.1" y="478.0"></text>
</g>
<g>
<title>tcp_push (42 samples, 4.44%)</title><rect x="188.4" y="531.0" width="52.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="191.4" y="542.0">tcp_p..</text>
</g>
<g>
<title>__tcp_push_pending_frames (42 samples, 4.44%)</title><rect x="188.4" y="515.0" width="52.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="191.4" y="526.0">__tcp..</text>
</g>
<g>
<title>tcp_write_xmit (42 samples, 4.44%)</title><rect x="188.4" y="499.0" width="52.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="191.4" y="510.0">tcp_w..</text>
</g>
<g>
<title>__tcp_transmit_skb (42 samples, 4.44%)</title><rect x="188.4" y="483.0" width="52.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="191.4" y="494.0">__tcp..</text>
</g>
<g>
<title>ip_queue_xmit (41 samples, 4.33%)</title><rect x="189.6" y="467.0" width="51.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="192.6" y="478.0">ip_qu..</text>
</g>
<g>
<title>__ip_queue_xmit (41 samples, 4.33%)</title><rect x="189.6" y="451.0" width="51.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="192.6" y="462.0">__ip_..</text>
</g>
<g>
<title>ip_local_out (41 samples, 4.33%)</title><rect x="189.6" y="435.0" width="51.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="192.6" y="446.0">ip_lo..</text>
</g>
<g>
<title>ip_output (41 samples, 4.33%)</title><rect x="189.6" y="419.0" width="51.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="192.6" y="430.0">ip_ou..</text>
</g>
<g>
<title>ip_finish_output (41 samples, 4.33%)</title><rect x="189.6" y="403.0" width="51.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="192.6" y="414.0">ip_fi..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.11%)</title><rect x="189.6" y="387.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="192.6" y="398.0"></text>
</g>
<g>
<title>__ip_finish_output (39 samples, 4.12%)</title><rect x="190.9" y="387.0" width="48.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="193.9" y="398.0">__ip..</text>
</g>
<g>
<title>ip_finish_output2 (37 samples, 3.91%)</title><rect x="193.4" y="371.0" width="46.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="196.4" y="382.0">ip_f..</text>
</g>
<g>
<title>__local_bh_enable_ip (34 samples, 3.59%)</title><rect x="193.4" y="355.0" width="42.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="196.4" y="366.0">__lo..</text>
</g>
<g>
<title>do_softirq.part.20 (34 samples, 3.59%)</title><rect x="193.4" y="339.0" width="42.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="196.4" y="350.0">do_s..</text>
</g>
<g>
<title>do_softirq_own_stack (34 samples, 3.59%)</title><rect x="193.4" y="323.0" width="42.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="196.4" y="334.0">do_s..</text>
</g>
<g>
<title>__softirqentry_text_start (34 samples, 3.59%)</title><rect x="193.4" y="307.0" width="42.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="196.4" y="318.0">__so..</text>
</g>
<g>
<title>net_rx_action (33 samples, 3.49%)</title><rect x="194.6" y="291.0" width="41.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="197.6" y="302.0">net..</text>
</g>
<g>
<title>process_backlog (33 samples, 3.49%)</title><rect x="194.6" y="275.0" width="41.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="197.6" y="286.0">pro..</text>
</g>
<g>
<title>__netif_receive_skb (33 samples, 3.49%)</title><rect x="194.6" y="259.0" width="41.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="197.6" y="270.0">__n..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (33 samples, 3.49%)</title><rect x="194.6" y="243.0" width="41.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="197.6" y="254.0">__n..</text>
</g>
<g>
<title>ip_rcv (33 samples, 3.49%)</title><rect x="194.6" y="227.0" width="41.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="197.6" y="238.0">ip_..</text>
</g>
<g>
<title>ip_rcv_core.isra.20 (1 samples, 0.11%)</title><rect x="194.6" y="211.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="197.6" y="222.0"></text>
</g>
<g>
<title>ip_rcv_finish (32 samples, 3.38%)</title><rect x="195.9" y="211.0" width="39.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="198.9" y="222.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver (30 samples, 3.17%)</title><rect x="198.4" y="195.0" width="37.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="201.4" y="206.0">ip_..</text>
</g>
<g>
<title>ip_local_deliver_finish (30 samples, 3.17%)</title><rect x="198.4" y="179.0" width="37.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="201.4" y="190.0">ip_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (30 samples, 3.17%)</title><rect x="198.4" y="163.0" width="37.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="201.4" y="174.0">ip_..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.11%)</title><rect x="198.4" y="147.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="201.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (29 samples, 3.07%)</title><rect x="199.6" y="147.0" width="36.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="202.6" y="158.0">tcp..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.21%)</title><rect x="199.6" y="131.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="202.6" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (27 samples, 2.85%)</title><rect x="202.1" y="131.0" width="33.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="205.1" y="142.0">tc..</text>
</g>
<g>
<title>tcp_rcv_established (27 samples, 2.85%)</title><rect x="202.1" y="115.0" width="33.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="205.1" y="126.0">tc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.11%)</title><rect x="202.1" y="99.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="205.1" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.11%)</title><rect x="202.1" y="83.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="205.1" y="94.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.11%)</title><rect x="202.1" y="67.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="205.1" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.11%)</title><rect x="203.3" y="99.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="206.3" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (25 samples, 2.64%)</title><rect x="204.6" y="99.0" width="31.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="207.6" y="110.0">tc..</text>
</g>
<g>
<title>sock_def_readable (25 samples, 2.64%)</title><rect x="204.6" y="83.0" width="31.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="207.6" y="94.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (25 samples, 2.64%)</title><rect x="204.6" y="67.0" width="31.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="207.6" y="78.0">__..</text>
</g>
<g>
<title>__wake_up_common_lock (25 samples, 2.64%)</title><rect x="204.6" y="51.0" width="31.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="207.6" y="62.0">__..</text>
</g>
<g>
<title>__lock_text_start (25 samples, 2.64%)</title><rect x="204.6" y="35.0" width="31.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="207.6" y="46.0">__..</text>
</g>
<g>
<title>dev_queue_xmit (3 samples, 0.32%)</title><rect x="235.8" y="355.0" width="3.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="238.8" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (3 samples, 0.32%)</title><rect x="235.8" y="339.0" width="3.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="238.8" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.21%)</title><rect x="237.0" y="323.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="240.0" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.11%)</title><rect x="237.0" y="307.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="240.0" y="318.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.11%)</title><rect x="237.0" y="291.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="240.0" y="302.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.11%)</title><rect x="238.3" y="307.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="241.3" y="318.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.11%)</title><rect x="239.5" y="387.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="242.5" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.11%)</title><rect x="240.8" y="595.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="243.8" y="606.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.11%)</title><rect x="240.8" y="579.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="243.8" y="590.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.11%)</title><rect x="240.8" y="563.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="243.8" y="574.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.11%)</title><rect x="240.8" y="547.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="243.8" y="558.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.11%)</title><rect x="242.0" y="611.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="245.0" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.42%)</title><rect x="243.3" y="627.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="246.3" y="638.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.42%)</title><rect x="243.3" y="611.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="246.3" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.42%)</title><rect x="243.3" y="595.0" width="4.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="246.3" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.42%)</title><rect x="243.3" y="579.0" width="4.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="246.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey (733 samples, 77.48%)</title><rect x="248.2" y="771.0" width="914.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.2" y="782.0">ru/mail/polis/service/basta123/MyHttpServerImpl.getValueByKey</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.get (731 samples, 77.27%)</title><rect x="249.5" y="755.0" width="911.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.5" y="766.0">ru/mail/polis/dao/basta123/MyDAORocksDB.get</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="250.7" y="739.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="253.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="250.7" y="723.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="253.7" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="250.7" y="707.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="253.7" y="718.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.11%)</title><rect x="252.0" y="739.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="255.0" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="252.0" y="723.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="255.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="252.0" y="707.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="255.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="252.0" y="691.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="255.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyDAORocksDB.iterator (552 samples, 58.35%)</title><rect x="253.2" y="739.0" width="688.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.2" y="750.0">ru/mail/polis/dao/basta123/MyDAORocksDB.iterator</text>
</g>
<g>
<title>org/rocksdb/RocksDB.newIterator (50 samples, 5.29%)</title><rect x="253.2" y="723.0" width="62.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.2" y="734.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.iterator (44 samples, 4.65%)</title><rect x="254.5" y="707.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.5" y="718.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_iterator__J (38 samples, 4.02%)</title><rect x="254.5" y="691.0" width="47.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="257.5" y="702.0">Java..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (3 samples, 0.32%)</title><rect x="254.5" y="675.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.5" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="257.0" y="659.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="260.0" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="257.0" y="643.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="260.0" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="257.0" y="627.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="260.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.11%)</title><rect x="258.2" y="675.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="261.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*) (34 samples, 3.59%)</title><rect x="259.5" y="675.0" width="42.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.5" y="686.0">rock..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.11%)</title><rect x="259.5" y="659.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="262.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewIteratorImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, unsigned long, rocksdb::ReadCallback*, bool, bool) (33 samples, 3.49%)</title><rect x="260.7" y="659.0" width="41.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="263.7" y="670.0">roc..</text>
</g>
<g>
<title>rocksdb::Arena::Arena(unsigned long, rocksdb::AllocTracker*, unsigned long) (1 samples, 0.11%)</title><rect x="260.7" y="643.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="263.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::Arena::Arena(unsigned long, rocksdb::AllocTracker*, unsigned long) [clone .plt] (1 samples, 0.11%)</title><rect x="262.0" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Init(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (1 samples, 0.11%)</title><rect x="263.2" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="266.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetReferencedSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.53%)</title><rect x="264.5" y="643.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="267.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.53%)</title><rect x="264.5" y="627.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="267.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() [clone .plt] (1 samples, 0.11%)</title><rect x="264.5" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="267.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.32%)</title><rect x="265.7" y="611.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="268.7" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="268.2" y="595.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="271.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.11%)</title><rect x="269.5" y="611.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="272.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.11%)</title><rect x="269.5" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="272.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::NewInternalIterator(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*, rocksdb::Arena*, rocksdb::RangeDelAggregator*, unsigned long) (14 samples, 1.48%)</title><rect x="270.7" y="643.0" width="17.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="273.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.11%)</title><rect x="270.7" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="273.7" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="270.7" y="611.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="273.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="270.7" y="595.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="273.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="270.7" y="579.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="273.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::Arena*) (1 samples, 0.11%)</title><rect x="271.9" y="627.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="274.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::AddIterators(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::MergeIteratorBuilder*, rocksdb::RangeDelAggregator*) (12 samples, 1.27%)</title><rect x="273.2" y="627.0" width="15.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="276.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::AddIteratorsForLevel(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::MergeIteratorBuilder*, int, rocksdb::RangeDelAggregator*) (12 samples, 1.27%)</title><rect x="273.2" y="611.0" width="15.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="276.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::AddIterator(rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*) (2 samples, 0.21%)</title><rect x="274.4" y="595.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="277.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::TableCache::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::RangeDelAggregator*, rocksdb::SliceTransform const*, rocksdb::TableReader**, rocksdb::HistogramImpl*, rocksdb::TableReaderCaller, rocksdb::Arena*, bool, int, rocksdb::InternalKey const*, rocksdb::InternalKey const*) (8 samples, 0.85%)</title><rect x="276.9" y="595.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="279.9" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.11%)</title><rect x="276.9" y="579.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="279.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateFallback(unsigned long, bool) (1 samples, 0.11%)</title><rect x="278.2" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::SliceTransform const*, rocksdb::Arena*, bool, rocksdb::TableReaderCaller, unsigned long) (5 samples, 0.53%)</title><rect x="279.4" y="579.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="282.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateFallback(unsigned long, bool) (4 samples, 0.42%)</title><rect x="279.4" y="563.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.4" y="574.0"></text>
</g>
<g>
<title>malloc_usable_size (1 samples, 0.11%)</title><rect x="279.4" y="547.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="282.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateNewBlock(unsigned long) (2 samples, 0.21%)</title><rect x="280.7" y="547.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="283.7" y="558.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.11%)</title><rect x="280.7" y="531.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="283.7" y="542.0"></text>
</g>
<g>
<title>void std::vector&lt;char*, std::allocator&lt;char*&gt; &gt;::_M_realloc_insert&lt;decltype(nullptr)&gt;(__gnu_cxx::__normal_iterator&lt;char**, std::vector&lt;char*, std::allocator&lt;char*&gt; &gt; &gt;, decltype(nullptr)&amp;&amp;) (1 samples, 0.11%)</title><rect x="281.9" y="531.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="284.9" y="542.0"></text>
</g>
<g>
<title>void std::vector&lt;char*, std::allocator&lt;char*&gt; &gt;::_M_realloc_insert&lt;decltype(nullptr)&gt;(__gnu_cxx::__normal_iterator&lt;char**, std::vector&lt;char*, std::allocator&lt;char*&gt; &gt; &gt;, decltype(nullptr)&amp;&amp;) (1 samples, 0.11%)</title><rect x="283.2" y="547.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="286.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (1 samples, 0.11%)</title><rect x="284.4" y="563.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.4" y="574.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.11%)</title><rect x="285.7" y="579.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="288.7" y="590.0"></text>
</g>
<g>
<title>std::pair&lt;std::_Rb_tree_iterator&lt;unsigned long&gt;, bool&gt; std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt;(unsigned long const&amp;) (1 samples, 0.11%)</title><rect x="286.9" y="595.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="289.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewIterator(rocksdb::ReadOptions const&amp;, rocksdb::Arena*) (2 samples, 0.21%)</title><rect x="288.2" y="643.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="291.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.11%)</title><rect x="290.7" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="293.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) [clone .plt] (1 samples, 0.11%)</title><rect x="291.9" y="643.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::MergeIteratorBuilder(rocksdb::InternalKeyComparator const*, rocksdb::Arena*, bool) (1 samples, 0.11%)</title><rect x="293.2" y="643.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="296.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::~MergeIteratorBuilder() (1 samples, 0.11%)</title><rect x="294.4" y="643.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="297.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::Valid() const (1 samples, 0.11%)</title><rect x="295.6" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="298.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::NewArenaWrappedDbIterator(rocksdb::Env*, rocksdb::ReadOptions const&amp;, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, unsigned long const&amp;, unsigned long, unsigned long, rocksdb::ReadCallback*, rocksdb::DBImpl*, rocksdb::ColumnFamilyData*, bool, bool) (3 samples, 0.32%)</title><rect x="296.9" y="643.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="299.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::ReverseRangeDelIterator::ReverseRangeDelIterator(rocksdb::InternalKeyComparator const*) [clone .plt] (1 samples, 0.11%)</title><rect x="299.4" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="302.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::AddIterators(rocksdb::ReadOptions const&amp;, rocksdb::EnvOptions const&amp;, rocksdb::MergeIteratorBuilder*, rocksdb::RangeDelAggregator*) (1 samples, 0.11%)</title><rect x="300.6" y="643.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="303.6" y="654.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.11%)</title><rect x="301.9" y="691.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="304.9" y="702.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.11%)</title><rect x="303.1" y="691.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="306.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::NewIterator(rocksdb::ReadOptions const&amp;) (1 samples, 0.11%)</title><rect x="304.4" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="307.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (1 samples, 0.11%)</title><rect x="305.6" y="691.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.6" y="702.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) (1 samples, 0.11%)</title><rect x="306.9" y="691.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="309.9" y="702.0"></text>
</g>
<g>
<title>rocksdb_iterator_helper(rocksdb::DB*, rocksdb::ReadOptions, rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.11%)</title><rect x="308.1" y="691.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="311.1" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksIterator.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="707.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.4" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="691.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.4" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksObject.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="675.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.4" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="659.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractNativeReference.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="643.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.4" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.53%)</title><rect x="309.4" y="627.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.4" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::register_finalizer(oopDesc*, JavaThread*) (4 samples, 0.42%)</title><rect x="310.6" y="611.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="313.6" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::register_finalizer(instanceOopDesc*, Thread*) (4 samples, 0.42%)</title><rect x="310.6" y="595.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="313.6" y="606.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.11%)</title><rect x="311.9" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="314.9" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.21%)</title><rect x="313.1" y="579.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="316.1" y="590.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.11%)</title><rect x="313.1" y="563.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="316.1" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="314.4" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="317.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt; (464 samples, 49.05%)</title><rect x="315.6" y="723.0" width="578.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="318.6" y="734.0">ru/mail/polis/dao/basta123/MyRecordIter.&lt;init&gt;</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.seek (464 samples, 49.05%)</title><rect x="315.6" y="707.0" width="578.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="318.6" y="718.0">org/rocksdb/AbstractRocksIterator.seek</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.seek0 (463 samples, 48.94%)</title><rect x="316.8" y="691.0" width="577.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.8" y="702.0">org/rocksdb/RocksIterator.seek0</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.32%)</title><rect x="316.8" y="675.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.8" y="686.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksIterator_seek0 (300 samples, 31.71%)</title><rect x="320.6" y="675.0" width="374.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="323.6" y="686.0">Java_org_rocksdb_RocksIterator_seek0</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="320.6" y="659.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="323.6" y="670.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (1 samples, 0.11%)</title><rect x="321.8" y="659.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="324.8" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="323.1" y="659.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="326.1" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayElements (1 samples, 0.11%)</title><rect x="324.3" y="659.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="327.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::TraceIteratorSeek(unsigned int const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.21%)</title><rect x="325.6" y="659.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="328.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (294 samples, 31.08%)</title><rect x="328.1" y="659.0" width="366.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.1" y="670.0">rocksdb::DBIter::Seek(rocksdb::Slice const&amp;)</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="328.1" y="643.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="331.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::ClearHeaps() (1 samples, 0.11%)</title><rect x="329.3" y="643.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="332.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::Seek(rocksdb::Slice const&amp;) (292 samples, 30.87%)</title><rect x="330.6" y="643.0" width="364.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="333.6" y="654.0">rocksdb::MergingIterator::Seek(rocksdb::Slice cons..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.21%)</title><rect x="330.6" y="627.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="333.6" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.21%)</title><rect x="330.6" y="611.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="333.6" y="622.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.21%)</title><rect x="330.6" y="595.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="333.6" y="606.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="330.6" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="333.6" y="590.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="331.8" y="579.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="334.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator&lt;rocksdb::DataBlockIter, rocksdb::Slice&gt;::SeekImpl(rocksdb::Slice const*) (62 samples, 6.55%)</title><rect x="333.1" y="627.0" width="77.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="336.1" y="638.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator&lt;rocksdb::DataBlockIter, rocksdb::Slice&gt;::InitDataBlock() (2 samples, 0.21%)</title><rect x="333.1" y="611.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="336.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (2 samples, 0.21%)</title><rect x="333.1" y="595.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="336.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (2 samples, 0.21%)</title><rect x="333.1" y="579.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="336.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (2 samples, 0.21%)</title><rect x="333.1" y="563.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="336.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.21%)</title><rect x="333.1" y="547.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (1 samples, 0.11%)</title><rect x="334.3" y="531.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="337.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (1 samples, 0.11%)</title><rect x="334.3" y="515.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="337.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (26 samples, 2.75%)</title><rect x="335.6" y="611.0" width="32.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="338.6" y="622.0">ro..</text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (23 samples, 2.43%)</title><rect x="339.3" y="595.0" width="28.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="342.3" y="606.0">ro..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="339.3" y="579.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="342.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (21 samples, 2.22%)</title><rect x="340.5" y="579.0" width="26.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="343.5" y="590.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (6 samples, 0.63%)</title><rect x="344.3" y="563.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="347.3" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 0.63%)</title><rect x="344.3" y="547.0" width="7.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="347.3" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.63%)</title><rect x="344.3" y="531.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="347.3" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="346.8" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="349.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.32%)</title><rect x="348.0" y="515.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="351.0" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="349.3" y="499.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="352.3" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="350.5" y="499.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="353.5" y="510.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="350.5" y="483.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="353.5" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (9 samples, 0.95%)</title><rect x="351.8" y="563.0" width="11.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="354.8" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (9 samples, 0.95%)</title><rect x="351.8" y="547.0" width="11.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="354.8" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="353.0" y="531.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="356.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="354.3" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="357.3" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 0.53%)</title><rect x="355.5" y="531.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="358.5" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.32%)</title><rect x="358.0" y="515.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="361.0" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="361.8" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.8" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.21%)</title><rect x="363.0" y="563.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="366.0" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="363.0" y="547.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="366.0" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="364.2" y="547.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="367.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="365.5" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="368.5" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="365.5" y="547.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="368.5" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="365.5" y="531.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="368.5" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="365.5" y="515.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="368.5" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="365.5" y="499.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="368.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.11%)</title><rect x="366.7" y="579.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="369.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (34 samples, 3.59%)</title><rect x="368.0" y="611.0" width="42.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="371.0" y="622.0">rock..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="369.2" y="595.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="372.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (32 samples, 3.38%)</title><rect x="370.5" y="595.0" width="39.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="373.5" y="606.0">roc..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="371.7" y="579.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="374.7" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="373.0" y="579.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="376.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (28 samples, 2.96%)</title><rect x="374.2" y="579.0" width="35.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="377.2" y="590.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.74%)</title><rect x="374.2" y="563.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="377.2" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (7 samples, 0.74%)</title><rect x="374.2" y="547.0" width="8.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="377.2" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="374.2" y="531.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.2" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.63%)</title><rect x="375.5" y="531.0" width="7.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="378.5" y="542.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.11%)</title><rect x="376.7" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="379.7" y="526.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.11%)</title><rect x="378.0" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="381.0" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.21%)</title><rect x="379.2" y="515.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="382.2" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="381.7" y="515.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="384.7" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (18 samples, 1.90%)</title><rect x="383.0" y="563.0" width="22.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="386.0" y="574.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (18 samples, 1.90%)</title><rect x="383.0" y="547.0" width="22.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="386.0" y="558.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.32%)</title><rect x="384.2" y="531.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="387.2" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="386.7" y="515.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="389.7" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="386.7" y="499.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="389.7" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="386.7" y="483.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="389.7" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="387.9" y="531.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="390.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (13 samples, 1.37%)</title><rect x="389.2" y="531.0" width="16.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="392.2" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.32%)</title><rect x="390.4" y="515.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="393.4" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.74%)</title><rect x="394.2" y="515.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="397.2" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.11%)</title><rect x="396.7" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="399.7" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="397.9" y="499.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="400.9" y="510.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.11%)</title><rect x="399.2" y="499.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="402.2" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="400.4" y="499.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.4" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="401.7" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="404.7" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.11%)</title><rect x="402.9" y="515.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="405.9" y="526.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="404.2" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.2" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="404.2" y="499.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="407.2" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="404.2" y="483.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="407.2" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="404.2" y="467.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="407.2" y="478.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="405.4" y="563.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="408.4" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="406.7" y="563.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="409.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="407.9" y="563.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="410.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.11%)</title><rect x="409.2" y="579.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (228 samples, 24.10%)</title><rect x="410.4" y="627.0" width="284.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="413.4" y="638.0">rocksdb::MemTableIterator::Seek(rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (228 samples, 24.10%)</title><rect x="410.4" y="611.0" width="284.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="413.4" y="622.0">/tmp/librocksdbjni6333772849587512536.so</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (227 samples, 24.00%)</title><rect x="410.4" y="595.0" width="283.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="413.4" y="606.0">rocksdb::InlineSkipList&lt;rocksdb::MemTa..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="417.9" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="420.9" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.21%)</title><rect x="419.1" y="579.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="422.1" y="590.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="421.6" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="424.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="422.9" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (215 samples, 22.73%)</title><rect x="424.1" y="579.0" width="268.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="427.1" y="590.0">rocksdb::MemTable::KeyComparator::op..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.32%)</title><rect x="430.4" y="563.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.4" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="432.9" y="547.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="435.9" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="432.9" y="531.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="435.9" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="432.9" y="515.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="435.9" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) [clone .plt] (1 samples, 0.11%)</title><rect x="434.1" y="563.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.1" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="435.3" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="438.3" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.42%)</title><rect x="436.6" y="563.0" width="5.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="439.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (196 samples, 20.72%)</title><rect x="441.6" y="563.0" width="244.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="444.6" y="574.0">rocksdb::BaseComparatorJniCallba..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (52 samples, 5.50%)</title><rect x="447.8" y="547.0" width="64.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="450.8" y="558.0">JNIEnv_..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.11%)</title><rect x="449.1" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="452.1" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (50 samples, 5.29%)</title><rect x="450.3" y="531.0" width="62.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="453.3" y="542.0">jni_Ca..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="455.3" y="515.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="458.3" y="526.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.21%)</title><rect x="456.6" y="515.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="459.6" y="526.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.21%)</title><rect x="459.0" y="515.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="462.0" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (5 samples, 0.53%)</title><rect x="461.5" y="515.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="464.5" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="467.8" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="470.8" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.11%)</title><rect x="469.0" y="515.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.0" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="470.3" y="515.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="473.3" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="470.3" y="499.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="473.3" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="470.3" y="483.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="473.3" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="470.3" y="467.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="473.3" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="471.5" y="515.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="474.5" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (30 samples, 3.17%)</title><rect x="474.0" y="515.0" width="37.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="477.0" y="526.0">jni..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="479.0" y="499.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.0" y="510.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.21%)</title><rect x="480.3" y="499.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="483.3" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.32%)</title><rect x="482.7" y="499.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.7" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (17 samples, 1.80%)</title><rect x="486.5" y="499.0" width="21.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="489.5" y="510.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="492.7" y="483.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.7" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="494.0" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="497.0" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.42%)</title><rect x="495.2" y="483.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="498.2" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="499.0" y="467.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="502.0" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="499.0" y="451.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="502.0" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="499.0" y="435.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="502.0" y="446.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="500.2" y="483.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.2" y="494.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.21%)</title><rect x="501.5" y="483.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="504.5" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="504.0" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="507.0" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.21%)</title><rect x="505.2" y="483.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="508.2" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.11%)</title><rect x="507.7" y="499.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="510.7" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="508.9" y="499.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="511.9" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="510.2" y="499.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="513.2" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="511.4" y="515.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="514.4" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (95 samples, 10.04%)</title><rect x="512.7" y="547.0" width="118.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.7" y="558.0">JNIEnv_::CallV..</text>
</g>
<g>
<title>jni_CallVoidMethodV (93 samples, 9.83%)</title><rect x="515.2" y="531.0" width="116.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="518.2" y="542.0">jni_CallVoidMe..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.42%)</title><rect x="517.7" y="515.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.7" y="526.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.21%)</title><rect x="522.7" y="515.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="525.7" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.11%)</title><rect x="525.2" y="515.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="528.2" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="526.4" y="515.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="529.4" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.11%)</title><rect x="527.7" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="530.7" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.21%)</title><rect x="528.9" y="515.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="531.9" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="530.1" y="499.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="533.1" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="530.1" y="483.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="533.1" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="530.1" y="467.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="533.1" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.32%)</title><rect x="531.4" y="515.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="534.4" y="526.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.11%)</title><rect x="535.1" y="515.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.1" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.11%)</title><rect x="536.4" y="515.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="539.4" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.32%)</title><rect x="537.6" y="515.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="540.6" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.42%)</title><rect x="541.4" y="515.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.4" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (67 samples, 7.08%)</title><rect x="546.4" y="515.0" width="83.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="549.4" y="526.0">jni_invok..</text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="556.3" y="499.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="559.3" y="510.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (5 samples, 0.53%)</title><rect x="557.6" y="499.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.6" y="510.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="563.8" y="499.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="566.8" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (9 samples, 0.95%)</title><rect x="565.1" y="499.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="568.1" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (34 samples, 3.59%)</title><rect x="576.3" y="499.0" width="42.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="579.3" y="510.0">Java..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="585.0" y="483.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="588.0" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="586.3" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.3" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.11%)</title><rect x="587.5" y="483.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.5" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (11 samples, 1.16%)</title><rect x="588.8" y="483.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="591.8" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.42%)</title><rect x="596.3" y="467.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="599.3" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.11%)</title><rect x="601.2" y="467.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.2" y="478.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (3 samples, 0.32%)</title><rect x="602.5" y="483.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.5" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.74%)</title><rect x="606.2" y="483.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="609.2" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.32%)</title><rect x="615.0" y="483.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.0" y="494.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="617.5" y="467.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="620.5" y="478.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.21%)</title><rect x="618.7" y="499.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="621.7" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.21%)</title><rect x="621.2" y="499.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.2" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.42%)</title><rect x="623.7" y="499.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="626.7" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.11%)</title><rect x="628.7" y="499.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="631.7" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="629.9" y="515.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="632.9" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="629.9" y="499.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="632.9" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="629.9" y="483.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="632.9" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="631.2" y="547.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.2" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 0.63%)</title><rect x="633.7" y="547.0" width="7.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="636.7" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.32%)</title><rect x="641.2" y="547.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="644.2" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (19 samples, 2.01%)</title><rect x="644.9" y="547.0" width="23.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="647.9" y="558.0">j..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.21%)</title><rect x="649.9" y="531.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="652.9" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (7 samples, 0.74%)</title><rect x="652.4" y="531.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.4" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.63%)</title><rect x="661.1" y="531.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.1" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.21%)</title><rect x="668.6" y="547.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="671.6" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.32%)</title><rect x="671.1" y="547.0" width="3.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="674.1" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="674.8" y="547.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="677.8" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.11%)</title><rect x="676.1" y="547.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="679.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.63%)</title><rect x="677.3" y="547.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.3" y="558.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="679.8" y="531.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="682.8" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="681.1" y="531.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="684.1" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.21%)</title><rect x="682.3" y="531.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="685.3" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="684.8" y="547.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="687.8" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="684.8" y="531.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="687.8" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="684.8" y="515.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="687.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="686.1" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="689.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.21%)</title><rect x="687.3" y="563.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="690.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.21%)</title><rect x="689.8" y="563.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="692.8" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="692.3" y="579.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="695.3" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="692.3" y="563.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="695.3" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="692.3" y="547.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="695.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="693.6" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="696.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.42%)</title><rect x="694.8" y="675.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="697.8" y="686.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.11%)</title><rect x="694.8" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="697.8" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.11%)</title><rect x="696.0" y="659.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="699.0" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.11%)</title><rect x="697.3" y="659.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="700.3" y="670.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.11%)</title><rect x="698.5" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="701.5" y="670.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (2 samples, 0.21%)</title><rect x="699.8" y="675.0" width="2.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="702.8" y="686.0"></text>
</g>
<g>
<title>call_stub (12 samples, 1.27%)</title><rect x="702.3" y="675.0" width="15.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="705.3" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (21 samples, 2.22%)</title><rect x="717.3" y="675.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.3" y="686.0">o..</text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="743.4" y="675.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="744.7" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="747.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (119 samples, 12.58%)</title><rect x="745.9" y="675.0" width="148.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.9" y="686.0">ru/mail/polis/dao/b..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (115 samples, 12.16%)</title><rect x="750.9" y="659.0" width="143.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.9" y="670.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (4 samples, 0.42%)</title><rect x="750.9" y="643.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="753.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (4 samples, 0.42%)</title><rect x="750.9" y="627.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.9" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (111 samples, 11.73%)</title><rect x="755.9" y="643.0" width="138.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.9" y="654.0">org/rocksdb/Abstr..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (2 samples, 0.21%)</title><rect x="755.9" y="627.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.9" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (109 samples, 11.52%)</title><rect x="758.4" y="627.0" width="136.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.4" y="638.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (107 samples, 11.31%)</title><rect x="760.9" y="611.0" width="133.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.9" y="622.0">org/rocksdb/Slice..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (93 samples, 9.83%)</title><rect x="765.9" y="595.0" width="116.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="768.9" y="606.0">Java_org_rocks..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.11%)</title><rect x="768.4" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="771.4" y="590.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.11%)</title><rect x="769.6" y="579.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.6" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="770.9" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="773.9" y="590.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (2 samples, 0.21%)</title><rect x="772.1" y="579.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="775.1" y="590.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (4 samples, 0.42%)</title><rect x="774.6" y="579.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="777.6" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.85%)</title><rect x="779.6" y="579.0" width="10.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="782.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.21%)</title><rect x="782.1" y="563.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="785.1" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.32%)</title><rect x="784.6" y="563.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="787.6" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="787.1" y="547.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="790.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="787.1" y="531.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="790.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="787.1" y="515.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="790.1" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="788.4" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="791.4" y="574.0"></text>
</g>
<g>
<title>jni_NewByteArray (50 samples, 5.29%)</title><rect x="789.6" y="579.0" width="62.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="792.6" y="590.0">jni_Ne..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.21%)</title><rect x="795.8" y="563.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="798.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.42%)</title><rect x="798.3" y="563.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.3" y="574.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.32%)</title><rect x="803.3" y="563.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.3" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.21%)</title><rect x="807.1" y="563.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="810.1" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (7 samples, 0.74%)</title><rect x="809.6" y="563.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.6" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="817.0" y="547.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="820.0" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="817.0" y="531.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="820.0" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="817.0" y="515.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="820.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (27 samples, 2.85%)</title><rect x="818.3" y="563.0" width="33.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="821.3" y="574.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (22 samples, 2.33%)</title><rect x="823.3" y="547.0" width="27.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="826.3" y="558.0">C..</text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.11%)</title><rect x="824.5" y="531.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="827.5" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (16 samples, 1.69%)</title><rect x="825.8" y="531.0" width="19.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.8" y="542.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.11%)</title><rect x="830.8" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.8" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.11%)</title><rect x="832.0" y="515.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="835.0" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (9 samples, 0.95%)</title><rect x="833.3" y="515.0" width="11.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="836.3" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="844.5" y="515.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="847.5" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="844.5" y="499.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="847.5" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="844.5" y="483.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="847.5" y="494.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.21%)</title><rect x="845.7" y="531.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.7" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.21%)</title><rect x="848.2" y="531.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="851.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="850.7" y="547.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.7" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 2.43%)</title><rect x="852.0" y="579.0" width="28.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="855.0" y="590.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.21%)</title><rect x="858.2" y="563.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.2" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.63%)</title><rect x="860.7" y="563.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="863.7" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="866.9" y="547.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="869.9" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="866.9" y="531.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="869.9" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="866.9" y="515.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="869.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (7 samples, 0.74%)</title><rect x="868.2" y="563.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="871.2" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.32%)</title><rect x="876.9" y="563.0" width="3.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="879.9" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.21%)</title><rect x="878.2" y="547.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.2" y="558.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.11%)</title><rect x="880.7" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.7" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.74%)</title><rect x="881.9" y="595.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="884.9" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="889.4" y="579.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="892.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="889.4" y="563.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="892.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="889.4" y="547.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="892.4" y="558.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.11%)</title><rect x="890.6" y="595.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="893.6" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.21%)</title><rect x="891.9" y="595.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="894.9" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="893.1" y="579.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="896.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="893.1" y="563.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="896.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="893.1" y="547.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="896.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.close (38 samples, 4.02%)</title><rect x="894.4" y="723.0" width="47.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="897.4" y="734.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/AbstractImmutableNativeReference.close (38 samples, 4.02%)</title><rect x="894.4" y="707.0" width="47.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.4" y="718.0">org/..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.disposeInternal (38 samples, 4.02%)</title><rect x="894.4" y="691.0" width="47.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.4" y="702.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.disposeInternal (38 samples, 4.02%)</title><rect x="894.4" y="675.0" width="47.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.4" y="686.0">org/..</text>
</g>
<g>
<title>__libc_free (6 samples, 0.63%)</title><rect x="894.4" y="659.0" width="7.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="897.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (32 samples, 3.38%)</title><rect x="901.9" y="659.0" width="39.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="904.9" y="670.0">roc..</text>
</g>
<g>
<title>rocksdb::Arena::~Arena() (1 samples, 0.11%)</title><rect x="901.9" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::~ArenaWrappedDBIter() (29 samples, 3.07%)</title><rect x="903.1" y="643.0" width="36.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.1" y="654.0">roc..</text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (28 samples, 2.96%)</title><rect x="903.1" y="627.0" width="34.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.1" y="638.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.11%)</title><rect x="904.4" y="611.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="907.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.11%)</title><rect x="905.6" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="908.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::SuperVersion::Unref() (1 samples, 0.11%)</title><rect x="905.6" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="908.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (1 samples, 0.11%)</title><rect x="906.8" y="611.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::~MergingIterator() (23 samples, 2.43%)</title><rect x="908.1" y="611.0" width="28.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.1" y="622.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (2 samples, 0.21%)</title><rect x="910.6" y="595.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="913.6" y="606.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.11%)</title><rect x="913.1" y="595.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="916.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator&lt;rocksdb::DataBlockIter, rocksdb::Slice&gt;::~BlockBasedTableIterator() (10 samples, 1.06%)</title><rect x="914.3" y="595.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="917.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (8 samples, 0.85%)</title><rect x="914.3" y="579.0" width="10.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (2 samples, 0.21%)</title><rect x="915.6" y="563.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) [clone .plt] (1 samples, 0.11%)</title><rect x="918.1" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.32%)</title><rect x="919.3" y="563.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.3" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.21%)</title><rect x="919.3" y="547.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="922.3" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="921.8" y="547.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="924.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.11%)</title><rect x="923.1" y="563.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.21%)</title><rect x="924.3" y="579.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.11%)</title><rect x="926.8" y="595.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::~MemTableIterator() (6 samples, 0.63%)</title><rect x="928.1" y="595.0" width="7.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.1" y="606.0"></text>
</g>
<g>
<title>__libc_free (3 samples, 0.32%)</title><rect x="930.5" y="579.0" width="3.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="933.5" y="590.0"></text>
</g>
<g>
<title>free@plt (1 samples, 0.11%)</title><rect x="934.3" y="579.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="937.3" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="935.5" y="595.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="938.5" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="935.5" y="579.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="938.5" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="935.5" y="563.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="938.5" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="936.8" y="611.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="939.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="936.8" y="595.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="939.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="936.8" y="579.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="939.8" y="590.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::TruncatedRangeDelIterator*, rocksdb::TruncatedRangeDelIterator*, std::_Identity&lt;rocksdb::TruncatedRangeDelIterator*&gt;, rocksdb::SeqMaxComparator, std::allocator&lt;rocksdb::TruncatedRangeDelIterator*&gt; &gt;::_M_erase(std::_Rb_tree_node&lt;rocksdb::TruncatedRangeDelIterator*&gt;*) (1 samples, 0.11%)</title><rect x="938.0" y="627.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBIter::~DBIter() (1 samples, 0.11%)</title><rect x="939.3" y="643.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="942.3" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="939.3" y="627.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="942.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="939.3" y="611.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="942.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="939.3" y="595.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="942.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="940.5" y="643.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="943.5" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="940.5" y="627.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="943.5" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="940.5" y="611.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="943.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (176 samples, 18.60%)</title><rect x="941.8" y="739.0" width="219.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.8" y="750.0">ru/mail/polis/dao/basta123/My..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyRecordIter.next (176 samples, 18.60%)</title><rect x="941.8" y="723.0" width="219.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.8" y="734.0">ru/mail/polis/dao/basta123/My..</text>
</g>
<g>
<title>org/rocksdb/AbstractRocksIterator.next (175 samples, 18.50%)</title><rect x="941.8" y="707.0" width="218.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="944.8" y="718.0">org/rocksdb/AbstractRocksIter..</text>
</g>
<g>
<title>org/rocksdb/RocksIterator.next0 (175 samples, 18.50%)</title><rect x="941.8" y="691.0" width="218.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.8" y="702.0">org/rocksdb/RocksIterator.next0</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.32%)</title><rect x="941.8" y="675.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.8" y="686.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.32%)</title><rect x="945.5" y="675.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="948.5" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (4 samples, 0.42%)</title><rect x="949.3" y="675.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="952.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::ArenaWrappedDBIter::Next() (110 samples, 11.63%)</title><rect x="954.2" y="675.0" width="137.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.2" y="686.0">rocksdb::ArenaWra..</text>
</g>
<g>
<title>rocksdb::DBIter::FindNextUserEntryInternal(bool, bool) (110 samples, 11.63%)</title><rect x="954.2" y="659.0" width="137.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.2" y="670.0">rocksdb::DBIter::..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 0.74%)</title><rect x="954.2" y="643.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.2" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.21%)</title><rect x="954.2" y="627.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.2" y="638.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.21%)</title><rect x="954.2" y="611.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="957.2" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="954.2" y="595.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="957.2" y="606.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.11%)</title><rect x="955.5" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.5" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.42%)</title><rect x="956.7" y="627.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.7" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (4 samples, 0.42%)</title><rect x="956.7" y="611.0" width="5.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="959.7" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.32%)</title><rect x="958.0" y="595.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="961.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.21%)</title><rect x="959.2" y="579.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="962.2" y="590.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.11%)</title><rect x="960.5" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="963.5" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="961.7" y="627.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="964.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.11%)</title><rect x="963.0" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::NextAndGetResult(rocksdb::IterateResult*) (14 samples, 1.48%)</title><rect x="964.2" y="643.0" width="17.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.2" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="964.2" y="627.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="967.2" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="965.5" y="627.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="968.5" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="965.5" y="611.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="968.5" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="965.5" y="595.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="968.5" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="965.5" y="579.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="968.5" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="966.7" y="627.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="969.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (7 samples, 0.74%)</title><rect x="968.0" y="627.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.0" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="968.0" y="611.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.0" y="622.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.11%)</title><rect x="968.0" y="595.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="971.0" y="606.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.11%)</title><rect x="968.0" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.0" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.32%)</title><rect x="969.2" y="611.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="972.2" y="622.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.32%)</title><rect x="969.2" y="595.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="972.2" y="606.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.11%)</title><rect x="969.2" y="579.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.2" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (2 samples, 0.21%)</title><rect x="970.5" y="579.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="973.5" y="590.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="970.5" y="563.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="973.5" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="971.7" y="563.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.7" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="973.0" y="611.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="976.0" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.21%)</title><rect x="974.2" y="611.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="977.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;::NextAndGetResult(rocksdb::IterateResult*) (2 samples, 0.21%)</title><rect x="976.7" y="627.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.7" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (1 samples, 0.11%)</title><rect x="976.7" y="611.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="979.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Next() (1 samples, 0.11%)</title><rect x="977.9" y="611.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.9" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="977.9" y="595.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="980.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::key() const (1 samples, 0.11%)</title><rect x="979.2" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() [clone .plt] (1 samples, 0.11%)</title><rect x="980.4" y="627.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MergingIterator::Seek(rocksdb::Slice const&amp;) (88 samples, 9.30%)</title><rect x="981.7" y="643.0" width="109.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.7" y="654.0">rocksdb::Merg..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.11%)</title><rect x="981.7" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="984.7" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="981.7" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.7" y="622.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="981.7" y="595.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="984.7" y="606.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (1 samples, 0.11%)</title><rect x="981.7" y="579.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="984.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator&lt;rocksdb::DataBlockIter, rocksdb::Slice&gt;::SeekImpl(rocksdb::Slice const*) (36 samples, 3.81%)</title><rect x="982.9" y="627.0" width="44.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.9" y="638.0">rock..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="982.9" y="611.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="985.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (16 samples, 1.69%)</title><rect x="984.2" y="611.0" width="19.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.2" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="985.4" y="595.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (14 samples, 1.48%)</title><rect x="986.7" y="595.0" width="17.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (14 samples, 1.48%)</title><rect x="986.7" y="579.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.7" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (8 samples, 0.85%)</title><rect x="986.7" y="563.0" width="10.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.7" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (8 samples, 0.85%)</title><rect x="986.7" y="547.0" width="10.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="989.7" y="558.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.11%)</title><rect x="986.7" y="531.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.7" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="987.9" y="531.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (5 samples, 0.53%)</title><rect x="989.2" y="531.0" width="6.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="992.2" y="542.0"></text>
</g>
<g>
<title>JNIHandles::resolve(_jobject*) (1 samples, 0.11%)</title><rect x="991.7" y="515.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.7" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.11%)</title><rect x="992.9" y="515.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.9" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="992.9" y="499.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.9" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="994.2" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.2" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.11%)</title><rect x="995.4" y="531.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="998.4" y="542.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="996.7" y="563.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="999.7" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.32%)</title><rect x="997.9" y="563.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1000.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.11%)</title><rect x="997.9" y="547.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.9" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="999.2" y="547.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.2" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="1000.4" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.21%)</title><rect x="1001.6" y="563.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.6" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="1001.6" y="547.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.6" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="1002.9" y="547.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1005.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (19 samples, 2.01%)</title><rect x="1004.1" y="611.0" width="23.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.1" y="622.0">r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.11%)</title><rect x="1004.1" y="595.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (18 samples, 1.90%)</title><rect x="1005.4" y="595.0" width="22.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.4" y="606.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="1005.4" y="579.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.4" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1006.6" y="579.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1009.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 1.69%)</title><rect x="1007.9" y="579.0" width="19.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.9" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.42%)</title><rect x="1009.1" y="563.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.1" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.32%)</title><rect x="1010.4" y="547.0" width="3.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1013.4" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (3 samples, 0.32%)</title><rect x="1010.4" y="531.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1013.4" y="542.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="1010.4" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.4" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.21%)</title><rect x="1011.6" y="515.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.6" y="526.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.11%)</title><rect x="1011.6" y="499.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.6" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.11%)</title><rect x="1012.9" y="499.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1015.9" y="510.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (8 samples, 0.85%)</title><rect x="1014.1" y="563.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.1" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (8 samples, 0.85%)</title><rect x="1014.1" y="547.0" width="10.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1017.1" y="558.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.11%)</title><rect x="1014.1" y="531.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.1" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="1015.4" y="531.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.4" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (6 samples, 0.63%)</title><rect x="1016.6" y="531.0" width="7.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1019.6" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (3 samples, 0.32%)</title><rect x="1016.6" y="515.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.6" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.32%)</title><rect x="1020.4" y="515.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.4" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="1022.9" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.9" y="510.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="1024.1" y="563.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1027.1" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1025.3" y="563.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1028.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="1026.6" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.6" y="574.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.11%)</title><rect x="1026.6" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.11%)</title><rect x="1027.8" y="627.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Seek(rocksdb::Slice const&amp;) (50 samples, 5.29%)</title><rect x="1029.1" y="627.0" width="62.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.1" y="638.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni6333772849587512536.so (50 samples, 5.29%)</title><rect x="1029.1" y="611.0" width="62.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1032.1" y="622.0">/tmp/l..</text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (50 samples, 5.29%)</title><rect x="1029.1" y="595.0" width="62.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.1" y="606.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (48 samples, 5.07%)</title><rect x="1031.6" y="579.0" width="59.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.6" y="590.0">rocksd..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.11%)</title><rect x="1032.8" y="563.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.8" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1034.1" y="563.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1037.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (42 samples, 4.44%)</title><rect x="1035.3" y="563.0" width="52.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.3" y="574.0">rocks..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (14 samples, 1.48%)</title><rect x="1036.6" y="547.0" width="17.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.6" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (14 samples, 1.48%)</title><rect x="1036.6" y="531.0" width="17.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1039.6" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="1037.8" y="515.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.8" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="1039.1" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.1" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (11 samples, 1.16%)</title><rect x="1040.3" y="515.0" width="13.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1043.3" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="1041.6" y="499.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1044.6" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 0.95%)</title><rect x="1042.8" y="499.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.8" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.21%)</title><rect x="1047.8" y="483.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.21%)</title><rect x="1050.3" y="483.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.3" y="494.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.11%)</title><rect x="1052.8" y="483.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.8" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (20 samples, 2.11%)</title><rect x="1054.0" y="547.0" width="25.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.0" y="558.0">J..</text>
</g>
<g>
<title>jni_CallVoidMethodV (20 samples, 2.11%)</title><rect x="1054.0" y="531.0" width="25.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1057.0" y="542.0">j..</text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.11%)</title><rect x="1054.0" y="515.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.0" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (1 samples, 0.11%)</title><rect x="1055.3" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.3" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.21%)</title><rect x="1056.5" y="515.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.5" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.21%)</title><rect x="1059.0" y="515.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.0" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.218] (14 samples, 1.48%)</title><rect x="1061.5" y="515.0" width="17.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1064.5" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.21%)</title><rect x="1062.8" y="499.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.8" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="1065.3" y="499.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.3" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long) (2 samples, 0.21%)</title><rect x="1066.5" y="499.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.5" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.74%)</title><rect x="1069.0" y="499.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.0" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.11%)</title><rect x="1072.7" y="483.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.7" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.11%)</title><rect x="1074.0" y="483.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.0" y="494.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.21%)</title><rect x="1075.2" y="483.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.2" y="494.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.11%)</title><rect x="1077.7" y="499.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.7" y="510.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.11%)</title><rect x="1079.0" y="547.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1082.0" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.21%)</title><rect x="1080.2" y="547.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1083.2" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="1081.5" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.5" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.11%)</title><rect x="1082.7" y="547.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1085.7" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="1084.0" y="547.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1087.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.11%)</title><rect x="1085.2" y="547.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.2" y="558.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.11%)</title><rect x="1085.2" y="531.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.2" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="1086.5" y="547.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1089.5" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="1086.5" y="531.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1089.5" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="1086.5" y="515.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1089.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.21%)</title><rect x="1087.7" y="563.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.11%)</title><rect x="1090.2" y="563.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (55 samples, 5.81%)</title><rect x="1091.5" y="675.0" width="68.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.5" y="686.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/basta123/MyComparator.compare (53 samples, 5.60%)</title><rect x="1094.0" y="659.0" width="66.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.0" y="670.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.11%)</title><rect x="1094.0" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1097.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/primitives/SignedBytes$LexicographicalComparator.compare (1 samples, 0.11%)</title><rect x="1094.0" y="627.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1097.0" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (52 samples, 5.50%)</title><rect x="1095.2" y="643.0" width="64.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1098.2" y="654.0">org/roc..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (6 samples, 0.63%)</title><rect x="1095.2" y="627.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1098.2" y="638.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (46 samples, 4.86%)</title><rect x="1102.7" y="627.0" width="57.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1105.7" y="638.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (44 samples, 4.65%)</title><rect x="1103.9" y="611.0" width="54.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.9" y="622.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (41 samples, 4.33%)</title><rect x="1105.2" y="595.0" width="51.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1108.2" y="606.0">Java_..</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.11%)</title><rect x="1105.2" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.2" y="590.0"></text>
</g>
<g>
<title>__memcpy_avx_unaligned (4 samples, 0.42%)</title><rect x="1106.4" y="579.0" width="5.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1109.4" y="590.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.32%)</title><rect x="1111.4" y="579.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1114.4" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.42%)</title><rect x="1115.2" y="579.0" width="4.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1118.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.11%)</title><rect x="1115.2" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.32%)</title><rect x="1116.4" y="563.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.4" y="574.0"></text>
</g>
<g>
<title>jni_NewByteArray (24 samples, 2.54%)</title><rect x="1120.1" y="579.0" width="30.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1123.1" y="590.0">jn..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.32%)</title><rect x="1123.9" y="563.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.9" y="574.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.11%)</title><rect x="1127.6" y="563.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.6" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.42%)</title><rect x="1128.9" y="563.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.11%)</title><rect x="1133.9" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.9" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 1.27%)</title><rect x="1135.1" y="563.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 1.16%)</title><rect x="1136.4" y="547.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.74%)</title><rect x="1140.1" y="531.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="542.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.32%)</title><rect x="1141.4" y="515.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.4" y="526.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.11%)</title><rect x="1145.1" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.1" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned (2 samples, 0.21%)</title><rect x="1146.3" y="515.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1149.3" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="1148.8" y="531.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1151.8" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.53%)</title><rect x="1150.1" y="579.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1153.1" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.11%)</title><rect x="1150.1" y="563.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.1" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="1150.1" y="547.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1153.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="1150.1" y="531.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1153.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="1150.1" y="515.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1153.1" y="526.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.32%)</title><rect x="1151.3" y="563.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1154.3" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.21%)</title><rect x="1152.6" y="547.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="1155.1" y="563.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1158.1" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="1155.1" y="547.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1158.1" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="1155.1" y="531.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1158.1" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.11%)</title><rect x="1156.3" y="595.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1159.3" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.11%)</title><rect x="1157.6" y="595.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1160.6" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="1158.8" y="611.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="1158.8" y="595.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1161.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="1158.8" y="579.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.11%)</title><rect x="1160.1" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1163.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1160.1" y="691.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1163.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1160.1" y="675.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1163.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/basta123/Utils.getByteBufferFromByteArray (1 samples, 0.11%)</title><rect x="1161.3" y="755.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1164.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1161.3" y="739.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1164.3" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.11%)</title><rect x="1161.3" y="723.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1164.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.11%)</title><rect x="1162.6" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="1162.6" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="1162.6" y="755.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="1162.6" y="739.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="1162.6" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.11%)</title><rect x="1163.8" y="819.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1166.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1163.8" y="803.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1166.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1163.8" y="787.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1166.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1165.1" y="819.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1168.1" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.11%)</title><rect x="1165.1" y="803.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1168.1" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.11%)</title><rect x="1166.3" y="819.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1169.3" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.11%)</title><rect x="1166.3" y="803.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1169.3" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.11%)</title><rect x="1166.3" y="787.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1169.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 1.69%)</title><rect x="1167.5" y="835.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1170.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (16 samples, 1.69%)</title><rect x="1167.5" y="819.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1170.5" y="830.0"></text>
</g>
<g>
<title>__recv (16 samples, 1.69%)</title><rect x="1167.5" y="803.0" width="20.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 1.37%)</title><rect x="1171.3" y="787.0" width="16.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 1.37%)</title><rect x="1171.3" y="771.0" width="16.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (12 samples, 1.27%)</title><rect x="1172.5" y="755.0" width="15.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1175.5" y="766.0"></text>
</g>
<g>
<title>__sys_recvfrom (12 samples, 1.27%)</title><rect x="1172.5" y="739.0" width="15.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1175.5" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (10 samples, 1.06%)</title><rect x="1172.5" y="723.0" width="12.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.5" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (10 samples, 1.06%)</title><rect x="1172.5" y="707.0" width="12.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (10 samples, 1.06%)</title><rect x="1172.5" y="691.0" width="12.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1175.5" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.21%)</title><rect x="1172.5" y="675.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1175.5" y="686.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.21%)</title><rect x="1172.5" y="659.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1175.5" y="670.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.11%)</title><rect x="1172.5" y="643.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1175.5" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.11%)</title><rect x="1173.8" y="643.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.11%)</title><rect x="1173.8" y="627.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.21%)</title><rect x="1175.0" y="675.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (2 samples, 0.21%)</title><rect x="1175.0" y="659.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.21%)</title><rect x="1175.0" y="643.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.21%)</title><rect x="1175.0" y="627.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.21%)</title><rect x="1175.0" y="611.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.42%)</title><rect x="1177.5" y="675.0" width="5.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>tcp_send_ack (4 samples, 0.42%)</title><rect x="1177.5" y="659.0" width="5.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.46 (4 samples, 0.42%)</title><rect x="1177.5" y="643.0" width="5.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (4 samples, 0.42%)</title><rect x="1177.5" y="627.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.32%)</title><rect x="1177.5" y="611.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.32%)</title><rect x="1177.5" y="595.0" width="3.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.11%)</title><rect x="1177.5" y="579.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.21%)</title><rect x="1178.8" y="579.0" width="2.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.21%)</title><rect x="1178.8" y="563.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.21%)</title><rect x="1178.8" y="547.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.21%)</title><rect x="1178.8" y="531.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.21%)</title><rect x="1178.8" y="515.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.21%)</title><rect x="1178.8" y="499.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>do_softirq.part.20 (2 samples, 0.21%)</title><rect x="1178.8" y="483.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.21%)</title><rect x="1178.8" y="467.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.21%)</title><rect x="1178.8" y="451.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.21%)</title><rect x="1178.8" y="435.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.21%)</title><rect x="1178.8" y="419.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>__netif_receive_skb (2 samples, 0.21%)</title><rect x="1178.8" y="403.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.21%)</title><rect x="1178.8" y="387.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.21%)</title><rect x="1178.8" y="371.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.21%)</title><rect x="1178.8" y="355.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.21%)</title><rect x="1178.8" y="339.0" width="2.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.21%)</title><rect x="1178.8" y="323.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.21%)</title><rect x="1178.8" y="307.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.21%)</title><rect x="1178.8" y="291.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.11%)</title><rect x="1178.8" y="275.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.11%)</title><rect x="1180.0" y="275.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1183.0" y="286.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.11%)</title><rect x="1181.3" y="611.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.11%)</title><rect x="1181.3" y="595.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.21%)</title><rect x="1182.5" y="675.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.11%)</title><rect x="1183.8" y="659.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1186.8" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.21%)</title><rect x="1185.0" y="723.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1188.0" y="734.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.21%)</title><rect x="1185.0" y="707.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1188.0" y="718.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.21%)</title><rect x="1185.0" y="691.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1188.0" y="702.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.21%)</title><rect x="1185.0" y="675.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1188.0" y="686.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.21%)</title><rect x="1187.5" y="883.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1190.5" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.21%)</title><rect x="1187.5" y="867.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1190.5" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.21%)</title><rect x="1187.5" y="851.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.21%)</title><rect x="1187.5" y="835.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="846.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.21%)</title><rect x="1187.5" y="819.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.5" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.11%)</title><rect x="1187.5" y="803.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.5" y="814.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.11%)</title><rect x="1187.5" y="787.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="771.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="782.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="755.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::zero_bottom_entry_raw() (1 samples, 0.11%)</title><rect x="1187.5" y="739.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="750.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.11%)</title><rect x="1188.8" y="803.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
</g>
</svg>
